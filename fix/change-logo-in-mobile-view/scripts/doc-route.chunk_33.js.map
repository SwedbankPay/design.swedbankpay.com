{"version":3,"sources":["webpack:///./src/App/ComponentsDocumentation/components/Toast/index.js"],"names":["Overview","id","language","codeFigure","dangerousHTML","showCasePanel","className","type","onClick","dg","toast","html","to","Options","code","PremadeToasts","CustomHtml","Toast","Component"],"mappings":"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","file":"scripts/doc-route.chunk_33.js?1a3e7c310d0f4dd1d979","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ComponentPreview, DocContainer } from \"@docutils\";\nimport Alert from \"@components/Alert\";\nimport CodeTags from \"@components/CodeTags\";\n\nconst Overview = () => (\n    <>\n        <h2 id=\"overview\">Overview</h2>\n        <p>You want jam on that toast?</p>\n        <ComponentPreview language=\"javascript\" codeFigure>\n            {\"dg.toast({ html: \\\"I am a toast!\\\" });\"}\n        </ComponentPreview>\n        <ComponentPreview language=\"html\" codeFigure dangerousHTML>\n            {\"<button onclick=\\\"dg.toast({ html: 'I am a toast!' })\\\" class=\\\"btn btn-primary\\\">Toast!</button>\"}\n        </ComponentPreview>\n        <ComponentPreview language=\"html\" showCasePanel>\n            <button className=\"btn btn-primary\" type=\"button\" onClick={() => dg.toast({ html: \"I am a toast!\" })}>Click for toast!</button>\n        </ComponentPreview>\n        <Alert type=\"warning\">\n            <h5>Content restriction</h5>\n            <p>\n                Donâ€™t put too much text in toasts as they are meant to be visible for only a short amount of time.\n                Due to the time restriction you should also avoid putting vital information in them.\n                A <Link to=\"/components/sheet\">sheet</Link> or <Link to=\"/components/dialog\">dialog</Link> is\n                recommended when recieving input or relaying large amounts of information.\n            </p>\n        </Alert>\n    </>\n);\n\nconst Options = () => (\n    <>\n        <h2 id=\"options\">Options</h2>\n        <table className=\"table table-striped\">\n            <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>Type</th>\n                    <th>Default</th>\n                    <th>Description</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>html</td>\n                    <td>String</td>\n                    <td><CodeTags type=\"secondary\" code={\"\\\"\\\"\"} /></td>\n                    <td>The HTML content of the Toast.</td>\n                </tr>\n                <tr>\n                    <td>type</td>\n                    <td>String</td>\n                    <td><CodeTags type=\"secondary\" code={\"\\\"\\\"\"} /></td>\n                    <td>Premade alert types; <CodeTags type=\"secondary\" code=\"success\" />, <CodeTags type=\"secondary\" code=\"neutral\" />, <CodeTags type=\"secondary\" code=\"warning\" /> and <CodeTags type=\"secondary\" code=\"danger\" /> are available.</td>\n                </tr>\n                <tr>\n                    <td>dismissable</td>\n                    <td>Boolean</td>\n                    <td><CodeTags type=\"secondary\" code=\"true\" /></td>\n                    <td>Wether or not the alert should be dismissable by the user (close button).</td>\n                </tr>\n                <tr>\n                    <td>icon</td>\n                    <td>String</td>\n                    <td><CodeTags type=\"secondary\" code={\"\\\"\\\"\"} /></td>\n                    <td>Custom icon for the toast. See <Link to=\"/core/iconography\">icons</Link> for more info.</td>\n                </tr>\n                <tr>\n                    <td>displayLength</td>\n                    <td>Number</td>\n                    <td><CodeTags type=\"secondary\" code=\"4000\" /></td>\n                    <td>Length in ms the Toast stays before dismissal.</td>\n                </tr>\n                <tr>\n                    <td>classes</td>\n                    <td>Array of strings</td>\n                    <td><CodeTags type=\"secondary\" code=\"[]\" /></td>\n                    <td>Classes to be added to the toast element.</td>\n                </tr>\n                <tr>\n                    <td>completeCallback</td>\n                    <td>Function</td>\n                    <td><CodeTags type=\"secondary\" code=\"null\" /></td>\n                    <td>Callback function called when toast is dismissed.</td>\n                </tr>\n            </tbody>\n        </table>\n    </>\n);\n\nconst PremadeToasts = () => (\n    <>\n        <h2 id=\"premade-toasts\">Premade toasts</h2>\n        <p>There are four premade toast styles other than the default one; <CodeTags type=\"secondary\" code=\"neutral\" />, <CodeTags type=\"secondary\" code=\"success\" />, <CodeTags type=\"secondary\" code=\"warning\" /> and <CodeTags type=\"secondary\" code=\"danger\" />. Apply the desired one to the options object and be amazed!</p>\n        <ComponentPreview language=\"html\" codeFigure dangerousHTML>\n            {\"<button type=\\\"button\\\" onclick=\\\"dg.toast({ html: 'I am a neutral toast!', type: 'neutral' })\\\" class=\\\"btn btn-primary\\\">Neutral toast</button>\"}\n            {\"<button type=\\\"button\\\" onclick=\\\"dg.toast({ html: 'I am a success toast!', type: 'success' })\\\" class=\\\"btn btn-primary\\\">Success toast</button>\"}\n            {\"<button type=\\\"button\\\" onclick=\\\"dg.toast({ html: 'I am a warning toast!', type: 'warning' })\\\" class=\\\"btn btn-primary\\\">Warning toast</button>\"}\n            {\"<button type=\\\"button\\\" onclick=\\\"dg.toast({ html: 'I am a danger toast!', type: 'danger' })\\\" class=\\\"btn btn-primary\\\">Danger toast</button>\"}\n        </ComponentPreview>\n        <ComponentPreview language=\"html\" showCasePanel>\n            <button\n                className=\"btn btn-primary\"\n                type=\"button\"\n                onClick={() => dg.toast({\n                    html: \"I am a toast!\",\n                    type: \"neutral\"\n                })}\n            >\n                Neutral toast\n            </button>{\"\\n\"}\n            <button\n                className=\"btn btn-primary\"\n                type=\"button\"\n                onClick={() => dg.toast({\n                    html: \"I am a toast!\",\n                    type: \"success\"\n                })}\n            >\n                Success toast\n            </button>{\"\\n\"}\n            <button\n                className=\"btn btn-primary\"\n                type=\"button\"\n                onClick={() => dg.toast({\n                    html: \"I am a toast!\",\n                    type: \"warning\"\n                })}\n            >\n                Warning toast\n            </button>{\"\\n\"}\n            <button\n                className=\"btn btn-primary\"\n                type=\"button\"\n                onClick={() => dg.toast({\n                    html: \"I am a toast!\",\n                    type: \"danger\"\n                })}\n            >\n                Danger toast\n            </button>\n        </ComponentPreview>\n    </>\n);\n\nconst CustomHtml = () => {\n    const toastHtml = \"<span><p>I am toast content.</p><p>You can put me on several lines.</p></span><button class=\\\"btn toast-action\\\">Undo</button>\";\n\n    return (\n        <>\n            <h2 id=\"custom-html\">Custom HTML</h2>\n            <p>You can pass in an HTML String as the first argument as well. Take a look at the example below, where we pass in text as well as a flat button. If you call an external function instead of in-line JavaScript, you will not need to escape quotation marks.</p>\n            <ComponentPreview language=\"javascript\" codeFigure>\n                {\"const toastHtml = \\\"<span><p>I am toast content.</p><p>You can put me on several lines.</p></span><button class='btn toast-action'>Undo</button>\\\";\"}{\"\\n\"}\n                {\"dg.toast({ html: toastHtml });\"}\n            </ComponentPreview>\n            <ComponentPreview language=\"html\" showCasePanel>\n                <button className=\"btn btn-primary\" type=\"button\" onClick={() => dg.toast({ html: toastHtml })}>Toast with action</button>\n            </ComponentPreview>\n        </>\n    );\n};\n\nclass Toast extends Component {\n    render () {\n        return (\n            <DocContainer>\n                <p className=\"lead\">\n                    Toasts can be used as a way to give feedback to a user. Use it to display short messages that something has happened that will not be immediately apparent on the website.\n                    This can be everything from a server query to saving some user settings.\n                </p>\n                <Overview />\n                <Options />\n                <PremadeToasts />\n                <CustomHtml />\n            </DocContainer>\n        );\n    }\n}\n\nexport default Toast;\n\n/* For testing */\nexport { Overview, Options, PremadeToasts, CustomHtml };\n"],"sourceRoot":""}