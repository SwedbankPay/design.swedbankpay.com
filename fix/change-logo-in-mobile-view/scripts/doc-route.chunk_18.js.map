{"version":3,"sources":["webpack:///./src/App/components/InputGroup/index.js","webpack:///./src/App/ComponentsDocumentation/components/InputGroup/index.js","webpack:///(webpack)/buildin/amd-options.js","webpack:///./node_modules/classnames/index.js"],"names":["Addon","type","value","color","disabled","className","aria-hidden","Feedback","icon","InputGroup","id","placeholder","pattern","validate","required","defaultValue","autoComplete","readOnly","label","validationState","selectOptions","prefixValue","prefixType","prefixBtnColor","postfixValue","postfixType","postfixBtnColor","feedbackIcon","helpBlock","errorMessage","successMessage","attrs","inputGrpClasses","classnames","htmlFor","map","opt","i","key","length","data-success","data-error","propTypes","PropTypes","string","isRequired","bool","oneOf","array","oneOfType","BasicExample","code","language","showCasePanel","codeFigure","CheckboxesAndRadios","removeOuterTag","ButtonAddons","WithSelect","WithFeedbackIcon","ValidationStates","Disabled","docToc","module","exports","__webpack_amd_options__","hasOwn","hasOwnProperty","classNames","classes","arguments","arg","argType","push","Array","isArray","inner","apply","call","join","default","define","window"],"mappings":"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","file":"scripts/doc-route.chunk_18.js?1a3e7c310d0f4dd1d979","sourcesContent":["import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nexport const Addon = ({ type, value, color, disabled }) => (\n    (type === \"button\") ?\n        <button type=\"button\" className={`btn btn-${color}`} disabled={disabled}>\n            {value}\n        </button>\n        : <span className=\"input-group-addon\">{(type === \"icon\") ? <i className=\"material-icons\" aria-hidden=\"true\">{value}</i> : value}</span>\n);\n\nconst Feedback = ({ icon }) => (\n    <span className=\"form-control-feedback\">{\"\\n\\t\\t\"}\n        <i className=\"material-icons\" aria-hidden=\"true\">{icon}</i>{\"\\n\\t\"}\n    </span>\n);\n\nconst InputGroup = ({\n    id,\n    type,\n    placeholder,\n    pattern,\n    validate,\n    required,\n    defaultValue,\n    autoComplete,\n    disabled,\n    readOnly,\n    label,\n    validationState,\n    selectOptions,\n    prefixValue,\n    prefixType,\n    prefixBtnColor,\n    postfixValue,\n    postfixType,\n    postfixBtnColor,\n    feedbackIcon,\n    helpBlock,\n    errorMessage,\n    successMessage\n}) => {\n    const attrs = {\n        type: type || null,\n        className: \"form-control\",\n        id: id || null,\n        placeholder: placeholder || null,\n        defaultValue: defaultValue || \"\",\n        disabled: disabled || null,\n        readOnly: readOnly || null,\n        autoComplete: autoComplete || null,\n        required: required || null,\n        pattern: pattern ? \"\" : null,\n        \"data-validate\": validate ? \"\" : null\n    };\n\n    const inputGrpClasses = classnames(\n        \"input-group\",\n        validationState ? `has-${validationState}` : null,\n        feedbackIcon ? \"has-feedback\" : null\n    );\n\n    return (\n        <div className={`form-group${disabled ? \" disabled\" : \"\"}`}>{\"\\n\"}\n            {label ? <label htmlFor={id}>{label}</label> : null}{label ? \"\\n\" : null}\n            {prefixValue || postfixValue || feedbackIcon ?\n                <div className={inputGrpClasses}>{\"\\n\"}\n                    {prefixValue ? <Addon type={prefixType} value={prefixValue} color={prefixBtnColor} disabled={disabled} /> : null }{prefixValue ? \"\\n\" : null}\n                    {type === \"textarea\" ?\n                        <textarea {...attrs}></textarea>\n                        : type === \"select\" ?\n                            <select className=\"form-control\" disabled={disabled} readOnly={readOnly}>{\"\\n\\t\\t\"}\n                                {selectOptions.map((opt, i) => (\n                                    <Fragment key={opt + i}>\n                                        <option>{opt}</option>{(i !== selectOptions.length - 1) ? \"\\n\\t\\t\" : \"\"}\n                                    </Fragment>\n                                ))}{\"\\n\\t\"}\n                            </select>\n                            :\n                            <input {...attrs} />}\n                    {\"\\n\"}\n                    {feedbackIcon ? <Feedback icon={feedbackIcon} /> : null} {feedbackIcon ? \"\\n\" : null}\n                    {postfixValue ? <Addon type={postfixType} value={postfixValue} color={postfixBtnColor} disabled={disabled} /> : null }{postfixValue ? \"\\n\" : null}\n                </div>\n                :\n                <>\n                    {type === \"textarea\" ?\n                        <textarea {...attrs}></textarea>\n                        : type === \"select\" ?\n                            <select className=\"form-control\" disabled={disabled} readOnly={readOnly}>{\"\\n\\t\\t\"}\n                                {selectOptions.map((opt, i) => (\n                                    <Fragment key={opt + i}>\n                                        <option>{opt}</option>{(i !== selectOptions.length - 1) ? \"\\n\\t\\t\" : \"\"}\n                                    </Fragment>\n                                ))}{\"\\n\\t\"}\n                            </select>\n                            :\n                            <input {...attrs} />}\n                </>\n            }\n            {helpBlock ? <div className=\"help-block\" data-success={successMessage || null} data-error={errorMessage || null}>{helpBlock}</div> : null}\n        </div>\n    );\n};\n\nInputGroup.propTypes = {\n    type: PropTypes.string.isRequired,\n    id: PropTypes.string,\n    placeholder: PropTypes.string,\n    pattern: PropTypes.string,\n    validate: PropTypes.bool,\n    required: PropTypes.bool,\n    defaultValue: PropTypes.string,\n    autoComplete: PropTypes.string,\n    disabled: PropTypes.bool,\n    readOnly: PropTypes.bool,\n    label: PropTypes.string,\n    validationState: PropTypes.oneOf([\"error\", \"\"]),\n    selectOptions: PropTypes.array,\n    prefixValue: PropTypes.string,\n    prefixType: PropTypes.oneOf([\"button\", \"icon\", \"\"]),\n    prefixBtnColor: PropTypes.oneOf([\"primary\", \"secondary\"]),\n    postfixValue: PropTypes.string,\n    postfixType: PropTypes.oneOf([\"button\", \"icon\", \"\"]),\n    postfixBtnColor: PropTypes.oneOf([\"primary\", \"secondary\"]),\n    feedbackIcon: PropTypes.string,\n    helpBlock: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool\n    ]),\n    errorMessage: PropTypes.string,\n    successMessage: PropTypes.string\n};\n\nexport default InputGroup;\n","import React from \"react\";\n\nimport { ComponentPreview, DocContainer } from \"@docutils\";\nimport InputGroupComponent from \"@components/InputGroup\";\nimport CodeTags from \"@components/CodeTags\";\n\nconst BasicExample = () => (\n    <>\n        <h2 id=\"basic-example\">Basic example</h2>\n        <p>\n            Add a <CodeTags type=\"primary\" code={\"<span>\"} /> with class <CodeTags type=\"secondary\" code=\".input-group-addon\"/> to get a gray box on the left,\n            right or both sides of an <CodeTags type=\"primary\" code={\"<input>\"} /> element. The position of\n            your <CodeTags type=\"secondary\" code=\".input-group-addon\"/> depends on if you place it before or after the <CodeTags type=\"primary\" code={\"<input\"} /> element.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <InputGroupComponent\n                id=\"input-id-1\"\n                type=\"text\"\n                label=\"Name\"\n                placeholder=\"Name\"\n                prefixValue=\"Mr.\"\n            /> {\"\\n\\n\"}\n            <InputGroupComponent\n                id=\"input-id-2\"\n                type=\"text\"\n                label=\"Email\"\n                placeholder=\"Email\"\n                prefixType=\"icon\"\n                prefixValue=\"email\"\n            /> {\"\\n\\n\"}\n            <InputGroupComponent\n                id=\"input-id-3\"\n                type=\"number\"\n                label=\"Amount\"\n                placeholder=\"Rounded to nearest $\"\n                prefixType=\"icon\"\n                prefixValue=\"attach_money\"\n                postfixValue=\".00\"\n            /> {\"\\n\\n\"}\n            <InputGroupComponent\n                id=\"input-id-4\"\n                type=\"textarea\"\n                label=\"Notes\"\n                placeholder=\"Special requests\"\n                prefixType=\"icon\"\n                prefixValue=\"format_quote\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst CheckboxesAndRadios = () => (\n    <>\n        <h2 id=\"checkboxes-and-radios\">Checkboxes and radios</h2>\n        <p>Place any checkbox or radio option within an input group’s addon instead of text.</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <div className=\"form-group\">\n                <div className=\"input-group\">{\"\\n\"}\n                    <span className=\"input-group-addon\">{\"\\n\\t\\t\"}\n                        <input type=\"checkbox\"/>{\"\\n\\t\"}\n                    </span>{\"\\n\"}\n                    <input type=\"text\" className=\"form-control\" />{\"\\n\"}\n                </div>\n            </div>{\"\\n\\n\"}\n            <div className=\"form-group\">\n                <div className=\"input-group\">{\"\\n\"}\n                    <span className=\"input-group-addon\">{\"\\n\\t\\t\"}\n                        <input type=\"radio\"/>{\"\\n\\t\"}\n                    </span>{\"\\n\"}\n                    <input type=\"text\" className=\"form-control\" />{\"\\n\"}\n                </div>\n            </div>\n        </ComponentPreview>\n    </>\n);\n\nconst ButtonAddons = () => (\n    <>\n        <h2 id=\"button-addons\">Button addons</h2>\n        <p>\n            If you want <CodeTags type=\"primary\" code={\"<button>\"} />s included with your input elements you can just add a <CodeTags type=\"primary\" code={\"<button>\"} /> inside\n            a input-group like you would anywhere else.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <InputGroupComponent\n                type=\"text\"\n                postfixType=\"button\"\n                postfixValue=\"Button\"\n                postfixBtnColor=\"primary\"\n            /> {\"\\n\\n\"}\n            <InputGroupComponent\n                type=\"text\"\n                prefixType=\"button\"\n                prefixValue=\"Button\"\n                prefixBtnColor=\"secondary\"\n                postfixType=\"button\"\n                postfixValue=\"Button\"\n                postfixBtnColor=\"primary\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst WithSelect = () => (\n    <>\n        <h2 id=\"with-select\">With select</h2>\n        <p>\n            Inserting text next to a <CodeTags type=\"primary\" code={\"<select>\"} /> works just like any other input element.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <InputGroupComponent\n                type=\"select\"\n                selectOptions={[\"Bounty hunter\", \"Smuggler\", \"Jedi\"]}\n                prefixValue=\"Profession\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst WithFeedbackIcon = () => (\n    <>\n        <h2 id=\"with-feedback\">With feedback</h2>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <InputGroupComponent\n                id=\"input-with-feedback-1\"\n                type=\"text\"\n                label=\"Name\"\n                placeholder=\"Name\"\n                prefixValue=\"Mr.\"\n                feedbackIcon=\"cancel\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst ValidationStates = () => (\n    <>\n        <h2 id=\"validation-states\">Validation states</h2>\n        <p>\n            You can also visualize validation on your input-groups. Just\n            add <CodeTags type=\"secondary\" code=\".has-success\" /> or <CodeTags type=\"secondary\" code=\".has-error\" /> with\n            a <CodeTags type=\"secondary\" code=\".input-group\" />.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <InputGroupComponent\n                type=\"text\"\n                validationState=\"error\"\n                placeholder=\"Name\"\n                prefixValue=\"Agent\"\n                defaultValue=\"Smith\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst Disabled = () => (\n    <>\n        <h2 id=\"disabled\">Disabled</h2>\n        <p>\n            Just like for forms you can add <CodeTags type=\"secondary\" code=\"disabled\" /> to an input element to disable it.\n            If you are going to disable an element in a <CodeTags type=\"secondary\" code=\".input-group\" /> make sure to also add the <CodeTags type=\"secondary\" code=\"disabled\"/> attribute to the buttons.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <InputGroupComponent\n                id=\"input-id-3\"\n                type=\"number\"\n                label=\"Amount\"\n                placeholder=\"Rounded to nearest $\"\n                disabled\n                prefixType=\"icon\"\n                prefixValue=\"attach_money\"\n                postfixValue=\".00\"\n            />\n            <InputGroupComponent\n                type=\"text\"\n                disabled\n                prefixType=\"button\"\n                prefixValue=\"Button\"\n                prefixBtnColor=\"secondary\"\n                postfixType=\"button\"\n                postfixValue=\"Button\"\n                postfixBtnColor=\"primary\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst InputGroup = () => (\n    <DocContainer docToc>\n        <p className=\"lead\">\n            You can include additional information to specific input elements by adding <CodeTags type=\"primary\" code={\"<span>\"} />s\n            or <CodeTags type=\"primary\" code={\"<button>\"} />s in a <CodeTags type=\"secondary\" code=\".input-group\" />.\n        </p>\n        <BasicExample />\n        <ButtonAddons />\n        <WithSelect />\n        <ValidationStates />\n        <Disabled />\n    </DocContainer>\n);\n\nexport default InputGroup;\n\n/* For testing */\nexport { BasicExample, CheckboxesAndRadios, ButtonAddons, WithSelect, WithFeedbackIcon, ValidationStates, Disabled };\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n"],"sourceRoot":""}