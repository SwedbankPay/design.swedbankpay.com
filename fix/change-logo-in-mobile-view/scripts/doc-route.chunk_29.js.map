{"version":3,"sources":["webpack:///./src/App/ComponentsDocumentation/components/Slab/index.js"],"names":["validation","window","dg","DefaultSlab","id","language","showCasePanel","codeFigure","className","action","noValidate","data-validate","htmlFor","aria-hidden","type","placeholder","required","data-success","data-error","SlabColors","code","SlabBorderTop","SlabElevated","SlabWell","SlabArrow","SlabMuted","SlabSizes","Slab","Component","init","docToc"],"mappings":"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","file":"scripts/doc-route.chunk_29.js?1a3e7c310d0f4dd1d979","sourcesContent":["import React, { Component } from \"react\";\n\nimport { ComponentPreview, DocContainer } from \"@docutils\";\nimport CodeTags from \"@components/CodeTags\";\n\nconst { validation } = window.dg;\n\nconst DefaultSlab = () => (\n    <>\n        <h2 id=\"default-slab\">Default slab</h2>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure>\n            <div className=\"slab slab-default\">\n                <p>Do you want to sign up for the slab mailing list?</p>\n                <form action=\"#\" noValidate data-validate>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"validation-email-2\">Email</label>\n                        <div className=\"input-group\">\n                            <span className=\"input-group-addon\"><i className=\"material-icons\" aria-hidden=\"true\">email</i></span>\n                            <input type=\"email\" className=\"form-control\" id=\"validation-email-2\" placeholder=\"bob.corlsan@example.com\" required />\n                        </div>\n                        <div className=\"help-block\" data-success=\"Right!\" data-error=\"Wrong!\">This one might be a little tricky</div>\n                    </div>\n                    <button className=\"btn btn-primary\" type=\"submit\">Submit</button>\n                </form>\n            </div>\n        </ComponentPreview>\n    </>\n);\n\nconst SlabColors = () => (\n    <>\n        <h2 id=\"slab-colors\">Slab colors</h2>\n        <p>\n        We offer three additional slab types; <CodeTags type=\"secondary\" code=\".slab-primary\" />, <CodeTags type=\"secondary\" code=\".slab-secondary\" /> and <CodeTags type=\"secondary\" code=\".slab-plain\" />.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure>\n            <div className=\"slab slab-primary\">\n                <h4>Here is some text and then a striped item list</h4>\n                <small>\n                    Some text with a small listing of items underneath.\n                </small>\n                <ul className=\"list item-list\">\n                    <li>Item 1</li>\n                    <li>Item 2</li>\n                    <li>Item 3</li>\n                </ul>\n            </div>\n\n            <div className=\"slab slab-secondary\">\n                <h4>Here is some text and then a striped item list</h4>\n                <small>\n                    Some text with a small listing of items underneath.\n                </small>\n                <ul className=\"list item-list\">\n                    <li>Item 1</li>\n                    <li>Item 2</li>\n                    <li>Item 3</li>\n                </ul>\n            </div>\n\n            <div className=\"slab slab-plain\">\n                <h4>Here is some text and then a striped item list</h4>\n                <small>\n                    Some text with a small listing of items underneath.\n                </small>\n                <ul className=\"list item-list\">\n                    <li>Item 1</li>\n                    <li>Item 2</li>\n                    <li>Item 3</li>\n                </ul>\n            </div>\n        </ComponentPreview>\n        <p>\n        If no slab extension class is added, it is defaulted to white. In this example we use the utility class <CodeTags type=\"secondary\" code=\".border\" /> to make it easier for us to see the actual slab container.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure>\n            <div className=\"slab border\">\n                <h4>Here is some text and then a striped item list</h4>\n                <small>\n                    Some text with a small listing of items underneath.\n                </small>\n                <ul className=\"list item-list\">\n                    <li>Item 1</li>\n                    <li>Item 2</li>\n                    <li>Item 3</li>\n                </ul>\n            </div>\n        </ComponentPreview>\n    </>\n);\n\nconst SlabBorderTop = () => (\n    <>\n        <h2 id=\"slab-border-top\">Slab with top border</h2>\n        <p>Slab with top border can be used to display, for instance, pros and cons lists.</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure>\n            <div className=\"row\">\n                <div className=\"col-6\">\n                    <div className=\"slab slab-plain slab-border-success\">\n                        <h3>Do</h3>\n                        <ul className=\"list list-bullet\">\n                            <li>Do this</li>\n                            <li>Do that</li>\n                            <li>Do the other</li>\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"col-6\">\n                    <div className=\"slab slab-plain slab-border-error\">\n                        <h3>Don&apos;t</h3>\n                        <ul className=\"list list-bullet\">\n                            <li>Don&apos;t do this</li>\n                            <li>Don&apos;t do that</li>\n                            <li>Don&apos;t to the other</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </ComponentPreview>\n    </>\n);\n\nconst SlabElevated = () => (\n    <>\n        <h2 id=\"elevated-slab\">Elevated slab</h2>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure>\n            <div className=\"slab slab-default slab-elevated\">\n                Look ma, im elevated!\n            </div>\n        </ComponentPreview>\n    </>\n);\n\nconst SlabWell = () => (\n    <>\n        <h2 id=\"slab-well\">Slab well</h2>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure>\n            <div className=\"slab slab-default slab-well\">\n                Look ma, im in a well!\n            </div>\n        </ComponentPreview>\n    </>\n);\n\nconst SlabArrow = () => (\n    <>\n        <h2 id=\"slab-arrow\">Slab arrow</h2>\n        <p>\n            <CodeTags type=\"secondary\" code=\".slab-arrow\" /> inherits the color from the slab it is appended to.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure>\n            <div className=\"slab slab-default slab-arrow\">\n                <p>\n                    This slab has some connection to the content above.\n                </p>\n            </div>\n            <div className=\"slab border slab-arrow\">\n                <p>\n                    This slab has some connection to the content above.\n                </p>\n            </div>\n            <div className=\"slab slab-primary slab-arrow\">\n                <p>\n                    This slab has some connection to the content above.\n                </p>\n            </div>\n            <div className=\"slab slab-secondary slab-arrow\">\n                <p>\n                    This slab has some connection to the content above.\n                </p>\n            </div>\n            <div className=\"slab slab-plain slab-arrow\">\n                <p>\n                    This slab has some connection to the content above.\n                </p>\n            </div>\n        </ComponentPreview>\n    </>\n);\n\nconst SlabMuted = () => (\n    <>\n        <h2 id=\"slab-muted\">Slab muted</h2>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure>\n            <div className=\"slab slab-default slab-muted\">\n                <h4>This text will be gray.</h4>{\"\\n\"}\n                <span>And this text will be gray.</span>{\"\\n\"}\n                Even this text will be gray!\n            </div>\n        </ComponentPreview>\n    </>\n);\n\nconst SlabSizes = () => (\n    <>\n        <h2 id=\"slab-sizes\">Slab sizes</h2>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure>\n            <div className=\"slab slab-default slab-sm\">\n                This is very snug.\n            </div>\n        </ComponentPreview>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure>\n            <div className=\"slab slab-default slab-lg\">\n                This is so spacious I can hardly believe it!\n            </div>\n        </ComponentPreview>\n    </>\n);\n\nclass Slab extends Component {\n    componentDidMount () {\n        validation.init();\n    }\n\n    render () {\n        return (\n            <DocContainer docToc>\n                <p className=\"lead\">\n                    Slabs are container components, therefore it works with whatever you want to put in it.\n                </p>\n                <DefaultSlab />\n                <SlabColors />\n                <SlabBorderTop />\n                <SlabElevated />\n                <SlabWell />\n                <SlabArrow />\n                <SlabMuted />\n                <SlabSizes />\n            </DocContainer>\n        );\n    }\n}\n\nexport default Slab;\n\n/* For testing */\nexport { DefaultSlab, SlabElevated, SlabWell, SlabArrow, SlabColors, SlabSizes, SlabMuted, SlabBorderTop };\n"],"sourceRoot":""}