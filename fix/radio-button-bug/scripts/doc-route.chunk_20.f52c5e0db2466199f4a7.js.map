{"version":3,"sources":["webpack://design.swedbankpay.com/./node_modules/classnames/index.js","webpack://design.swedbankpay.com/./src/App/ComponentsDocumentation/components/InputGroup/index.js","webpack://design.swedbankpay.com/./src/App/components/InputGroup/index.js"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","module","exports","default","define","window","BasicExample","id","type","code","ComponentPreview","language","showCasePanel","codeFigure","label","placeholder","prefixValue","prefixType","postfixValue","CheckboxesAndRadios","removeOuterTag","className","ButtonAddons","postfixType","postfixBtnColor","prefixBtnColor","WithSelect","selectOptions","WithFeedbackIcon","feedbackIcon","ValidationStates","validationState","defaultValue","Disabled","disabled","DocContainer","docToc","Addon","value","color","aria-hidden","Feedback","icon","InputGroup","pattern","validate","required","autoComplete","readOnly","helpBlock","errorMessage","successMessage","attrs","inputGrpClasses","classnames","htmlFor","map","opt","Fragment","data-success","data-error","propTypes","PropTypes"],"mappings":"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","file":"scripts/doc-route.chunk_20.f52c5e0db2466199f4a7.js","sourcesContent":["/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React from \"react\";\n\nimport { ComponentPreview, DocContainer } from \"@docutils\";\nimport InputGroupComponent from \"@components/InputGroup\";\nimport CodeTags from \"@components/CodeTags\";\n\nconst BasicExample = () => (\n    <>\n        <h2 id=\"basic-example\">Basic example</h2>\n        <p>\n            Add a <CodeTags type=\"primary\" code={\"<span>\"} /> with class <CodeTags type=\"secondary\" code=\".input-group-addon\"/> to get a gray box on the left,\n            right or both sides of an <CodeTags type=\"primary\" code={\"<input>\"} /> element. The position of\n            your <CodeTags type=\"secondary\" code=\".input-group-addon\"/> depends on if you place it before or after the <CodeTags type=\"primary\" code={\"<input\"} /> element.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <InputGroupComponent\n                id=\"input-id-1\"\n                type=\"text\"\n                label=\"Name\"\n                placeholder=\"Name\"\n                prefixValue=\"Mr.\"\n            /> {\"\\n\\n\"}\n            <InputGroupComponent\n                id=\"input-id-2\"\n                type=\"text\"\n                label=\"Email\"\n                placeholder=\"Email\"\n                prefixType=\"icon\"\n                prefixValue=\"email\"\n            /> {\"\\n\\n\"}\n            <InputGroupComponent\n                id=\"input-id-3\"\n                type=\"number\"\n                label=\"Amount\"\n                placeholder=\"Rounded to nearest $\"\n                prefixType=\"icon\"\n                prefixValue=\"attach_money\"\n                postfixValue=\".00\"\n            /> {\"\\n\\n\"}\n            <InputGroupComponent\n                id=\"input-id-4\"\n                type=\"textarea\"\n                label=\"Notes\"\n                placeholder=\"Special requests\"\n                prefixType=\"icon\"\n                prefixValue=\"format_quote\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst CheckboxesAndRadios = () => (\n    <>\n        <h2 id=\"checkboxes-and-radios\">Checkboxes and radios</h2>\n        <p>Place any checkbox or radio option within an input group’s addon instead of text.</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <div className=\"form-group\">\n                <div className=\"input-group\">{\"\\n\"}\n                    <span className=\"input-group-addon\">{\"\\n\\t\\t\"}\n                        <input type=\"checkbox\"/>{\"\\n\\t\"}\n                    </span>{\"\\n\"}\n                    <input type=\"text\" className=\"form-control\" />{\"\\n\"}\n                </div>\n            </div>{\"\\n\\n\"}\n            <div className=\"form-group\">\n                <div className=\"input-group\">{\"\\n\"}\n                    <span className=\"input-group-addon\">{\"\\n\\t\\t\"}\n                        <input type=\"radio\"/>{\"\\n\\t\"}\n                    </span>{\"\\n\"}\n                    <input type=\"text\" className=\"form-control\" />{\"\\n\"}\n                </div>\n            </div>\n        </ComponentPreview>\n    </>\n);\n\nconst ButtonAddons = () => (\n    <>\n        <h2 id=\"button-addons\">Button addons</h2>\n        <p>\n            If you want <CodeTags type=\"primary\" code={\"<button>\"} />s included with your input elements you can just add a <CodeTags type=\"primary\" code={\"<button>\"} /> inside\n            a input-group like you would anywhere else.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <InputGroupComponent\n                type=\"text\"\n                postfixType=\"button\"\n                postfixValue=\"Button\"\n                postfixBtnColor=\"primary\"\n            /> {\"\\n\\n\"}\n            <InputGroupComponent\n                type=\"text\"\n                prefixType=\"button\"\n                prefixValue=\"Button\"\n                prefixBtnColor=\"secondary\"\n                postfixType=\"button\"\n                postfixValue=\"Button\"\n                postfixBtnColor=\"primary\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst WithSelect = () => (\n    <>\n        <h2 id=\"with-select\">With select</h2>\n        <p>\n            Inserting text next to a <CodeTags type=\"primary\" code={\"<select>\"} /> works just like any other input element.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <InputGroupComponent\n                type=\"select\"\n                selectOptions={[\"Bounty hunter\", \"Smuggler\", \"Jedi\"]}\n                prefixValue=\"Profession\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst WithFeedbackIcon = () => (\n    <>\n        <h2 id=\"with-feedback\">With feedback</h2>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <InputGroupComponent\n                id=\"input-with-feedback-1\"\n                type=\"text\"\n                label=\"Name\"\n                placeholder=\"Name\"\n                prefixValue=\"Mr.\"\n                feedbackIcon=\"cancel\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst ValidationStates = () => (\n    <>\n        <h2 id=\"validation-states\">Validation states</h2>\n        <p>\n            You can also visualize validation on your input-groups. Just\n            add <CodeTags type=\"secondary\" code=\".has-success\" /> or <CodeTags type=\"secondary\" code=\".has-error\" /> with\n            a <CodeTags type=\"secondary\" code=\".input-group\" />.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <InputGroupComponent\n                type=\"text\"\n                validationState=\"error\"\n                placeholder=\"Name\"\n                prefixValue=\"Agent\"\n                defaultValue=\"Smith\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst Disabled = () => (\n    <>\n        <h2 id=\"disabled\">Disabled</h2>\n        <p>\n            Just like for forms you can add <CodeTags type=\"secondary\" code=\"disabled\" /> to an input element to disable it.\n            If you are going to disable an element in a <CodeTags type=\"secondary\" code=\".input-group\" /> make sure to also add the <CodeTags type=\"secondary\" code=\"disabled\"/> attribute to the buttons.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <InputGroupComponent\n                id=\"input-id-3\"\n                type=\"number\"\n                label=\"Amount\"\n                placeholder=\"Rounded to nearest $\"\n                disabled\n                prefixType=\"icon\"\n                prefixValue=\"attach_money\"\n                postfixValue=\".00\"\n            />\n            <InputGroupComponent\n                type=\"text\"\n                disabled\n                prefixType=\"button\"\n                prefixValue=\"Button\"\n                prefixBtnColor=\"secondary\"\n                postfixType=\"button\"\n                postfixValue=\"Button\"\n                postfixBtnColor=\"primary\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst InputGroup = () => (\n    <DocContainer docToc>\n        <p className=\"lead\">\n            You can include additional information to specific input elements by adding <CodeTags type=\"primary\" code={\"<span>\"} />s\n            or <CodeTags type=\"primary\" code={\"<button>\"} />s in a <CodeTags type=\"secondary\" code=\".input-group\" />.\n        </p>\n        <BasicExample />\n        <ButtonAddons />\n        <WithSelect />\n        <ValidationStates />\n        <Disabled />\n    </DocContainer>\n);\n\nexport default InputGroup;\n\n/* For testing */\nexport { BasicExample, CheckboxesAndRadios, ButtonAddons, WithSelect, WithFeedbackIcon, ValidationStates, Disabled };\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nexport const Addon = ({ type, value, color, disabled }) => (\n    (type === \"button\") ?\n        <button type=\"button\" className={`btn btn-${color}`} disabled={disabled}>\n            {value}\n        </button>\n        : <span className=\"input-group-addon\">{(type === \"icon\") ? <i className=\"material-icons\" aria-hidden=\"true\">{value}</i> : value}</span>\n);\n\nconst Feedback = ({ icon }) => (\n    <span className=\"form-control-feedback\">{\"\\n\\t\\t\"}\n        <i className=\"material-icons\" aria-hidden=\"true\">{icon}</i>{\"\\n\\t\"}\n    </span>\n);\n\nconst InputGroup = ({\n    id,\n    type,\n    placeholder,\n    pattern,\n    validate,\n    required,\n    defaultValue,\n    autoComplete,\n    disabled,\n    readOnly,\n    label,\n    validationState,\n    selectOptions,\n    prefixValue,\n    prefixType,\n    prefixBtnColor,\n    postfixValue,\n    postfixType,\n    postfixBtnColor,\n    feedbackIcon,\n    helpBlock,\n    errorMessage,\n    successMessage\n}) => {\n    const attrs = {\n        type: type || null,\n        className: \"form-control\",\n        id: id || null,\n        placeholder: placeholder || null,\n        defaultValue: defaultValue || \"\",\n        disabled: disabled || null,\n        readOnly: readOnly || null,\n        autoComplete: autoComplete || null,\n        required: required || null,\n        pattern: pattern ? \"\" : null,\n        \"data-validate\": validate ? \"\" : null\n    };\n\n    const inputGrpClasses = classnames(\n        \"input-group\",\n        validationState ? `has-${validationState}` : null,\n        feedbackIcon ? \"has-feedback\" : null\n    );\n\n    return (\n        <div className={`form-group${disabled ? \" disabled\" : \"\"}`}>{\"\\n\"}\n            {label ? <label htmlFor={id}>{label}</label> : null}{label ? \"\\n\" : null}\n            {prefixValue || postfixValue || feedbackIcon ?\n                <div className={inputGrpClasses}>{\"\\n\"}\n                    {prefixValue ? <Addon type={prefixType} value={prefixValue} color={prefixBtnColor} disabled={disabled} /> : null }{prefixValue ? \"\\n\" : null}\n                    {type === \"textarea\" ?\n                        <textarea {...attrs}></textarea>\n                        : type === \"select\" ?\n                            <select className=\"form-control\" disabled={disabled} readOnly={readOnly}>{\"\\n\\t\\t\"}\n                                {selectOptions.map((opt, i) => (\n                                    <Fragment key={opt + i}>\n                                        <option>{opt}</option>{(i !== selectOptions.length - 1) ? \"\\n\\t\\t\" : \"\"}\n                                    </Fragment>\n                                ))}{\"\\n\\t\"}\n                            </select>\n                            :\n                            <input {...attrs} />}\n                    {\"\\n\"}\n                    {feedbackIcon ? <Feedback icon={feedbackIcon} /> : null} {feedbackIcon ? \"\\n\" : null}\n                    {postfixValue ? <Addon type={postfixType} value={postfixValue} color={postfixBtnColor} disabled={disabled} /> : null }{postfixValue ? \"\\n\" : null}\n                </div>\n                :\n                <>\n                    {type === \"textarea\" ?\n                        <textarea {...attrs}></textarea>\n                        : type === \"select\" ?\n                            <select className=\"form-control\" disabled={disabled} readOnly={readOnly}>{\"\\n\\t\\t\"}\n                                {selectOptions.map((opt, i) => (\n                                    <Fragment key={opt + i}>\n                                        <option>{opt}</option>{(i !== selectOptions.length - 1) ? \"\\n\\t\\t\" : \"\"}\n                                    </Fragment>\n                                ))}{\"\\n\\t\"}\n                            </select>\n                            :\n                            <input {...attrs} />}\n                </>\n            }\n            {helpBlock ? <div className=\"help-block\" data-success={successMessage || null} data-error={errorMessage || null}>{helpBlock}</div> : null}\n        </div>\n    );\n};\n\nInputGroup.propTypes = {\n    type: PropTypes.string.isRequired,\n    id: PropTypes.string,\n    placeholder: PropTypes.string,\n    pattern: PropTypes.string,\n    validate: PropTypes.bool,\n    required: PropTypes.bool,\n    defaultValue: PropTypes.string,\n    autoComplete: PropTypes.string,\n    disabled: PropTypes.bool,\n    readOnly: PropTypes.bool,\n    label: PropTypes.string,\n    validationState: PropTypes.oneOf([\"error\", \"\"]),\n    selectOptions: PropTypes.array,\n    prefixValue: PropTypes.string,\n    prefixType: PropTypes.oneOf([\"button\", \"icon\", \"\"]),\n    prefixBtnColor: PropTypes.oneOf([\"primary\", \"secondary\"]),\n    postfixValue: PropTypes.string,\n    postfixType: PropTypes.oneOf([\"button\", \"icon\", \"\"]),\n    postfixBtnColor: PropTypes.oneOf([\"primary\", \"secondary\"]),\n    feedbackIcon: PropTypes.string,\n    helpBlock: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool\n    ]),\n    errorMessage: PropTypes.string,\n    successMessage: PropTypes.string\n};\n\nexport default InputGroup;\n"],"sourceRoot":""}