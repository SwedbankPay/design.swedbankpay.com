@import url("../global.less");
@import url("./topbar-legacy.less");

.topbar:not(.legacy) {
	--topbar-height: 60px;
	--topbar-border-width: 0.5rem;
	--topbar-spacing-horizontal: 32px;
	--topbar-links-container-spacing: 60px;
	--topbar-max-width: 960px;
	--border-radius-topbar: 24px;
	--border-radius-topbar-nav: 32px;

	// TODO: once color-mix get enough support we can replace this by CSS var. Postcss does not parse a color-mix fallback if css-var (since cannot predict ahead of time the dynamic aspect of it)
	height: var(--topbar-height);
	width: calc(100% - 2 * var(--topbar-spacing-horizontal, 32px));
	max-width: var(--topbar-max-width, 960px);
	z-index: var(--topbar-z-index, 400);
	display: flex;
	justify-content: center;
	align-items: center;
	padding: 0 1.5rem;
	position: relative;
	border-radius: 0 0 var(--border-radius-topbar, 24px)
		var(--border-radius-topbar, 24px);
	margin: 0 auto;

	&::before {
		content: "";
		position: absolute;
		width: 100%;
		height: 100%;
		backdrop-filter: blur(10px) brightness(1.1);
		z-index: -1;
		background-color: color-mix(in srgb, @brand-bg-gray, transparent 35%);
		border-radius: 0 0 var(--border-radius-topbar, 24px)
			var(--border-radius-topbar, 24px);
	}

	.nav-container {
		display: flex;
		width: 100%;
		justify-content: space-between;
		align-items: center;
	}

	&.topbar-sticky {
		position: sticky;
		top: 0;
	}

	.topbar-nav-closing .topbar-link-container {
		visibility: hidden;
	}

	// LESS func to generate classes for triggering sticky starting from a breakpoints
	each(@grid-breakpoints, .(@min-width, @infix) {
			&.topbar-min-@{infix}-sticky {
					@media screen and (min-width: @min-width) {
							.topbar-sticky();
					}
			}
	});

	// LESS func to generate classes for triggering sticky ending at a breakpoint
	each(@grid-breakpoints-max, .(@max-width, @infix) {
			&.topbar-max-@{infix}-sticky {
					@media screen and (max-width: @max-width) {
							.topbar-sticky();
					}
			}
	});

	.topbar-logo {
		background-size: cover;
		border: none;
		display: flex;

		& img {
			height: 32px;
			width: 67px;
		}
	}

	& .topbar-btn {
		user-select: none;
		background: none;
		padding: 0;
		border: 0;
		align-self: center;
		font-weight: bold;

		&:focus {
			border-radius: 0.125rem;
			box-shadow: 0 0 0 2px @black;
			outline: none;
		}
	}

	// once :has() is supported, we can remove the script that add inline-style display: none/flex to .topbar-btn when open & close
	&:has(.topbar-nav-open) .topbar-btn {
		display: none;
	}

	// hamburger menu btn to open the topbar-nav dialog
	.topbar-btn {
		display: flex;
		outline: 1px solid transparent;

		&:hover {
			cursor: pointer;
		}
	}

	// topbar-link-right is the class for the first link aligned on the right side
	> .topbar-link-right {
		display: none;
	}

	// topbar-nav is the container for links in both topbar up top and when dialog opened
	.topbar-nav {
		position: fixed;
		inset: 0;
		width: 100vw;
		height: 100vh;
		background: transparent;
		display: none;

		&.topbar-nav-closing {
			animation: fade-out ease-in-out 0.3s forwards;
		}

		// topbar when dialog is opened
		&.topbar-nav-open {
			animation: fade-in ease-in-out 0.3s forwards;
			position: fixed;
			display: flex;
			justify-content: flex-end;

			.topbar-link-container {
				animation-name: slide-in-from-right;
				animation-duration: 0.4s;
				animation-timing-function: cubic-bezier(0.22, 0.61, 0.36, 1);
				background-color: var(--white);
				position: relative;
				flex-direction: column;
				align-items: stretch;
				border: var(--white) solid var(--topbar-spacing-horizontal);
				padding: 0;

				.topbar-link-right {
					margin: initial;

					.material-icons {
						margin: 0;
					}
				}

				> a {
					font-size: 1.25rem;
					padding: 1rem 0;
					border-bottom: 1px solid
						color-mix(in srgb, @brand-secondary, transparent 60%);

					&:first-of-type {
						padding-top: 0;
					}
				}

				> button {
					margin-top: 0.75rem;

					&:first-of-type {
						margin-top: auto;
					}
				}

				@supports not selector(:has(a)) {
					> a:last-of-type {
						margin-bottom: 48px;
					}
				}
				@supports selector(:has(a)) {
					&:has(.anchored) > a:nth-last-child(1 of a:not(.anchored)) {
						margin-bottom: 48px;
					}
				}

				> button.anchored {
					position: sticky;
					bottom: 0;

					// white gradient hiding links scrolling below
					&:before {
						content: " ";
						position: absolute;
						height: 50px;
						width: 100%;
						transform: translateY(-50px);
						background: linear-gradient(
							to top,
							var(--white),
							var(--white) 15%,
							transparent
						);
					}
					// white ring to hide the links scrolling that would be visible between the button & its :before pseudo element
					&:not(&:is(:focus, :focus-visible, :focus-within)) {
						outline: 5px solid var(--white);
					}
				}
			}
		}

		.topbar-link-container {
			width: calc(100% - var(--topbar-links-container-spacing, 60px));
			display: flex;
			justify-items: center start;
			position: absolute;
			top: 0;
			bottom: 0;
			background-color: var(--white);
			overflow-x: hidden;
			overflow-y: auto;
			z-index: var(--topbar-z-index, 400);
			padding: var(--topbar-spacing-horizontal);
			align-items: center;
			border-radius: var(--border-radius-topbar-nav, 24px) 0 0
				var(--border-radius-topbar-nav, 24px);
			overscroll-behavior: contain;

			> a {
				font-size: 1rem;
				color: @brand-secondary;
				cursor: pointer;
				text-decoration: none;
				display: flex;
				gap: 0.5rem;
				line-height: 1;
				align-items: center;

				// replace the customized underline hover effect (start from center and expand) by the native underline
				&:hover {
					> span {
						&:before {
							display: none;
						}

						text-decoration: underline;
					}
				}

				&.active {
					> span {
						font-family: var(--brand-headline);
						font-weight: var(--font-weight-normal);
					}
				}

				&:last-of-type {
					border-bottom: none;
				}
			}

			@supports not selector(:has(a)) {
				> .topbar-link-right {
					margin-left: auto;
				}
			}

			@supports selector(:has(a)) {
				> .topbar-link-right,
				&:not(&:has(.topbar-link-right)) button:first-of-type {
					margin-left: auto;
				}
			}
		}
	}
}

/*
LESS mixin function scoped for the topbar on wider viewport, generated by the topbar mixin
1. Create a mixin called .topbar-@{infix}-wide
2. For each breakpoint in @grid-breakpoints, create a selector called .topbar-@{infix}-wide
3. For each selector, create a media query for the breakpoint
4. Inside each media query, call the mixin .topbar-wide()
*/
// TODO: try to refactor it to make it more readable and not use LESS mixin, but native CSS

each(@grid-breakpoints, .(@min-width, @infix) {
	.topbar-@{infix}-wide:not(.legacy) {
			@media screen and (min-width: @min-width) {
					.topbar-wide();
			}
	}
});

.topbar-wide {
	--topbar-height: 88px;
	--border-radius-topbar-nav: 48px;
	--modal-nav-width: 480px;

	padding: 0 var(--topbar-spacing-horizontal);

	.topbar-logo img {
		height: var(--topbar-spacing-horizontal);
		width: auto;
	}

	.topbar-nav {
		display: flex;
		position: static;
		flex-grow: 1;
		height: 100%;

		&.topbar-nav-open {
			width: 100vw;
			height: 100vh;
			position: fixed;
			justify-content: center;
			align-items: center;

			.topbar-link-container {
				width: var(--modal-nav-width, 480px);
				height: max-content;
				max-height: calc(
					100% - 2 * var(--topbar-links-container-spacing, 60px)
				);
				margin: var(--topbar-links-container-spacing, 60px);
				border-radius: var(--border-radius-topbar-nav, 48px);
				border: solid var(--white) var(--border-radius-topbar-nav, 48px);
				padding: 0;
				overflow-y: auto;
				scrollbar-width: thin;
				scrollbar-color: var(--brand-primary) transparent;

				&::-webkit-scrollbar {
					background-color: transparent;
					width: 10px;
				}

				&::-webkit-scrollbar-thumb {
					background: var(--brand-primary);
					border-radius: 5rem;
				}

				> a,
				> a:not(.pinned) {
					display: flex;
					font-size: 1.5rem;
					padding: 1.5rem 0;
				}
			}
		}

		// links container when in topbar only, not opened in dialog
		&:not(.topbar-nav-open) .topbar-link-container {
			position: static;
			background-color: transparent;
			width: 100%;
			display: flex;
			justify-content: flex-start;
			gap: 2rem;
			padding: 0 2rem 0 3rem;
			overflow: visible;

			> :is(a, button):not(.pinned) {
				display: none;
			}

			// :hover underline expand width effects in non-opened topbar links
			> a {
				&:hover {
					> span {
						&:before {
							display: block;
							width: 100%;
							transition: width 0.4s;
						}

						text-decoration: none;
					}
				}

				&.active {
					> span {
						&:before {
							width: 100%;
							background-color: var(--brand-primary);
						}

						text-decoration: none;
						color: @black;
					}
				}

				> span {
					position: relative;

					&:before {
						content: "";
						position: absolute;
						background-color: currentcolor;
						height: 2px;
						bottom: -4px;
						left: 0;
						right: 0;
						margin-left: auto;
						margin-right: auto;
						width: 0;
					}
				}
			}
		}
	}
}

@keyframes fade-in {
	0% {
		backdrop-filter: blur(0);
		background-color: transparent;
	}

	33% {
		background-color: color-mix(in srgb, @brand-primary, transparent 40%);
	}

	100% {
		backdrop-filter: blur(20px);
		background-color: color-mix(in srgb, @brand-primary, transparent 40%);
	}
}

@keyframes fade-out {
	0% {
		backdrop-filter: blur(20px);
		background-color: color-mix(in srgb, @brand-primary, transparent 40%);
		position: fixed;
		inset: 0;
		width: 100vw;
		height: 100vh;
	}

	1% {
		backdrop-filter: blur(20px);
	}

	33% {
		backdrop-filter: blur(20px);
		background-color: color-mix(in srgb, @brand-primary, transparent 40%);
	}

	99% {
		position: fixed;
		inset: 0;
		width: 100vw;
		height: 100vh;
		background: transparent;
	}

	100% {
		backdrop-filter: blur(0);
		background-color: transparent;
	}
}

@keyframes slide-in-from-right {
	from {
		transform: translateX(100%);
	}

	to {
		transform: translateX(0);
	}
}

@media (prefers-reduced-motion) {
	// TODO: once finish animations / transition -> go through each & disable any animation/transition here
	.topbar:not(.legacy)
		nav.topbar-nav:is(.topbar-nav-open, .topbar-nav-closing) {
		animation-duration: 0ms;

		& > .topbar-link-container {
			animation-duration: 0ms;
		}
	}
}

@media (forced-colors: active) {
	a {
		border-bottom: 1px solid;

		&:focus,
		&:hover,
		&.active {
			border-bottom: 4px solid;
		}
	}
}
