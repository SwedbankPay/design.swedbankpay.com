// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component: InputField ContentGuidelines renders 1`] = `
<section>
  <h2
    id="content-guidelines"
  >
    Content guidelines
  </h2>
  <div
    className="slab slab-plain h-100 mb-2"
  >
    <div
      className="d-flex flex-column align-items-center"
    >
      <div
        className="py-3"
      >
        <InputGroup
          defaultValue="Input text"
          helpBlock="Hint text"
          id="input-guidelines-example"
          label="Label"
          type="text"
        />
        <InputGroup
          expandingHintTitle="Expander hint text"
          label="Label"
          type="textarea"
        />
      </div>
    </div>
  </div>
  <h3>
    Label
  </h3>
  <p>
    An input field must have a label that clearly describes the type of input a field requires. 
  </p>
  <ul
    className="list list-bullet"
  >
    <li>
      When a text field is not required to be filled by the user, label it as “optional”.
    </li>
  </ul>
  <section
    key="[object Object]0"
  >
    <h3>
      Hint text
    </h3>
    <p>
      A hint text should complement the label and provide clarifying details. It can be used to:
    </p>
    <ul
      className="list list-bullet"
    >
      <li>
        Provide an example of what to enter
      </li>
      <li>
        Explain why you are asking a certain question
      </li>
      <li>
        Inform the user about where to find the requested information
      </li>
    </ul>
    <p>
      Primarily use the visible by default hint text and secondarily a hint expander. Try to avoid using both a visible hint text and expander.
    </p>
    <div
      className="row placeholder-guideline"
    >
      <div
        className="col-lg-6 col-sm-12"
        key="If the information is fairly important and many users will need it, provide a hint text that is visible by default."
      >
        <div
          className="slab slab-plain slab-border-success"
        >
          <span
            className="h3 d-block mb-3"
          >
            Do
          </span>
          <InputGroup
            helpBlock="YYYYMMDDNNNN"
            hintTextId="birthnumber-example"
            id="do-example-expanding"
            label="Personal identification number"
            type="text"
          />
        </div>
        <p
          className="mb-4"
        >
          If the information is fairly important and many users will need it, provide a hint text that is visible by default.
        </p>
      </div>
      <div
        className="col-lg-6 col-sm-12"
        key="Use a hint expander if the information is long and won’t be needed by the majority of users. Write the hint expander to help users understand what they will see before they click."
      >
        <div
          className="slab slab-plain slab-border-success"
        >
          <span
            className="h3 d-block mb-3"
          >
            Do
          </span>
          <InputGroup
            expandingHintContent="Three to four digits on the back or the front of your card."
            expandingHintId="where-to-find-example"
            expandingHintTitle="Where to find the code?"
            id="do-example-expanding"
            label="Security code (CVC)"
            type="text"
          />
        </div>
        <p
          className="mb-4"
        >
          Use a hint expander if the information is long and won’t be needed by the majority of users. Write the hint expander to help users understand what they will see before they click.
        </p>
      </div>
    </div>
  </section>
  <section
    key="[object Object]1"
  >
    <h3>
      Prefix and postfix
    </h3>
    <p>
      Prefixes and postfixes are useful when there’s a commonly understood icon, symbol or abbreviation for the type of information the user needs to enter since it can reduce mental load.
    </p>
    <div
      className="row placeholder-guideline"
    >
      <div
        className="col-lg-6 col-sm-12"
        key="Use a prefix icon to help convey the meaning of the label."
      >
        <div
          className="slab slab-plain slab-border-success"
        >
          <span
            className="h3 d-block mb-3"
          >
            Do
          </span>
          <InputGroup
            id="guidelines-input-example-1"
            label="Username"
            prefixType="icon"
            prefixValue="account_circle"
            type="text"
          />
        </div>
        <p
          className="mb-4"
        >
          Use a prefix icon to help convey the meaning of the label.
        </p>
      </div>
      <div
        className="col-lg-6 col-sm-12"
        key="Don’t use a prefix icon that doesn’t help to convey the meaning of the label. There shouldn’t be any confusion between what type of information an icon represents."
      >
        <div
          className="slab slab-plain slab-border-error"
        >
          <span
            className="h3 d-block mb-3"
          >
            Do
            n't
          </span>
          <InputGroup
            id="guidelines-input-example-2"
            label="Username"
            prefixType="icon"
            prefixValue="email"
            type="email"
          />
        </div>
        <p
          className="mb-4"
        >
          Don’t use a prefix icon that doesn’t help to convey the meaning of the label. There shouldn’t be any confusion between what type of information an icon represents.
        </p>
      </div>
      <div
        className="col-lg-6 col-sm-12"
        key="The label in itself should clearly indicate what type of data to enter, since prefixes and postfixes are hidden from screen readers."
      >
        <div
          className="slab slab-plain slab-border-success"
        >
          <span
            className="h3 d-block mb-3"
          >
            Do
          </span>
          <InputGroup
            id="guidelines-input-example-3"
            label="Fixed transaction fee, in SEK"
            postfix={true}
            postfixValue="kr"
            type="text"
          />
        </div>
        <p
          className="mb-4"
        >
          The label in itself should clearly indicate what type of data to enter, since prefixes and postfixes are hidden from screen readers.
        </p>
      </div>
      <div
        className="col-lg-6 col-sm-12"
        key="Use commonly understood abbreviations for text prefix or postfix, don’t use full words."
      >
        <div
          className="slab slab-plain slab-border-error"
        >
          <span
            className="h3 d-block mb-3"
          >
            Do
            n't
          </span>
          <InputGroup
            id="guidelines-input-example-4"
            label="Fixed transaction fee, in SEK"
            postfix={true}
            postfixValue="kronor"
            type="text"
          />
        </div>
        <p
          className="mb-4"
        >
          Use commonly understood abbreviations for text prefix or postfix, don’t use full words.
        </p>
      </div>
    </div>
  </section>
  <section
    key="[object Object]2"
  >
    <h3>
      Error message
    </h3>
    <p>
      When input isn’t accepted, input fields should display a short and concise error message, it should be no more than a single sentence.
    </p>
    <div
      className="row placeholder-guideline"
    >
      <div
        className="col-lg-6 col-sm-12"
        key="Do explain what went wrong and how to fix it."
      >
        <div
          className="slab slab-plain slab-border-success"
        >
          <span
            className="h3 d-block mb-3"
          >
            Do
          </span>
          <InputGroup
            defaultValue="Name.com"
            errorMessage="The email address must include \\"@\\""
            id="guidelines-input-example-7"
            label="Email address"
            type="text"
            validationState="error"
          />
        </div>
        <p
          className="mb-4"
        >
          Do explain what went wrong and how to fix it.
        </p>
      </div>
      <div
        className="col-lg-6 col-sm-12"
        key="Don't use technical jargon."
      >
        <div
          className="slab slab-plain slab-border-error"
        >
          <span
            className="h3 d-block mb-3"
          >
            Do
            n't
          </span>
          <InputGroup
            defaultValue="Name.com"
            errorMessage="Invalid input"
            id="guidelines-input-example-8"
            label="Email address"
            type="text"
            validationState="error"
          />
        </div>
        <p
          className="mb-4"
        >
          Don't use technical jargon.
        </p>
      </div>
    </div>
  </section>
</section>
`;

exports[`Component: InputField DeveloperDocumentation renders 1`] = `
<section
  id="developer-documentation-container"
>
  <h2
    id="developer-documentation mb-3"
  >
    Developer documentation
  </h2>
  <section>
    <h3
      className="mt-3"
    >
      Autocomplete
    </h3>
    <p>
      Add 
      <CodeTags
        code="autocomplete"
        type="primary"
      />
       attributes to input fields when it is possible to make a form easier for users to fill. 
    </p>
    <ComponentPreview
      codeFigure={true}
      language="html"
      showCasePanel={true}
    >
      <InputGroup
        autoComplete="name"
        id="developer-documentation-example"
        label="Name"
        type="text"
      />
    </ComponentPreview>
  </section>
  <section>
    <h3>
      Error message
    </h3>
    <p>
      To display the error state, add the 
      <CodeTags
        code=".has-error"
        type="secondary"
      />
       class to the parent element, then add the 
      <CodeTags
        code=".help-block"
        type="secondary"
      />
       element as the last child with the error message.
    </p>
    <ComponentPreview
      codeFigure={true}
      language="html"
      showCasePanel={true}
    >
      <InputGroup
        defaultValue="Input text"
        errorMessage="Descriptive helpful error message."
        id="developer-documentation-error-example"
        label="Input label"
        type="text"
      />
    </ComponentPreview>
  </section>
  <section>
    <h3>
      Disabled state
    </h3>
    <p>
      Disable a input field by adding the 
      <CodeTags
        code="disabled"
        type="primary"
      />
       attribute to the desired input field and the 
      <CodeTags
        code="form-group"
        type="primary"
      />
       where the input field resides.
    </p>
    <ComponentPreview
      codeFigure={true}
      language="html"
      showCasePanel={true}
    >
      <InputGroup
        disabled={true}
        label="Input label"
        type="text"
      />
    </ComponentPreview>
  </section>
  <section>
    <h3>
      Javascript methods
    </h3>
    <p>
      <CodeTags
        code="dg.validation.init()"
        type="secondary"
      />
       can be used on a form tag to initialize all fields contained in the form, or you can pass a single field to initialize just that one.
    </p>
    <p>
      <CodeTags
        code="dg.hintTextExpander.init()"
        type="secondary"
      />
       can be used to initialize all Hint text expanders. Or 
      <CodeTags
        code="dg.hintTextExpander.init(<hint-expander-id>)"
        type="secondary"
      />
       to initialize a specific one.
    </p>
  </section>
</section>
`;

exports[`Component: InputField Overview renders 1`] = `
<section
  id="input-field-overview"
>
  <h2
    id="input-field"
  >
    Overview
  </h2>
  <p>
    Depending on the expected length of the user input use either a Input field for shorter input or a Textarea for longer input. 
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
    showCasePanelAdvanced={
      Object {
        "elements": Array [
          Object {
            "component": <InputGroup
              hintExpander={true}
              id="input-showcase-example"
              label="Label"
              type="text"
            />,
            "description": <React.Fragment>
              <p>
                Use an input field when the expected user input is a single line of text. The default input type is text but it can also be specified as for example Email which will make it automatically validated when submitted or Password which will mask the characters submitted.
              </p>
              <p>
                Input fields can have prefixes or suffixes which can help the user more quickly understand what kind of information that is requested. These can be icons as well as text symbols or currency abbreviations like %, € or kr.
              </p>
            </React.Fragment>,
            "options": Object {
              "checkbox": Array [
                Object {
                  "inputs": Array [
                    Object {
                      "id": "optional",
                      "name": "Is optional",
                      "value": Object {
                        "optional": true,
                      },
                    },
                    Object {
                      "id": "hint_text",
                      "name": "Hint text",
                      "value": Object {
                        "helpBlock": "Hint text",
                        "hintTextId": "hint-text-example-id",
                      },
                    },
                    Object {
                      "id": "hint_expander",
                      "name": "Hint expander",
                      "value": Object {
                        "expanderId": "expander-showcase",
                        "expandingHintTitle": "Expanding hint text",
                      },
                    },
                  ],
                  "title": "Label add on",
                },
              ],
              "radio": Array [
                Object {
                  "id": "fix_radio",
                  "title": "Prefix/Postfix",
                  "values": Array [
                    Object {
                      "name": "None",
                      "value": Object {
                        "type": "text",
                      },
                    },
                    Object {
                      "name": "Prefix - Icon",
                      "value": Object {
                        "addOnType": "icon",
                        "prefixValue": "email",
                        "type": "email",
                      },
                    },
                    Object {
                      "name": "Postfix - Text",
                      "value": Object {
                        "addOnType": "text",
                        "postfix": true,
                        "postfixValue": "kr",
                      },
                    },
                  ],
                },
                Object {
                  "id": "state_radio",
                  "title": "State modifiers",
                  "values": Array [
                    Object {
                      "name": "Default",
                      "value": Object {
                        "disabled": false,
                      },
                    },
                    Object {
                      "name": "Error",
                      "value": Object {
                        "errorMessage": "Descriptive helpful error message.",
                      },
                    },
                    Object {
                      "name": "Disabled",
                      "value": Object {
                        "disabled": true,
                      },
                    },
                  ],
                },
              ],
            },
            "tab": "Input field",
            "title": "Input field",
          },
          Object {
            "component": <InputGroup
              hintExpander={true}
              label="Label"
              type="textarea"
            />,
            "description": "Use a Text area when the expected user input is more than one sentence.",
            "options": Object {
              "checkbox": Array [
                Object {
                  "inputs": Array [
                    Object {
                      "id": "optional_textarea",
                      "name": "Is optional",
                      "value": Object {
                        "optional": true,
                      },
                    },
                    Object {
                      "id": "hint_text_textarea",
                      "name": "Hint text",
                      "value": Object {
                        "helpBlock": "Hint text",
                        "hintTextId": "hint-text-text-area-example",
                      },
                    },
                    Object {
                      "id": "hint_expander_textarea",
                      "name": "Hint expander",
                      "value": Object {
                        "expanderId": "expander-showcase",
                        "expandingHintTitle": "Expanding hint text",
                      },
                    },
                  ],
                  "title": "Label add on",
                },
              ],
              "radio": Array [
                Object {
                  "id": "state_radio_textarea",
                  "title": "State modifiers",
                  "values": Array [
                    Object {
                      "name": "Default",
                      "value": Object {
                        "disabled": false,
                      },
                    },
                    Object {
                      "name": "Error",
                      "value": Object {
                        "errorMessage": "Descriptive helpful error message.",
                      },
                    },
                    Object {
                      "name": "Disabled",
                      "value": Object {
                        "disabled": true,
                      },
                    },
                  ],
                },
              ],
            },
            "tab": "Text area",
            "title": "Text area",
          },
        ],
        "id": "no-tabs",
        "tabsId": "overviewInputFieldTabs",
      }
    }
  />
  <h3>
    When to consider something else
  </h3>
  <ul
    className="list list-bullet"
  >
    <li>
      If you want users to choose from a list of responses, instead consider 
      <Link
        to="/components/radio-button"
      >
        radio buttons
      </Link>
      , 
      <Link
        to="/components/checkbox"
      >
        checkboxes
      </Link>
       or a 
      <Link
        to="/components/select"
      >
        select
      </Link>
      .
    </li>
  </ul>
</section>
`;

exports[`Component: InputField renders 1`] = `
<DocContainer>
  <section
    id="input-field-doc"
  >
    <p
      className="lead"
    >
      Input fields typically reside in forms and enable the user to interact with and input words, characters or numbers.
    </p>
    <Overview />
    <ContentGuidelines />
    <DeveloperDocumentation />
  </section>
</DocContainer>
`;
