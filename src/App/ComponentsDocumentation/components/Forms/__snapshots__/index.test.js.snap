// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Documentation: Forms Checkboxes renders 1`] = `
<Fragment>
  <h2
    id="checkboxes"
  >
    Checkboxes
  </h2>
  <p>
    Use checkboxes to make it so a user can select several options. If you need to restrict the number of possible selections to one, see radio buttons.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <Checkbox
      id="checkbox-example-1"
      label="Bread"
    />
    <Checkbox
      id="checkbox-example-2"
      label="Not bread. I'm not really fond of it. What I would really like, however, is one single piece of cracker with some nutella on it. Perhaps this could be the second checkbox. These thoughts are written here simply to show you how the checkboxes align themselves when label text is fairly long."
    />
    <Checkbox
      checked={true}
      id="checkbox-example-3"
      label="Milk"
    />
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Forms DisabledFormComponents renders 1`] = `
<Fragment>
  <h2
    id="disabled-form-components"
  >
    Disabled form components
  </h2>
  <p>
    Disable whichever form component you want by adding 
    <CodeTags
      code="disabled"
      type="secondary"
    />
     to the desired input element
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <Togglebox
      disabled={true}
      id="togglebox-disabled-example-1"
      label="Enable overdrive"
    />
    <Radio
      disabled={true}
      id="radio-disabled-example-1"
      label="Hamburgers"
      name="radio-disabled-example"
    />
    <Checkbox
      checked={true}
      disabled={true}
      id="checkbox-disabled-example-3"
      label="Milk"
    />
    <Rangeslider
      className="mb-2"
      disabled={true}
      max={200}
      min={0}
      step={1}
      value={100}
      valueLabel={true}
      valueLabelPostfix="%"
      valueLabelPrefix="$"
    />
  </ComponentPreview>
  <h3>
    Disable a fieldset
  </h3>
  <p>
    Disable entire fieldsets by adding 
    <CodeTags
      code="disabled"
      type="secondary"
    />
     to the fieldset element
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <form>
      <fieldset
        disabled={true}
      >
        <legend>
          Log in
        </legend>
        <InputGroup
          autoComplete="username"
          id="fieldset-disabled-username"
          label="Username"
          placeholder="Enter your username"
          type="text"
        />
        <InputGroup
          autoComplete="current-password"
          id="fieldset-disabled-password"
          label="Password"
          placeholder="Enter your password"
          type="password"
        />
        <Checkbox
          id="fieldset-disabled-checkbox"
          label="Remember me"
        />
      </fieldset>
      

      <Button
        btnType="submit"
        disabled={true}
        label="Log in"
        type="executive"
      />
      

    </form>
  </ComponentPreview>
  <h3>
    Disable a 
    <CodeTags
      code=".form-group"
      type="secondary"
    />
  </h3>
  <p>
    Add disable styling to a 
    <CodeTags
      code=".form-group"
      type="secondary"
    />
     by adding class 
    <CodeTags
      code=".disabled"
      type="secondary"
    />
     to it. Note that the disabled form component should still have 
    <CodeTags
      code="disabled"
      type="secondary"
    />
    .
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <form>
      <fieldset>
        <legend>
          Log in
        </legend>
        <InputGroup
          autoComplete="username"
          id="form-group-disabled-username"
          label="Username"
          placeholder="Enter your username"
          type="text"
        />
        <InputGroup
          autoComplete="current-password"
          disabled={true}
          id="form-group-disabled-password"
          label="Password"
          placeholder="Enter your password"
          type="password"
        />
        <Checkbox
          id="form-group-disabled-checkbox"
          label="Remember me"
        />
      </fieldset>
      

      <Button
        btnType="submit"
        disabled={true}
        label="Log in"
        type="executive"
      />
      

    </form>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Forms FormGrid form prevents default 1`] = `
<Fragment>
  <h2
    id="form-grid"
  >
    Form grid
  </h2>
  <p>
    You can use the grid system to customize how forms are displayed. Just wrap your form elements in a row container to have two or more input elements next to eachother horizontally. Remember to add 
    <CodeTags
      code=".col-{your_size}"
      type="secondary"
    />
     to the forms.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <form
      onSubmit={[Function]}
    >
      <div
        className="row"
      >
        <div
          className="col-5"
        >
          <InputGroup
            autoComplete="given-name"
            helpBlock="Hope it is something cool"
            id="grid-first-name"
            label="First name"
            placeholder="Enter your first name"
            type="text"
          />
        </div>
        <div
          className="col-5"
        >
          <InputGroup
            autoComplete="family-name"
            helpBlock="Most likely in your passport"
            id="grid-last-name"
            label="Last name"
            placeholder="Enter your last name"
            type="text"
          />
        </div>
        <div
          className="col-2"
        >
          <div
            className="form-group"
          >
            

            <br />
            

            <button
              className="btn btn-executive"
              type="submit"
            >
              Search
            </button>
            

          </div>
        </div>
      </div>
    </form>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Forms FormGrid renders 1`] = `
<Fragment>
  <h2
    id="form-grid"
  >
    Form grid
  </h2>
  <p>
    You can use the grid system to customize how forms are displayed. Just wrap your form elements in a row container to have two or more input elements next to eachother horizontally. Remember to add 
    <CodeTags
      code=".col-{your_size}"
      type="secondary"
    />
     to the forms.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <form
      onSubmit={[Function]}
    >
      <div
        className="row"
      >
        <div
          className="col-5"
        >
          <InputGroup
            autoComplete="given-name"
            helpBlock="Hope it is something cool"
            id="grid-first-name"
            label="First name"
            placeholder="Enter your first name"
            type="text"
          />
        </div>
        <div
          className="col-5"
        >
          <InputGroup
            autoComplete="family-name"
            helpBlock="Most likely in your passport"
            id="grid-last-name"
            label="Last name"
            placeholder="Enter your last name"
            type="text"
          />
        </div>
        <div
          className="col-2"
        >
          <div
            className="form-group"
          >
            

            <br />
            

            <button
              className="btn btn-executive"
              type="submit"
            >
              Search
            </button>
            

          </div>
        </div>
      </div>
    </form>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Forms JavascriptMethods renders 1`] = `
<Fragment>
  <h2
    id="javascript-methods"
  >
    JavaScript methods
  </h2>
  <JavascriptDocs
    componentName="validation"
  />
  <p>
    The 
    <CodeTags
      code="dg.validation.init()"
      type="secondary"
    />
     can be used on a form tag to initialize all fields contained in the form, or you can pass a single field to initialize just that one.
  </p>
</Fragment>
`;

exports[`Documentation: Forms Overview form prevents default 1`] = `
<Fragment>
  <h2
    id="overview"
  >
    Overview
  </h2>
  <p>
    Use 
    <CodeTags
      code="<input>"
      type="primary"
    />
     in combination with 
    <CodeTags
      code="<form-group>"
      type="primary"
    />
    s and/or 
    <CodeTags
      code="<form>"
      type="primary"
    />
    s to show a collection of related inputs. 
    <CodeTags
      code="<form-group>"
      type="primary"
    />
    s can contain more than just an input, like a 
    <CodeTags
      code="<label>"
      type="primary"
    />
     or
    <CodeTags
      code="<help-block>"
      type="primary"
    />
    s.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <form
      onSubmit={[Function]}
    >
      <InputGroup
        autoComplete="given-name"
        helpBlock="The first word of your full name"
        id="first-name"
        label="First name"
        placeholder="Enter your first name"
        type="text"
      />
      <InputGroup
        autoComplete="family-name"
        helpBlock="The very last collection of letters in your name"
        id="last-name"
        label="Last name"
        placeholder="Enter your last name"
        type="text"
      />
      <InputGroup
        autoComplete="email"
        helpBlock="The last part is probably @swedbankpay.com"
        id="email-address"
        label="Email"
        placeholder="Enter your email"
        type="text"
      />
      <div
        className="form-group"
      >
        <Checkbox
          id="subscribe-checkbox"
          label="Subscribe to our Shovels and Tapestry catalogue"
        />
      </div>
      

      <Button
        btnType="submit"
        label="Submit"
        type="executive"
      />
      

    </form>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Forms Overview renders 1`] = `
<Fragment>
  <h2
    id="overview"
  >
    Overview
  </h2>
  <p>
    Use 
    <CodeTags
      code="<input>"
      type="primary"
    />
     in combination with 
    <CodeTags
      code="<form-group>"
      type="primary"
    />
    s and/or 
    <CodeTags
      code="<form>"
      type="primary"
    />
    s to show a collection of related inputs. 
    <CodeTags
      code="<form-group>"
      type="primary"
    />
    s can contain more than just an input, like a 
    <CodeTags
      code="<label>"
      type="primary"
    />
     or
    <CodeTags
      code="<help-block>"
      type="primary"
    />
    s.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <form
      onSubmit={[Function]}
    >
      <InputGroup
        autoComplete="given-name"
        helpBlock="The first word of your full name"
        id="first-name"
        label="First name"
        placeholder="Enter your first name"
        type="text"
      />
      <InputGroup
        autoComplete="family-name"
        helpBlock="The very last collection of letters in your name"
        id="last-name"
        label="Last name"
        placeholder="Enter your last name"
        type="text"
      />
      <InputGroup
        autoComplete="email"
        helpBlock="The last part is probably @swedbankpay.com"
        id="email-address"
        label="Email"
        placeholder="Enter your email"
        type="text"
      />
      <div
        className="form-group"
      >
        <Checkbox
          id="subscribe-checkbox"
          label="Subscribe to our Shovels and Tapestry catalogue"
        />
      </div>
      

      <Button
        btnType="submit"
        label="Submit"
        type="executive"
      />
      

    </form>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Forms RadioButtons renders 1`] = `
<Fragment>
  <h2
    id="radio-buttons"
  >
    Radio buttons
  </h2>
  <p>
    Use radio buttons when you wish to limit your user to one choice out of several possible.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <Radio
      id="radio-example-1"
      label="Hamburgers"
      name="radio-example"
    />
    <Radio
      id="radio-example-2"
      label="Not the one above because I'm not really fond of hamburgers. What I would really like, however, is a nice piece of steak. Perhaps that could be the second option. These thoughts are written here simply to show you how radio buttons align themselves when label text is fairly long."
      name="radio-example"
    />
    <Radio
      checked={true}
      id="radio-example-3"
      label="Pizza"
      name="radio-example"
    />
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Forms RangeSlider renders 1`] = `
<Fragment>
  <h2
    id="rangeslider"
  >
    Rangeslider
  </h2>
  <p>
    Asides from the default behavior of a range input, the Rangeslider
    '
    s colors and label positioning can be customized.
  </p>
  <p>
    Currently there are three different supported colors for the slider: 
    <CodeTags
      code=".rangeslider-brand"
      type="secondary"
    />
    , 
    <CodeTags
      code=".rangeslider-default"
      type="secondary"
    />
     and 
    <CodeTags
      code=".rangeslider-neutral"
      type="secondary"
    />
    .
  </p>
  <p>
    The Rangeslider currently supports two positions: 
    <CodeTags
      code=".label-right"
      type="secondary"
    />
     and 
    <CodeTags
      code=".label-top"
      type="secondary"
    />
    . If no position is given, 
    <CodeTags
      code="right"
      type="secondary"
    />
     is defaulted.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <Rangeslider
      max={200}
      min={0}
      step={1}
      value={100}
      valueLabel={true}
      valueLabelPostfix="%"
      valueLabelPrefix="$"
    />
  </ComponentPreview>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <Rangeslider
      color="neutral"
      max={200}
      min={0}
      step={1}
      value={100}
      valueLabel={true}
      valueLabelPosition="top"
      valueLabelPostfix="%"
      valueLabelPrefix="$"
    />
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Forms StaticText renders 1`] = `
<Fragment>
  <h2
    id="static-text"
  >
    Static text
  </h2>
  <p>
    To just display static text in forms use a 
    <CodeTags
      code="<span>"
      type="primary"
    />
     inside a form
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <FormControlText
      label="Company"
      text="Swedbank Pay"
    />
    <FormControlText
      label="Employee"
      text="Bob Corlsan"
    />
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Forms Toggleboxes renders 1`] = `
<Fragment>
  <h2
    id="toggleboxes"
  >
    Toggleboxes
  </h2>
  <p>
    Use toggleboxes if you wish present the user with an either-or option.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <Togglebox
      id="togglebox-example-1"
      label="Enable overdrive"
    />
    <Togglebox
      checked={true}
      id="togglebox-example-2"
      label="Enable superpowers"
    />
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Forms UsageWithFieldsets form prevents default 1`] = `
<Fragment>
  <h2
    id="usage-with-fieldsets"
  >
    Usage with fieldsets
  </h2>
  <p>
    Use fieldsets to give your forms more structure.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <form
      onSubmit={[Function]}
    >
      <fieldset>
        <legend>
          Log in
        </legend>
        <InputGroup
          autoComplete="username"
          id="fieldset-username"
          label="Username"
          placeholder="Enter your username"
          type="text"
        />
        <InputGroup
          autoComplete="current-password"
          id="fieldset-password"
          label="Password"
          placeholder="Enter your password"
          type="password"
        />
        <Checkbox
          id="fieldset-checkbox"
          label="Remember me"
        />
      </fieldset>
      

      <Button
        btnType="submit"
        label="Log in"
        type="executive"
      />
      

    </form>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Forms UsageWithFieldsets renders 1`] = `
<Fragment>
  <h2
    id="usage-with-fieldsets"
  >
    Usage with fieldsets
  </h2>
  <p>
    Use fieldsets to give your forms more structure.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <form
      onSubmit={[Function]}
    >
      <fieldset>
        <legend>
          Log in
        </legend>
        <InputGroup
          autoComplete="username"
          id="fieldset-username"
          label="Username"
          placeholder="Enter your username"
          type="text"
        />
        <InputGroup
          autoComplete="current-password"
          id="fieldset-password"
          label="Password"
          placeholder="Enter your password"
          type="password"
        />
        <Checkbox
          id="fieldset-checkbox"
          label="Remember me"
        />
      </fieldset>
      

      <Button
        btnType="submit"
        label="Log in"
        type="executive"
      />
      

    </form>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Forms Validation renders 1`] = `
<Fragment>
  <h2
    id="validation"
  >
    Validation overview
  </h2>
  <p>
    To use our validation, start by adding the attribute 
    <CodeTags
      code="novalidate"
      type="secondary"
    />
     to your 
    <CodeTags
      code="<form>"
      type="primary"
    />
     element. If you wish to validate your entire form, add the 
    <CodeTags
      code="validate"
      type="secondary"
    />
     attribute to the 
    <CodeTags
      code="<form>"
      type="primary"
    />
     tag, if not add it to the desired 
    <CodeTags
      code="<input>"
      type="primary"
    />
     tags.
  </p>
  <p>
    Validates against 
    <CodeTags
      code="required"
      type="secondary"
    />
     and 
    <CodeTags
      code="pattern"
      type="secondary"
    />
    . Using 
    <CodeTags
      code="pattern"
      type="secondary"
    />
     overrides default patterns.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <form
      data-validate=""
      noValidate={true}
    >
      <InputGroup
        helpBlock="This one should be easy"
        id="validation-name-1"
        label="Name"
        placeholder="Enter your name"
        type="text"
      />
      <InputGroup
        helpBlock="This one should be pretty easy too"
        id="validation-email-1"
        label="Email"
        placeholder="Enter your email"
        type="email"
      />
      

      <button
        className="btn btn-executive"
        type="submit"
      >
        Submit
      </button>
    </form>
  </ComponentPreview>
  <h3>
    Feedback
  </h3>
  <p>
    To give users validation feedback on each input insert the message in the attributes 
    <CodeTags
      code="success"
      type="secondary"
    />
     and 
    <CodeTags
      code="error"
      type="secondary"
    />
     in the 
    <CodeTags
      code=".help-block"
      type="secondary"
    />
     element. To display an asterisk you have to include a label with your input element.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <form
      action="#"
      data-validate=""
      noValidate={true}
    >
      <InputGroup
        errorMessage="Wrong!"
        helpBlock={true}
        id="validation-email-2"
        label="Email"
        placeholder="bob.corlsan@example.com"
        prefixType="icon"
        prefixValue="email"
        required={true}
        successMessage="Right!"
        type="email"
      />
      

      <button
        className="btn btn-executive"
        type="submit"
      >
        Submit
      </button>
    </form>
  </ComponentPreview>
  <h3>
    Dynamically disabled submit button
  </h3>
  <p>
    You can also dynamically disable the submit button by adding 
    <CodeTags
      code="disable-invalid"
      type="secondary"
    />
     to the 
    <CodeTags
      code="<button type=\\"submit\\">"
      type="primary"
    />
     element.
  </p>
  <p>
    <b>
      NOTE:
    </b>
     For this to work you also need the 
    <CodeTags
      code="validate"
      type="secondary"
    />
     attribute to be present in the 
    <CodeTags
      code="<form>"
      type="primary"
    />
     tag.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <form
      action="#"
      data-validate=""
      noValidate={true}
    >
      <InputGroup
        errorMessage="Wrong!"
        helpBlock="Keep your eye on that submit button"
        id="validation-email-3"
        label="Email"
        placeholder="bob.corlsan@example.com"
        prefixType="icon"
        prefixValue="email"
        required={true}
        successMessage="Right!"
        type="email"
      />
      

      <button
        className="btn btn-executive"
        data-disable-invalid=""
        type="submit"
      >
        Submit
      </button>
    </form>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Forms renders 1`] = `
<DocContainer
  docToc={true}
>
  <p
    className="lead"
  >
    Form componenets allow you to gather user input in various different ways.
  </p>
  <Overview />
  <FormGrid />
  <Validation />
  <UsageWithFieldsets />
  <StaticText />
  <Checkboxes />
  <RadioButtons />
  <Toggleboxes />
  <RangeSlider />
  <DisabledFormComponents />
  <JavascriptMethods />
</DocContainer>
`;
