// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Components: Sidebar ExtendedSidebar renders 1`] = `
<Fragment>
  <h2
    id="extended-sidebar"
  >
    Extended sidebar
  </h2>
  <p>
    This sidebar is an extended sidebar which supports a depth of up to 4 levels. To use the extended sidebar, add class 
    <Tag
      code={true}
      text=".extended-sidebar"
      type="secondary"
    />
     to the second 
    <Tag
      code={true}
      text="<ul>"
      type="primary"
    />
     along with the 
    <Tag
      code={true}
      text=".secondary-nav-ul"
      type="secondary"
    />
     class.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <div
      className="container-fluid"
    >
      <div
        className="row"
      >
        <Sidebar
          extendedSidebar={true}
          id="dg-sidebar2"
          sidebarNavList={
            Array [
              Object {
                "icon": <i
                  className="material-icons-outlined"
                >
                  home
                </i>,
                "title": "Home Page",
              },
              Object {
                "children": Array [
                  Object {
                    "icon": <i
                      className="material-icons-outlined rotated"
                    >
                      accessibility
                    </i>,
                    "title": "Accessibility",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "Primary colors",
                      },
                      Object {
                        "title": "Secondary colors",
                      },
                      Object {
                        "children": Array [
                          Object {
                            "title": "Children 1",
                          },
                          Object {
                            "title": "Children 2",
                          },
                          Object {
                            "title": "Children 3",
                          },
                        ],
                        "title": "Tertiary colors",
                      },
                    ],
                    "icon": <i
                      className="material-icons-outlined rotated"
                    >
                      palette
                    </i>,
                    "title": "Colors",
                  },
                  Object {
                    "icon": <i
                      className="material-icons-outlined rotated"
                    >
                      grid_on
                    </i>,
                    "title": "Grid",
                  },
                  Object {
                    "icon": <i
                      className="material-icons-outlined rotated"
                    >
                      space_bar
                    </i>,
                    "title": "Spacing",
                  },
                ],
                "icon": <i
                  className="material-icons-outlined rotated"
                >
                  wb_incandescent
                </i>,
                "title": "Get Started",
              },
              Object {
                "children": Array [
                  Object {
                    "title": "Introduction",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "Event 1",
                      },
                      Object {
                        "title": "Event 2",
                      },
                      Object {
                        "title": "Event 3",
                      },
                    ],
                    "lastParent": true,
                    "title": "Events",
                  },
                  Object {
                    "title": "Conclusion",
                  },
                ],
                "icon": <i
                  className="material-icons-outlined"
                >
                  palette
                </i>,
                "lastParent": false,
                "title": "Identity",
              },
            ]
          }
        />
        <main
          className="col main-content"
        >
          Main content things...
        </main>
      </div>
    </div>
  </ComponentPreview>
</Fragment>
`;

exports[`Components: Sidebar InitScrollListener renders 1`] = `
<Fragment>
  <JavascriptDocElement
    code={
      <Tag
        code={true}
        text="dg.sidebar.initScrollListener(<sidebar-id>, content-id, header-type)"
        type="secondary"
      />
    }
    description={
      <React.Fragment>
        Note: This method is optional
        <br />
        <br />
        Makes the 
         with id 
        <Tag
          code={true}
          text="<sidebar-id>"
          type="secondary"
        />
         listen to scroll events on the element with id 
        <Tag
          code={true}
          text="content-id"
          type="secondary"
        />
        , and matches a leaf with the corresponding header of 
        <Tag
          code={true}
          text="header-type"
          type="secondary"
        />
         to visualize active leaf depending on scroll position of element with id 
        <Tag
          code={true}
          text="content-id"
          type="secondary"
        />
        .
      </React.Fragment>
    }
  />
</Fragment>
`;

exports[`Components: Sidebar JavascriptMethods renders 1`] = `
<Fragment>
  <h2
    id="javascript-methods"
  >
    JavaScript methods
  </h2>
  <p
    className="pl-3 mb-0"
  >
    Note: The sidebar should be initialized with ID
  </p>
  <JavascriptDocs
    componentName="sidebar"
    others={
      Array [
        [Function],
        [Function],
        [Function],
        [Function],
      ]
    }
  />
</Fragment>
`;

exports[`Components: Sidebar Overview renders 1`] = `
<Fragment>
  <h2
    id="overview"
  >
    Overview
  </h2>
  <p>
    The sidebar supports a depth of up to 3 levels. Note that if used with a sticky topbar, add class 
    <Tag
      code={true}
      text=".sidebar-topbar-sticky"
      type="secondary"
    />
    , 
    <Tag
      code={true}
      text=".topbar-min-{breakpoint}-sticky"
      type="secondary"
    />
    , or 
    <Tag
      code={true}
      text=".topbar-max-{breakpoint}-sticky"
      type="secondary"
    />
     depending on the class of the sticky topbar, to the outmost 
    <Tag
      code={true}
      text="<div>"
      type="primary"
    />
     of the sidebar.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <div
      className="container-fluid"
    >
      <div
        className="row"
      >
        <Sidebar
          id="dg-sidebar1"
          sidebarNavList={
            Array [
              Object {
                "icon": <i
                  className="material-icons-outlined"
                >
                  home
                </i>,
                "title": "Home Page",
              },
              Object {
                "children": Array [
                  Object {
                    "icon": <i
                      className="material-icons-outlined rotated"
                    >
                      accessibility
                    </i>,
                    "title": "Accessibility",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "Primary colors",
                      },
                      Object {
                        "title": "Secondary colors",
                      },
                      Object {
                        "title": "Tertiary colors",
                      },
                    ],
                    "icon": <i
                      className="material-icons-outlined rotated"
                    >
                      palette
                    </i>,
                    "title": "Colors",
                  },
                  Object {
                    "icon": <i
                      className="material-icons-outlined rotated"
                    >
                      grid_on
                    </i>,
                    "title": "Grid",
                  },
                  Object {
                    "icon": <i
                      className="material-icons-outlined rotated"
                    >
                      space_bar
                    </i>,
                    "title": "Spacing",
                  },
                ],
                "icon": <i
                  className="material-icons-outlined rotated"
                >
                  wb_incandescent
                </i>,
                "title": "Get Started",
              },
              Object {
                "children": Array [
                  Object {
                    "title": "Introduction",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "Event 1",
                      },
                      Object {
                        "title": "Event 2",
                      },
                      Object {
                        "title": "Event 3",
                      },
                    ],
                    "lastParent": true,
                    "title": "Events",
                  },
                  Object {
                    "title": "Conclusion",
                  },
                ],
                "icon": <i
                  className="material-icons-outlined"
                >
                  palette
                </i>,
                "lastParent": false,
                "title": "Identity",
              },
            ]
          }
        />
        <main
          className="col main-content"
        >
          Main content things...
        </main>
      </div>
    </div>
  </ComponentPreview>
</Fragment>
`;

exports[`Components: Sidebar RemoveActiveState renders 1`] = `
<Fragment>
  <JavascriptDocElement
    code={
      <Tag
        code={true}
        text="dg.sidebar.removeActiveState(<sidebar-id>, group-index, subgroup-index, leaf-index)"
        type="secondary"
      />
    }
    description={
      <React.Fragment>
        Note: This method is optional
        <br />
        <br />
        Remove group, subgroup and leaf of the 
         active state depending on the parameters passed. The paramater 
        <Tag
          code={true}
          text="group-index"
          type="secondary"
        />
         is the index of the group to have the active state removed, the paramater 
        <Tag
          code={true}
          text="subgroup-index"
          type="secondary"
        />
         is the index of the subgroup beneath the group selected by 
        <Tag
          code={true}
          text="group-index"
          type="secondary"
        />
        , and the paramater 
        <Tag
          code={true}
          text="leaf-index"
          type="secondary"
        />
         is the index of the leaf beneath both 
        <Tag
          code={true}
          text="group-index"
          type="secondary"
        />
         and 
        <Tag
          code={true}
          text="subgroup-index"
          type="secondary"
        />
        . If the group only has two levels, only 
        <Tag
          code={true}
          text="group-index"
          type="secondary"
        />
         and 
        <Tag
          code={true}
          text="leaf.index"
          type="secondary"
        />
         is needed. Since group always is present, 
        <Tag
          code={true}
          text="group-index"
          type="secondary"
        />
         should always be provided. Pass 
        <Tag
          code={true}
          text="null"
          type="secondary"
        />
         as a paramater in cases where the parameter needs to be empty, such as when 
        <Tag
          code={true}
          text="subgroup-index"
          type="secondary"
        />
         is the only one needed, use 
        <Tag
          code={true}
          text="removeActiveState(<sidebar-id>, group-index, null, null)"
          type="secondary"
        />
        . The paramater 
        <Tag
          code={true}
          text="<sidebar-id>"
          type="secondary"
        />
         must always be a valid id.
      </React.Fragment>
    }
  />
</Fragment>
`;

exports[`Components: Sidebar RemoveScrollListener renders 1`] = `
<Fragment>
  <JavascriptDocElement
    code={
      <Tag
        code={true}
        text="dg.sidebar.removeScrollListener(<sidebar-id>, content-id)"
        type="secondary"
      />
    }
    description={
      <React.Fragment>
        Note: This method is optional
        <br />
        <br />
        Removes scroll listener on the element with id 
        <Tag
          code={true}
          text="content-id"
          type="secondary"
        />
        .
      </React.Fragment>
    }
  />
</Fragment>
`;

exports[`Components: Sidebar SetActiveState renders 1`] = `
<Fragment>
  <JavascriptDocElement
    code={
      <Tag
        code={true}
        text="dg.sidebar.setActiveState(<sidebar-id>, group-index, subgroup-index, leaf-index)"
        type="secondary"
      />
    }
    description={
      <React.Fragment>
        Note: This method is optional
        <br />
        <br />
        Sets group, subgroup and leaf of the 
         to active depending on the parameters passed. The parameter 
        <Tag
          code={true}
          text="group-index"
          type="secondary"
        />
         is the index of the group to be set active, the parameter 
        <Tag
          code={true}
          text="subgroup-index"
          type="secondary"
        />
         is the index of the subgroup beneath the group selected by 
        <Tag
          code={true}
          text="group-index"
          type="secondary"
        />
        , and the parameter 
        <Tag
          code={true}
          text="leaf-index"
          type="secondary"
        />
         is the index of the leaf beneath both 
        <Tag
          code={true}
          text="group-index"
          type="secondary"
        />
         and 
        <Tag
          code={true}
          text="subgroup-index"
          type="secondary"
        />
        . If the group only has two levels, only 
        <Tag
          code={true}
          text="group-index"
          type="secondary"
        />
         and 
        <Tag
          code={true}
          text="leaf-index"
          type="secondary"
        />
         is needed. Since group always is present, 
        <Tag
          code={true}
          text="group-index"
          type="secondary"
        />
         should always be provided. Pass 
        <Tag
          code={true}
          text="null"
          type="secondary"
        />
         as a parameter in cases where the parameter needs to be empty, such as when 
        <Tag
          code={true}
          text="subgroup-index"
          type="secondary"
        />
         is the only one needed, use 
        <Tag
          code={true}
          text="setActiveState(<sidebar-id>, group-index, null, null)"
          type="secondary"
        />
        . The parameter 
        <Tag
          code={true}
          text="<sidebar-id>"
          type="secondary"
        />
         must always be a valid id.
      </React.Fragment>
    }
  />
</Fragment>
`;

exports[`Components: Sidebar renders 1`] = `
<DocContainer
  docToc={true}
>
  <p
    className="lead"
  >
    The sidebar is used to give users an easily available navigational bar on the left side of your web application.
  </p>
  <Overview />
  <ExtendedSidebar />
  <JavascriptMethods />
  <NpmInformation
    componentName="sidebar"
  />
</DocContainer>
`;
