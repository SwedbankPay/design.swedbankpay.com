// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Components: Sidebar InitScrollListener renders 1`] = `
<Fragment>
  <JavascriptDocElement
    code={
      <CodeTags
        code="dg.sidebar.initScrollListener(<sidebar-id>, content-id, header-type)"
        type="secondary"
      />
    }
    description={
      <React.Fragment>
        <p>
          Note: This method is optional
        </p>
        Makes the 
         with id 
        <CodeTags
          code="<sidebar-id>"
          type="secondary"
        />
         listen to scroll events on the element with id 
        <CodeTags
          code="content-id"
          type="secondary"
        />
        , and matches a leaf with the corresponding header of 
        <CodeTags
          code="header-type"
          type="secondary"
        />
         to visualize active leaf depending on scroll position of element with id 
        <CodeTags
          code="content-id"
          type="secondary"
        />
        .
      </React.Fragment>
    }
  />
</Fragment>
`;

exports[`Components: Sidebar JavascriptMethods renders 1`] = `
<Fragment>
  <h2
    id="javascript-methods"
  >
    JavaScript methods
  </h2>
  <JavascriptDocs
    componentName="sidebar"
    others={
      Array [
        [Function],
        [Function],
        [Function],
        [Function],
      ]
    }
  />
</Fragment>
`;

exports[`Components: Sidebar Overview renders 1`] = `
<Fragment>
  <h2
    id="overview"
  >
    Overview
  </h2>
  <p>
    The sidebar supports a depth of up to 3 levels. Note that if used with a sticky topbar, add class 
    <CodeTags
      code=".sidebar-topbar-sticky"
      type="secondary"
    />
    , 
    <CodeTags
      code=".topbar-min-{breakpoint}-sticky"
      type="secondary"
    />
    , or 
    <CodeTags
      code=".topbar-max-{breakpoint}-sticky"
      type="secondary"
    />
     depending on the class of the sticky topbar, to the outmost 
    <CodeTags
      code="<div>"
      type="primary"
    />
     of the sidebar.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <div
      className="container-fluid"
    >
      <div
        className="row"
      >
        <Topbar
          id="demo-topbar"
          logout={true}
          wide="xl"
        />
      </div>
      <div
        className="row"
      >
        <div
          className="col-auto"
        >
          <Sidebar
            id="dg-sidebar"
            sidebarNavList={
              Array [
                Object {
                  "lastParent": true,
                  "subList": Array [
                    Object {
                      "title": "Introduction 1",
                    },
                    Object {
                      "title": "Introduction 2",
                    },
                    Object {
                      "title": "Introduction 3",
                    },
                  ],
                  "title": "Introduction",
                },
                Object {
                  "lastParent": true,
                  "subList": Array [
                    Object {
                      "title": "Summary chapter 1",
                    },
                    Object {
                      "title": "Summary chapter 2",
                    },
                    Object {
                      "title": "Summary chapter 3",
                    },
                  ],
                  "title": "Summary",
                },
                Object {
                  "lastParent": false,
                  "subList": Array [
                    Object {
                      "title": "Introduction",
                    },
                    Object {
                      "lastParent": true,
                      "subList": Array [
                        Object {
                          "title": "Operations",
                        },
                        Object {
                          "title": "Lorem ipsum",
                        },
                        Object {
                          "title": "Dolor sit amet consectetur",
                        },
                        Object {
                          "title": "Adipiscing elit",
                        },
                      ],
                      "title": "Operations",
                    },
                    Object {
                      "lastParent": true,
                      "subList": Array [
                        Object {
                          "title": "Event 1",
                        },
                        Object {
                          "title": "Event 2",
                        },
                        Object {
                          "title": "Event 3",
                        },
                      ],
                      "title": "Events",
                    },
                    Object {
                      "title": "Conclusion",
                    },
                  ],
                  "title": "Other features",
                },
              ]
            }
          />
        </div>
        <main
          className="col main-content border-left"
        >
          Main content things...
        </main>
      </div>
    </div>
  </ComponentPreview>
</Fragment>
`;

exports[`Components: Sidebar RemoveActiveState renders 1`] = `
<Fragment>
  <JavascriptDocElement
    code={
      <CodeTags
        code="dg.sidebar.removeActiveState(<sidebar-id>, group-index, subgroup-index, leaf-index)"
        type="secondary"
      />
    }
    description={
      <React.Fragment>
        <p>
          Note: This method is optional
        </p>
        Remove group, subgroup and leaf of the 
         active state depending on the parameters passed. The paramater 
        <CodeTags
          code="group-index"
          type="secondary"
        />
         is the index of the group to have the active state removed, the paramater 
        <CodeTags
          code="subgroup-index"
          type="secondary"
        />
         is the index of the subgroup beneath the group selected by 
        <CodeTags
          code="group-index"
          type="secondary"
        />
        , and the paramater 
        <CodeTags
          code="leaf-index"
          type="secondary"
        />
         is the index of the leaf beneath both 
        <CodeTags
          code="group-index"
          type="secondary"
        />
         and 
        <CodeTags
          code="subgroup-index"
          type="secondary"
        />
        . If the group only has two levels, only 
        <CodeTags
          code="group-index"
          type="secondary"
        />
         and 
        <CodeTags
          code="leaf-index"
          type="secondary"
        />
         is needed. Since group always is present, 
        <CodeTags
          code="group-index"
          type="secondary"
        />
         should always be provided. Pass 
        <CodeTags
          code="null"
          type="secondary"
        />
         as a paramater in cases where the parameter needs to be empty, such as when 
        <CodeTags
          code="subgroup-index"
          type="secondary"
        />
         is the only one needed, use 
        <CodeTags
          code="removeActiveState(<sidebar-id>, group-index, null, null)"
          type="secondary"
        />
        . The paramater 
        <CodeTags
          code="<sidebar-id>"
          type="secondary"
        />
         must always be a valid id.
      </React.Fragment>
    }
  />
</Fragment>
`;

exports[`Components: Sidebar RemoveScrollListener renders 1`] = `
<Fragment>
  <JavascriptDocElement
    code={
      <CodeTags
        code="dg.sidebar.removeScrollListener(content-id)"
        type="secondary"
      />
    }
    description={
      <React.Fragment>
        <p>
          Note: This method is optional
        </p>
        Removes scroll listener on the element with id 
        <CodeTags
          code="content-id"
          type="secondary"
        />
        .
      </React.Fragment>
    }
  />
</Fragment>
`;

exports[`Components: Sidebar SetActiveState renders 1`] = `
<Fragment>
  <JavascriptDocElement
    code={
      <CodeTags
        code="dg.sidebar.setActiveState(<sidebar-id>, group-index, subgroup-index, leaf-index)"
        type="secondary"
      />
    }
    description={
      <React.Fragment>
        <p>
          Note: This method is optional
        </p>
        Sets group, subgroup and leaf of the 
         to active depending on the parameters passed. The paramater 
        <CodeTags
          code="group-index"
          type="secondary"
        />
         is the index of the group to be set active, the paramater 
        <CodeTags
          code="subgroup-index"
          type="secondary"
        />
         is the index of the subgroup beneath the group selected by 
        <CodeTags
          code="group-index"
          type="secondary"
        />
        , and the paramater 
        <CodeTags
          code="leaf-index"
          type="secondary"
        />
         is the index of the leaf beneath both 
        <CodeTags
          code="group-index"
          type="secondary"
        />
         and 
        <CodeTags
          code="subgroup-index"
          type="secondary"
        />
        . If the group only has two levels, only 
        <CodeTags
          code="group-index"
          type="secondary"
        />
         and 
        <CodeTags
          code="leaf-index"
          type="secondary"
        />
         is needed. Since group always is present, 
        <CodeTags
          code="group-index"
          type="secondary"
        />
         should always be provided. Pass 
        <CodeTags
          code="null"
          type="secondary"
        />
         as a paramater in cases where the parameter needs to be empty, such as when 
        <CodeTags
          code="subgroup-index"
          type="secondary"
        />
         is the only one needed, use 
        <CodeTags
          code="setActiveState(<sidebar-id>, group-index, null, null)"
          type="secondary"
        />
        . The paramater 
        <CodeTags
          code="<sidebar-id>"
          type="secondary"
        />
         must always be a valid id.
      </React.Fragment>
    }
  />
</Fragment>
`;

exports[`Components: Sidebar renders 1`] = `
<DocContainer
  docToc={true}
>
  <p
    className="lead"
  >
    The sidebar is used to give users an easily available navigational bar on the left side of your web application.
  </p>
  <Overview />
  <JavascriptMethods />
</DocContainer>
`;
