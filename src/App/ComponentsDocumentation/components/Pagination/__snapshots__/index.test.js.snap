// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Documentation: Pagination DeveloperDocumentation renders 1`] = `
<section>
  <h2
    id="developer-documentation"
  >
    Developer documentation
  </h2>
  <h3>
    Link relations
  </h3>
  <p>
    Consider adding
     
    <code
      className="code-tags code-tags-primary"
    >
      &lt;link rel="…" href="…"&gt;
    </code>
     to the
     
    <code
      className="code-tags code-tags-primary"
    >
      &lt;head&gt;
    </code>
     element of your HTML page. These links are used to indicate the relationships between a sequence of pages to web browsers and search engines. Link relations to consider adding are 
    <code
      className="code-tags code-tags-primary"
    >
      first
    </code>
    ,
     
    <code
      className="code-tags code-tags-primary"
    >
      last
    </code>
    ,
     
    <code
      className="code-tags code-tags-primary"
    >
      next
    </code>
     and
     
    <code
      className="code-tags code-tags-primary"
    >
      prev
    </code>
    .
  </p>
  <h3>
    Javascript methods
  </h3>
  <p>
    Our pagination component works without a script, so the styling is still working where JavaScript is prohibited. But where it is allowed, and where you do not want to spend time banging your head to figure out the algorithm, the Design Guide provides a reference implementation!
     
    <code
      className="code-tags code-tags-secondary"
    >
      dg.paginate(pages, currentActive)
    </code>
    . The script takes in two arguments;
     
    <code
      className="code-tags code-tags-primary"
    >
      pages
    </code>
     and
     
    <code
      className="code-tags code-tags-primary"
    >
      currentActive
    </code>
    , where
     
    <code
      className="code-tags code-tags-primary"
    >
      pages
    </code>
     is total pages and
     
    <code
      className="code-tags code-tags-primary"
    >
      currentActive
    </code>
     is the current active page.
  </p>
  <p>
    The script returns the paginated pages, an array of objects with two properties, 
    <code
      className="code-tags code-tags-primary"
    >
      page
    </code>
     and
     
    <code
      className="code-tags code-tags-primary"
    >
      current
    </code>
    .
     
    <code
      className="code-tags code-tags-primary"
    >
      page
    </code>
     shows an integer, and
     
    <code
      className="code-tags code-tags-primary"
    >
      null
    </code>
     when it should be replaced with an ellipsis. The 
    <code
      className="code-tags code-tags-primary"
    >
      current
    </code>
     is a bool that indicates whether the page is active or not.
  </p>
  <section>
    <h3>
      Example
    </h3>
    <figure>
      <div
        className="code-view"
      >
        <header
          className="code-view-header"
        >
          JAVASCRIPT
          <button
            aria-describedby="tooltipCopy"
            className="tooltip"
            onClick={[Function]}
          >
            <i
              className="material-icons-outlined"
            >
              content_copy
            </i>
            <div
              id="tooltipCopy"
              role="tooltip"
            >
              Copy to clipboard
            </div>
          </button>
        </header>
        <table
          className="code-view-table"
        >
          <tbody>
            <tr>
              <td
                className="code-view-numbers"
              >
                <pre>
                  1
                  

                  2
                  

                  3
                  

                  4
                  

                  5
                  

                  6
                  

                  7
                  

                  8
                  

                  9
                  

                  10
                  

                  11
                  

                  12
                  

                </pre>
              </td>
              <td
                className="code-view-code"
              >
                <pre>
                  import { paginate } from "@src/scripts/main";
                  

                  

                  console.log(paginate(10, 5))
                  

                  

                  //expected output:
                  

                  [ {page: 1, current: false},
                  

                  {page: null, current: false},
                  

                  {page: 4, current: false},
                  

                  {page: 5, current: true},
                  

                  {page: 6, current: false},
                  

                  {page: null, current: false},
                  

                  {page: 10, current: false} ]
                  

                </pre>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </figure>
  </section>
</section>
`;

exports[`Documentation: Pagination Overview renders 1`] = `
<section
  id="pagination-overview"
>
  <h2
    id="pagination"
  >
    Overview
  </h2>
  <p>
    Pagination is commonly used for things like table listings, search results or directories. The need for pagination is influenced by the amount of data to be displayed and the aim is to not overwhelm users with information and to improve the loading performance of the system. 
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
    showCasePanelAdvanced={
      Object {
        "elements": Array [
          Object {
            "component": <Pagination
              currentActive={1}
              id="overview"
              length={10}
            />,
            "description": <React.Fragment>
              <p>
                The pagination component consist of page number links as well as arrows to go to next or previous page. The arrow to previous page is disabled when the first page is active and the next arrow when the last page is active. If there are 7 pages or fewer, all page number links will be shown, but if there are more pages an ellipsis is used to truncate the pages as follows: [first] ... [current-1] [current] [current+1] ... [last].
              </p>
              <p>
                The arrows can also be 
                <CodeTags
                  code="<a>"
                  type="primary"
                />
                 tags.
              </p>
            </React.Fragment>,
            "options": Object {
              "radio": Array [
                Object {
                  "id": "pagination width",
                  "title": "Layout",
                  "values": Array [
                    Object {
                      "name": "Default",
                    },
                    Object {
                      "name": "Compact",
                      "value": Object {
                        "compact": true,
                      },
                    },
                  ],
                },
              ],
            },
            "title": "Pagination",
          },
        ],
        "id": "no-tabs",
      }
    }
  />
  <h3>
    Responsive design
  </h3>
  <div
    className="slab slab-plain"
  >
    <nav
      aria-label="Pagination Navigation"
      className="pagination align-items-center no-pointer-events"
      role="navigation"
    >
      <button
        className="arrow-start d-block disabled"
      >
        <i
          aria-label="start"
          className="material-icons"
        />
      </button>
      <button
        className="arrow-back disabled"
      >
        <i
          aria-label="back"
          className="material-icons"
        />
      </button>
      <span
        className="mobile d-block font-weight-bold"
      >
        Page 1 of 10
      </span>
      <button
        className="arrow-forward"
      >
        <i
          aria-label="forward"
          className="material-icons"
        />
      </button>
      <button
        className="arrow-end d-block"
      >
        <i
          aria-label="end"
          className="material-icons"
        />
      </button>
    </nav>
  </div>
  <p>
    On smaller screens the page links are replaced with text showing the page information, still using arrows to go to next or previous page but with the option to go to the first or last page as well.
  </p>
  <h3>
    When to consider something else
  </h3>
  <p>
    For exploration of content, where users are browsing aimlessly for something interesting, infinite scroll is better suited than using pagination. Pagination is best when the user is trying to accomplish a goal, for instance trying to find a particular article from a list.
  </p>
  <h3>
    How to use Pagination
  </h3>
  <h4>
    Number of pages
  </h4>
  <p>
    While the pagination component supports infinite amount of pages, it is difficult for the user to find what they are looking for if the number of pages are high. To mitigate this ux problem, consider supplementing the pagination with a search as well as more advanced filter functionality.
  </p>
  <h4>
    Items per page
  </h4>
  <p>
    10 items per page can be used as a general rule, but in reality it depends on your specific context. Consider the display size of each item, showing 10 items and leaving half the screen unused is not good practice.
  </p>
  <h4>
    Placement
  </h4>
  <p>
    Place pagination below the set of items it paginates through.
  </p>
  <div
    className="row"
  >
    <div
      className="col-lg-6"
      key="0success"
    >
      <div
        className="slab slab-plain slab-border-success"
      >
        <h4>
          Do
        </h4>
        <div
          className="pagination-content-box-example mt-3 mx-auto"
          key="success0"
        />
        <div
          className="pagination-content-box-example mt-3 mx-auto"
          key="success1"
        />
        <div
          className="pagination-content-box-example mt-3 mx-auto"
          key="success2"
        />
        <div
          className="pagination-content-box-example mt-3 mx-auto"
          key="success3"
        />
        <nav
          className="pagination example"
        >
          <button
            className="arrow-back"
          >
            

            <i
              className="material-icons"
            />
            

          </button>
          <div
            className="example-box my-auto"
          />
          <button
            className="arrow-forward"
          >
            

            <i
              className="material-icons"
            />
            

          </button>
        </nav>
      </div>
    </div>
    <div
      className="col-lg-6"
      key="1error"
    >
      <div
        className="slab slab-plain slab-border-error"
      >
        <h4>
          Do
          n't
        </h4>
        <nav
          className="pagination example"
        >
          <button
            className="arrow-back"
          >
            

            <i
              className="material-icons"
            />
            

          </button>
          <div
            className="example-box my-auto"
          />
          <button
            className="arrow-forward"
          >
            

            <i
              className="material-icons"
            />
            

          </button>
        </nav>
        <div
          className="pagination-content-box-example mb-3 mx-auto"
          key="error0"
        />
        <div
          className="pagination-content-box-example mb-3 mx-auto"
          key="error1"
        />
        <div
          className="pagination-content-box-example mb-3 mx-auto"
          key="error2"
        />
        <div
          className="pagination-content-box-example mb-3 mx-auto"
          key="error3"
        />
      </div>
    </div>
  </div>
</section>
`;

exports[`Documentation: Pagination renders 1`] = `
<DocContainer>
  <p
    className="lead"
  >
    Pagination is used to divide large amounts of content into separate pages and allows the user to navigate to the next or previous pages.
  </p>
  <Overview />
  <DeveloperDocumentation />
</DocContainer>
`;
