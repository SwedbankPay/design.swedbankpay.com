// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Documentation: Buttons Destructive button renders 1`] = `
<Fragment>
  <h2
    id="destructive-button"
  >
    Destructive button
  </h2>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
    showCasePanelAdvanced={
      Object {
        "elements": Array [
          Object {
            "component": <Button
              label="Do something"
              type="guiding-destructive"
            />,
            "description": <React.Fragment>
              <p>
                Use a guiding destructive button to clearly show the user that the action is destructive. The button is designed to not take on too much visual attention from the user yet still clearly communicate a destructive action. It can therefor safely be used in most contexts.
              </p>
              <p>
                When letting users carry out an action like this, it’s a good idea to include an additional step which asks them to confirm it. The guiding destructive button will therefor often occur prior to the executive destructive button in a user flow.
              </p>
            </React.Fragment>,
            "options": Object {
              "checkbox": Array [
                Object {
                  "id": "icon_check_destructive",
                  "name": "Icon",
                  "value": Object {
                    "icon": "cloud",
                  },
                },
                Object {
                  "id": "loader_check_destructive",
                  "name": "Loader",
                  "value": Object {
                    "loader": true,
                    "loading": true,
                  },
                },
              ],
              "radio": Array [
                Object {
                  "id": "size_radio_destructive",
                  "title": "Sizes",
                  "values": Array [
                    Object {
                      "name": "Large",
                      "value": Object {
                        "size": "lg",
                      },
                    },
                    Object {
                      "name": "Small",
                      "value": Object {
                        "size": "sm",
                      },
                    },
                    Object {
                      "name": "Extra small",
                      "value": Object {
                        "size": "xs",
                      },
                    },
                  ],
                },
              ],
            },
            "tab": "Guiding",
            "title": "Destructive button",
          },
          Object {
            "component": <Button
              label="Do something"
              type="link-destructive"
            />,
            "description": "The text destructive button is used as an alternative for the guiding destructive button and can be used when there is limited space, within other components or various containers.",
            "options": Object {
              "checkbox": Array [
                Object {
                  "id": "icon_check_destructive",
                  "name": "Icon",
                  "value": Object {
                    "icon": "cloud",
                  },
                },
              ],
            },
            "tab": "Text/Link",
            "title": "Destructive button",
          },
          Object {
            "component": <Button
              label="Do something"
              type="executive-destructive"
            />,
            "description": "The executive destructive button should be used sparingly and only in case of a final destructive call to action. The executive destructive button visually takes up a lot of the attention. To not distract the user from other content it is often used in simpler contexts such as dialogs, for example when confirming removal of certain information.",
            "options": Object {
              "checkbox": Array [
                Object {
                  "id": "icon_check_destructive",
                  "name": "Icon",
                  "value": Object {
                    "icon": "close",
                  },
                },
                Object {
                  "id": "loader_check_destructive",
                  "name": "Loader",
                  "value": Object {
                    "loader": true,
                    "loading": true,
                  },
                },
              ],
              "radio": Array [
                Object {
                  "id": "size_radio_destructive",
                  "title": "Sizes",
                  "values": Array [
                    Object {
                      "name": "Large",
                      "value": Object {
                        "size": "lg",
                      },
                    },
                    Object {
                      "name": "Small",
                      "value": Object {
                        "size": "sm",
                      },
                    },
                    Object {
                      "name": "Extra small",
                      "value": Object {
                        "size": "xs",
                      },
                    },
                  ],
                },
              ],
            },
            "tab": "Executive",
            "title": "Executive destructive button",
          },
        ],
        "id": "destructiveButtons",
        "tabsId": "destructiveButtonsTabs",
      }
    }
  />
</Fragment>
`;

exports[`Documentation: Buttons Developer documentation renders 1`] = `
<Fragment>
  <h2
    id="developer-documentation"
  >
    Developer documentation
  </h2>
  <h3>
    Active state
  </h3>
  <p>
    Buttons will appear pressed (with inset shadow) when active.
    <b>
      There’s no need to add a class to 
      <CodeTags
        code="<button>"
        type="primary"
      />
      s as they use a pseudo-class.
    </b>
     However, you can still force the same active appearance with 
    <CodeTags
      code=".active"
      type="secondary"
    />
     (and include the 
    <CodeTags
      code="aria-pressed=\\"true\\""
      type="secondary"
    />
     attribute) should you need to replicate the state programmatically.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        active={true}
        href="#"
        label="Primary"
        type="primary"
      />
      

      <Button
        active={true}
        href="#"
        label="Secondary"
        type="secondary"
      />
      

      <Button
        active={true}
        label="Guiding destructive"
        type="guiding-destructive"
      />
      

      <Button
        active={true}
        label="Executive destructive"
        type="executive-destructive"
      />
      

    </div>
  </ComponentPreview>
  <h3>
    Disabled state
  </h3>
  <p>
    Make buttons look inactive by adding the 
    <CodeTags
      code="disabled"
      type="secondary"
    />
     boolean attribute to any 
    <CodeTags
      code="<button>"
      type="primary"
    />
     element.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        disabled={true}
        label="Primary"
        type="primary"
      />
      

      <Button
        disabled={true}
        label="Secondary"
        type="secondary"
      />
      

      <Button
        disabled={true}
        label="Text/Link"
        type="link"
      />
      

      <Button
        disabled={true}
        label="Guiding destructive"
        type="guiding-destructive"
      />
      

      <Button
        disabled={true}
        label="Link destructive"
        type="link-destructive"
      />
      

      <Button
        disabled={true}
        label="Executive destructive"
        type="executive-destructive"
      />
      

    </div>
  </ComponentPreview>
  <p>
    Disabled buttons using the 
    <CodeTags
      code="<a>"
      type="primary"
    />
     element behave a bit different:
  </p>
  <ul>
    <li>
      <CodeTags
        code="<a>"
        type="primary"
      />
      s do not support the 
      <CodeTags
        code="disabled"
        type="secondary"
      />
       attribute, so you must add the 
      <CodeTags
        code=".disabled"
        type="secondary"
      />
       class to make it visually appear disabled.
    </li>
    <li>
      Some future-friendly styles are included to disable all 
      <CodeTags
        code="pointer-events"
        type="secondary"
      />
       on anchor buttons. In browsers which support that property, you won’t see the disabled cursor at all.
    </li>
    <li>
      Disabled buttons should include the 
      <CodeTags
        code="aria-disabled=\\"true\\""
        type="secondary"
      />
       attribute to indicate the state of the element to assistive technologies.
    </li>
  </ul>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        disabled={true}
        href="#"
        label="Executive"
        type="primary"
      />
      

      <Button
        disabled={true}
        href="#"
        label="Guiding"
        type="secondary"
      />
      

    </div>
  </ComponentPreview>
  <Alert
    type="warning"
  >
    <h5>
      Link functionality caveat
    </h5>
    <p>
      The 
      <CodeTags
        code=".disabled"
        type="secondary"
      />
       class uses 
      <CodeTags
        code="pointer-events: none"
        type="secondary"
      />
       to try to disable the link functionality of 
      <CodeTags
        code="<a>"
        type="primary"
      />
      s, but that CSS property is not yet standardized. In addition, even in browsers that do support 
      <CodeTags
        code="pointer-events: none"
        type="secondary"
      />
      , keyboard navigation remains unaffected, meaning that sighted keyboard users and users of assistive technologies will still be able to activate these links. So to be safe, add a 
      <CodeTags
        code="tabindex=\\"-1\\""
        type="secondary"
      />
       attribute on these links (to prevent them from receiving keyboard focus) and use custom JavaScript to disable their functionality.
    </p>
  </Alert>
  <h3>
    Usage with other tags
  </h3>
  <p>
    The 
    <CodeTags
      code=".btn"
      type="secondary"
    />
     classes are designed to be used with the 
    <CodeTags
      code="<button>"
      type="primary"
    />
     element. However, you can also use these classes on 
    <CodeTags
      code="<a>"
      type="primary"
    />
     or 
    <CodeTags
      code="<input>"
      type="primary"
    />
     elements (though some browsers may apply a slightly different rendering).
  </p>
  <p>
    When using button classes on 
    <CodeTags
      code="<a>"
      type="primary"
    />
     elements that are used to trigger in-page functionality (like collapsing content), rather than linking to new pages or sections within the current page, these links should be given a 
    <CodeTags
      code="role=\\"button\\""
      type="secondary"
    />
     to appropriately convey their purpose to assistive technologies such as screen readers.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        href="#"
        label="Anchor"
        type="primary"
      />
      

      <Button
        label="Button"
        type="primary"
      />
      

      <Button
        btnType="button"
        input={true}
        type="primary"
        value="Input"
      />
      

      <Button
        btnType="submit"
        input={true}
        type="primary"
        value="Submit"
      />
      

      <Button
        btnType="reset"
        input={true}
        type="primary"
        value="Reset"
      />
      

    </div>
  </ComponentPreview>
  <h3>
    Using buttons together
  </h3>
  <p>
    When you use buttons next to each other you have to wrap them in a 
    <CodeTags
      code=".button-group"
      type="secondary"
    />
    .
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        label="Activate"
        type="primary"
      />
      

      <Button
        label="Disable"
        type="secondary"
      />
      

    </div>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Buttons Overview renders 1`] = `
<Fragment>
  <h2
    id="overview"
  >
    Which button to use?
  </h2>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
    showCasePanelAdvanced={
      Object {
        "elements": Array [
          Object {
            "component": <Button
              label="Do something"
              type="primary"
            />,
            "description": "Use a primary button as the main call to action on a page. Avoid using multiple default buttons on a single page. Having more than one main call to action reduces their impact, and makes it harder for users to know what to do next.",
            "options": Object {
              "checkbox": Array [
                Object {
                  "id": "icon_check",
                  "name": "Icon",
                  "value": Object {
                    "icon": "cloud",
                  },
                },
                Object {
                  "id": "loader_check",
                  "name": "Loader",
                  "value": Object {
                    "loader": true,
                    "loading": true,
                  },
                },
              ],
              "radio": Array [
                Object {
                  "id": "size_radio",
                  "title": "Sizes",
                  "values": Array [
                    Object {
                      "name": "Large",
                      "value": Object {
                        "size": "lg",
                      },
                    },
                    Object {
                      "name": "Small",
                      "value": Object {
                        "size": "sm",
                      },
                    },
                    Object {
                      "name": "Extra small",
                      "value": Object {
                        "size": "xs",
                      },
                    },
                  ],
                },
              ],
            },
            "tab": "Primary",
            "title": "Primary button",
          },
          Object {
            "component": <Button
              bankId="se"
              label="Do something"
              type="primary"
            />,
            "description": <React.Fragment>
              <p>
                Use BankID buttons as the main call to action on a page when the following action is signing or verifying something with BankID. Currently only available for Swedish and Norwegian BankID.
              </p>
              <p>
                Avoid using multiple BankID buttons on a single page. Having more than one main call to action reduces their impact, and makes it harder for users to know what to do next.
              </p>
            </React.Fragment>,
            "options": Object {
              "checkbox": Array [
                Object {
                  "id": "loader_check",
                  "name": "Loader",
                  "value": Object {
                    "loader": true,
                    "loading": true,
                  },
                },
              ],
              "radio": Array [
                Object {
                  "id": "country_radio",
                  "title": "Country",
                  "values": Array [
                    Object {
                      "name": "Sweden",
                      "value": Object {
                        "bankId": "se",
                      },
                    },
                    Object {
                      "name": "Norway",
                      "value": Object {
                        "bankId": "no",
                      },
                    },
                  ],
                },
              ],
            },
            "tab": "BankID",
            "title": "BankID button",
          },
          Object {
            "component": <Button
              label="Do something"
              type="secondary"
            />,
            "description": <p>
              Use secondary buttons for secondary call to actions on a page. Pages with too many calls to action make it hard for users to know what to do next. Before adding lots of secondary buttons, try to simplify the page or break the content down across multiple pages or consider using 
              <a
                href="/components/links"
              >
                Action links
              </a>
              .
            </p>,
            "options": Object {
              "checkbox": Array [
                Object {
                  "id": "icon_check",
                  "name": "Icon",
                  "value": Object {
                    "icon": "cloud",
                  },
                },
                Object {
                  "id": "loader_check",
                  "name": "Loader",
                  "value": Object {
                    "loader": true,
                    "loading": true,
                  },
                },
              ],
              "radio": Array [
                Object {
                  "id": "size_radio",
                  "title": "Sizes",
                  "values": Array [
                    Object {
                      "name": "Large",
                      "value": Object {
                        "size": "lg",
                      },
                    },
                    Object {
                      "name": "Small",
                      "value": Object {
                        "size": "sm",
                      },
                    },
                    Object {
                      "name": "Extra small",
                      "value": Object {
                        "size": "xs",
                      },
                    },
                  ],
                },
              ],
            },
            "tab": "Secondary",
            "title": "Secondary button",
          },
          Object {
            "component": <Button
              label="Do something"
              type="link"
            />,
            "description": "Only use in combination with a primary or secondary button – for stand alone links see Links. Use for less important or less commonly used actions since they’re less prominent. Text buttons are often embedded in contained components like cards and dialogs. Since text buttons don’t have a container, they don’t distract from nearby content.",
            "options": Object {
              "checkbox": Array [
                Object {
                  "id": "icon_check",
                  "name": "Icon",
                  "value": Object {
                    "icon": "cloud",
                  },
                },
              ],
            },
            "tab": "Text/Link button",
            "title": "Link button",
          },
        ],
        "id": "overviewButtons",
        "tabsId": "overviewButtonsTabs",
      }
    }
  />
</Fragment>
`;

exports[`Documentation: Buttons renders 1`] = `
<DocContainer
  docToc={true}
>
  <p>
    Buttons communicate actions that users can take. The intention of a button should be clear and predictable. Users should be able to anticipate what will happen when they click on a button. Buttons are typically placed throughout your UI, in places like:
  </p>
  <ul
    className="list list-bullet"
  >
    <li>
      Dialogs
    </li>
    <li>
      Modals
    </li>
    <li>
      Forms
    </li>
    <li>
      Cards
    </li>
    <li>
      Toolbars
    </li>
  </ul>
  <Overview />
  <DestructiveButton />
  <DeveloperDocumentation />
</DocContainer>
`;
