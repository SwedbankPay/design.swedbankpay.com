// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Components: Toast Content guidelines renders 1`] = `
<section>
  <h3>
    Content guidelines
  </h3>
  <div
    className="slab slab-plain mt-3 px-0"
  >
    <div
      className="toast-example-container py-5"
    >
      <div
        className="m-auto col-12"
        id="toast-container"
      >
        <div
          className="toast toast-neutral col-12"
        >
          <i
            className="material-icons"
          >
            info
          </i>
          <div
            className="toast-content"
          >
            <b>
              Message
            </b>
          </div>
          <button
            aria-label="Close button"
            className="toast-close ml-auto"
          >
            <i
              className="material-icons"
            >
              close
            </i>
          </button>
        </div>
      </div>
    </div>
  </div>
  <ul
    className="list list-bullet"
  >
    <li>
      The toast may have a bolded title to give a quick overview of the notification. It’s important that the 
      <b>
        message
      </b>
       reflect the toast type, e.g if it is an error toast, it should clearly state the issue and if possible explain how to solve the problem. 
    </li>
  </ul>
</section>
`;

exports[`Components: Toast Developer documentation renders 1`] = `
<section
  id="developer-documentation"
>
  <h2>
    Developer documentation
  </h2>
  <p>
    To use the Toast, call 
    <CodeTags
      code="dg.toast()"
      type="secondary"
    />
     with the desired options.
  </p>
  <ComponentPreview
    codeFigure={true}
    dangerousHTML={true}
    language="html"
  >
    &lt;button type="button" class="btn btn-primary" onclick="dg.toast({
	type: 'neutral' 
	html: '&lt;p&gt;&lt;b&gt;Info header&lt;/b&gt;
		 Input informative alert information here, provide &lt;a href="#"&gt;link&lt;/a&gt; to solution or more info when possible.
	&lt;/p&gt;'})"&gt;Neutral toast
&lt;/button&gt;
  </ComponentPreview>
  <h4>
    Options
  </h4>
  <div
    className="overflow-auto"
  >
    <table
      className="table table-striped"
      key="Name,Type,Default,Description"
    >
      <thead>
        <tr>
          <th
            key="Name0"
          >
            Name
          </th>
          <th
            key="Type0"
          >
            Type
          </th>
          <th
            key="Default0"
          >
            Default
          </th>
          <th
            key="Description0"
          >
            Description
          </th>
        </tr>
      </thead>
      <tbody>
        <tr
          key="0"
        >
          <td
            key="html0"
          >
            html
          </td>
          <td
            key="String1"
          >
            String
          </td>
          <td
            key="[object Object]2"
          >
            <CodeTags
              code="\\"\\""
              type="secondary"
            />
          </td>
          <td
            key="The HTML content of the Toast.3"
          >
            The HTML content of the Toast.
          </td>
        </tr>
        <tr
          key="1"
        >
          <td
            key="type0"
          >
            type
          </td>
          <td
            key="String1"
          >
            String
          </td>
          <td
            key="[object Object]2"
          >
            <CodeTags
              code="\\"\\""
              type="secondary"
            />
          </td>
          <td
            key="[object Object]3"
          >
            Alert types: 
            <CodeTags
              code="success"
              type="secondary"
            />
            , 
            <CodeTags
              code="neutral"
              type="secondary"
            />
            , 
            <CodeTags
              code="warning"
              type="secondary"
            />
            , 
            <CodeTags
              code="danger"
              type="secondary"
            />
          </td>
        </tr>
        <tr
          key="2"
        >
          <td
            key="classes0"
          >
            classes
          </td>
          <td
            key="Array of strings1"
          >
            Array of strings
          </td>
          <td
            key="[object Object]2"
          >
            <CodeTags
              code="[]"
              type="secondary"
            />
          </td>
          <td
            key="Classes to be added to the toast element.3"
          >
            Classes to be added to the toast element.
          </td>
        </tr>
        <tr
          key="3"
        >
          <td
            key="completeCallback0"
          >
            completeCallback
          </td>
          <td
            key="Function1"
          >
            Function
          </td>
          <td
            key="[object Object]2"
          >
            <CodeTags
              code="null"
              type="secondary"
            />
          </td>
          <td
            key="Callback function called when toast is dismissed.3"
          >
            Callback function called when toast is dismissed.
          </td>
        </tr>
      </tbody>
    </table>
  </div>
  <section>
    <h3>
      Usage with NPM
    </h3>
    <p>
      <Link
        to="/get-started/for-developers/"
      >
        Usage with NPM
      </Link>
       will require you to import it from 
      <CodeTags
        code="@swedbankpay/design-guide"
        type="primary"
      />
       before calling it on an element.
    </p>
    <ComponentPreview
      codeFigure={true}
      dangerousHTML={true}
      language="javascript"
    >
      import { toast } from "@swedbankpay/design-guide"; 
      

      toast({
      
	type: 'neutral' 
	html: '&lt;p&gt;
		&lt;b&gt;Info header&lt;/b&gt;
		 Input informative alert information here, provide &lt;a href="#"&gt;link&lt;/a&gt; to solution or more info when possible.
	&lt;/p&gt;'
      

      })
    </ComponentPreview>
    <ComponentPreview
      codeFigure={true}
      dangerousHTML={true}
      language="html"
    >
      &lt;button type="button" class="btn btn-primary" onclick="toast({
	type: 'neutral' 
	html: '&lt;p&gt;&lt;b&gt;Info header&lt;/b&gt;
		 Input informative alert information here, provide &lt;a href="#"&gt;link&lt;/a&gt; to solution or more info when possible.
		&lt;/p&gt;'})"&gt;Neutral toast
&lt;/button&gt;
    </ComponentPreview>
  </section>
</section>
`;

exports[`Components: Toast Overview renders 1`] = `
<section>
  <h2
    id="overview"
  >
    Overview
  </h2>
  <ComponentPreview
    hideCodeFigure={true}
    language="html"
    showCasePanel={true}
    showCasePanelAdvanced={
      Object {
        "elements": Array [
          Object {
            "component": <Toast
              title="Neutral"
              type="neutral"
            />,
            "description": "Use this toast to inform the user about something, in some cases a link can be used to direct the user towards continued reading. For information on how to trigger a toast, read more under Developer documentation.",
            "options": Object {
              "checkbox": Array [],
            },
            "tab": "Neutral",
            "title": "Neutral toast",
          },
          Object {
            "component": <Toast
              title="Success"
              type="success"
            />,
            "description": <React.Fragment>
              <p>
                Use success toast to show that the action performed by the user was successful.
              </p>
              <AlertBox />
            </React.Fragment>,
            "options": Object {
              "checkbox": Array [],
            },
            "tab": "Success",
            "title": "Success toast",
          },
          Object {
            "component": <Toast
              title="Warning"
              type="warning"
            />,
            "description": <React.Fragment>
              <p>
                The warning toast warns the user about situations that might be unfavorable. Don’t use this to present critical information.
              </p>
              <AlertBox />
            </React.Fragment>,
            "options": Object {
              "checkbox": Array [],
            },
            "tab": "Warning",
            "title": "Warning toast",
          },
          Object {
            "component": <Toast
              title="Danger"
              type="danger"
            />,
            "description": <React.Fragment>
              <p>
                Danger toast informs the user of error and issues that may have occurred. They should let the user know what has happened and how the user can solve the issue.
              </p>
              <AlertBox />
            </React.Fragment>,
            "options": Object {
              "checkbox": Array [],
            },
            "tab": "Danger",
            "title": "Danger toast",
          },
        ],
        "hideOptions": true,
        "id": "overviewToast",
        "tabsId": "overviewToastTabs",
      }
    }
  />
  <ComponentPreview
    codeFigure={true}
    dangerousHTML={true}
    language="html"
  >
    &lt;button type="button" class="btn btn-primary" onclick="dg.toast({
	type: 'neutral' 
	html: '&lt;p&gt;&lt;b&gt;Info header&lt;/b&gt; Input informative alert information here, provide &lt;a href="#"&gt;link&lt;/a&gt; to solution or more info when possible.&lt;/p&gt;'})"&gt;
Show neutral toast
&lt;/button&gt;
  </ComponentPreview>
  <section>
    <h3>
      When to consider something else
    </h3>
    <ul
      className="list list-bullet"
    >
      <li>
        Toasts are temporary notifications, therefore in cases where you want to display a more permanent message to the user, use the 
        <Link
          to="/components/alerts"
        >
          alert
        </Link>
         component instead which stays permanently on the screen.
      </li>
      <li>
        Similarly, if you require action from the user before continuing to the next page, use a 
        <Link
          to="/components/dialog"
        >
          dialog
        </Link>
         component instead.
      </li>
    </ul>
  </section>
  <section>
    <h3>
      How to use toast
    </h3>
    <div
      className="slab slab-plain slab-border-success"
    >
      <span
        className="h3"
      >
        Do
      </span>
      <div
        className="toast-example-container col-sm-10 col-12 p-0"
      >
        <div
          className="col-12 ml-auto mt-3 p-0"
          id="toast-container"
        >
          <div
            className="toast toast-neutral col-sm-11 col-12"
          >
            <i
              className="material-icons"
            >
              info
            </i>
            <div
              className="toast-content"
            >
              <b>
                Short information message
              </b>
            </div>
            <button
              aria-label="Close button"
              className="toast-close ml-auto"
            >
              <i
                className="material-icons"
              >
                close
              </i>
            </button>
          </div>
        </div>
      </div>
    </div>
    <p>
      The positioning of the toast component should always be at the top right corner of the page on desktop and top center on mobile devices.
    </p>
    <div
      className="slab slab-plain slab-border-error"
    >
      <span
        className="h3"
      >
        Don't
      </span>
      <div
        className="toast-example-container col-sm-11 col-12 my-5 mx-auto"
      >
        <div
          className="toast-dont-example col-12 m-auto px-0"
          id="toast-container"
        >
          <div
            className="toast toast-neutral"
          >
            <i
              className="material-icons"
            >
              info
            </i>
            <div
              className="toast-content"
            >
              <b>
                Short information message
              </b>
            </div>
            <button
              aria-label="Close button"
              className="toast-close ml-auto"
            >
              <i
                className="material-icons"
              >
                close
              </i>
            </button>
          </div>
        </div>
      </div>
    </div>
    <p>
      The toast component should not pop up in the middle of the screen and interrupt the user flow. 
    </p>
  </section>
</section>
`;

exports[`Components: Toast renders 1`] = `
<DocContainer>
  <section
    id="toast-doc"
  >
    <p
      className="lead"
    >
      The toast component is only displayed when the user has performed an action. The components informs the user of the status of their request, warning and potential errors.
    </p>
    <Overview />
    <ContentGuidelines />
    <DeveloperDocumentation />
  </section>
</DocContainer>
`;
