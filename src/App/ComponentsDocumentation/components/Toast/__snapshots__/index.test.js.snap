// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Components: Toast Content guidelines renders 1`] = `
<section>
  <h3>
    Content guidelines
  </h3>
  <div
    className="slab slab-plain mt-3"
  >
    <div
      className="toast-example-container py-5"
    >
      <div
        className="m-auto"
        id="toast-container"
      >
        <div
          className="toast toast-neutral"
        >
          <i
            className="material-icons"
          >
            info
          </i>
          <div
            className="toast-content"
          >
            <b>
              Message
            </b>
          </div>
          <i
            className="material-icons"
          >
            close
          </i>
        </div>
      </div>
    </div>
  </div>
  <ul
    className="list list-bullet"
  >
    <li>
      The 
      <b>
        message
      </b>
       for toast should reflect the type of the toast, if it is informative it should explain and link the user further. If it is an error toast, it should clearly explain what the issue is and explain how the user can solve the problem.
    </li>
  </ul>
</section>
`;

exports[`Components: Toast Developer documentation renders 1`] = `
<section
  id="developer-documentation"
>
  <h2>
    Developer documentation
  </h2>
  <p>
    To use the Toast, call 
    <CodeTags
      code="dg.toast()"
      type="secondary"
    />
     on an element with the desired options.
  </p>
  <ComponentPreview
    codeFigure={true}
    dangerousHTML={true}
    language="html"
  >
    &lt;button type="button" class="btn btn-primary" onclick="dg.toast({
	type: 'neutral' 
	html: '&lt;p&gt;&lt;b&gt;Info header&lt;/b&gt;
		 Input informative alert information here, provide &lt;a href="#"&gt;link&lt;/a&gt; to solution or more info when possible.
	&lt;/p&gt;'})"&gt;Neutral toast
&lt;/button&gt;
  </ComponentPreview>
  <h4>
    Options
  </h4>
  <table
    className="table table-striped"
    key="Name,Type,Default,Description"
  >
    <thead>
      <tr>
        <th
          key="Name0"
        >
          Name
        </th>
        <th
          key="Type0"
        >
          Type
        </th>
        <th
          key="Default0"
        >
          Default
        </th>
        <th
          key="Description0"
        >
          Description
        </th>
      </tr>
    </thead>
    <tbody>
      <tr
        key="0"
      >
        <td
          key="html0"
        >
          html
        </td>
        <td
          key="String1"
        >
          String
        </td>
        <td
          key="[object Object]2"
        >
          <CodeTags
            code="\\"\\""
            type="secondary"
          />
        </td>
        <td
          key="The HTML content of the Toast.3"
        >
          The HTML content of the Toast.
        </td>
      </tr>
      <tr
        key="1"
      >
        <td
          key="type0"
        >
          type
        </td>
        <td
          key="String1"
        >
          String
        </td>
        <td
          key="[object Object]2"
        >
          <CodeTags
            code="\\"\\""
            type="secondary"
          />
        </td>
        <td
          key="[object Object]3"
        >
          Alert types: 
          <CodeTags
            code="success"
            type="secondary"
          />
          , 
          <CodeTags
            code="neutral"
            type="secondary"
          />
          , 
          <CodeTags
            code="warning"
            type="secondary"
          />
          , 
          <CodeTags
            code="danger"
            type="secondary"
          />
        </td>
      </tr>
      <tr
        key="2"
      >
        <td
          key="classes0"
        >
          classes
        </td>
        <td
          key="Array of strings1"
        >
          Array of strings
        </td>
        <td
          key="[object Object]2"
        >
          <CodeTags
            code="[]"
            type="secondary"
          />
        </td>
        <td
          key="Classes to be added to the toast element.3"
        >
          Classes to be added to the toast element.
        </td>
      </tr>
      <tr
        key="3"
      >
        <td
          key="completeCallback0"
        >
          completeCallback
        </td>
        <td
          key="Function1"
        >
          Function
        </td>
        <td
          key="[object Object]2"
        >
          <CodeTags
            code="null"
            type="secondary"
          />
        </td>
        <td
          key="Callback function called when toast is dismissed.3"
        >
          Callback function called when toast is dismissed.
        </td>
      </tr>
    </tbody>
  </table>
  <section>
    <h3>
      Usage with NPM
    </h3>
    <p>
      <Link
        to="/get-started/for-developers/"
      >
        Usage with NPM
      </Link>
       will require you to import it from 
      <CodeTags
        code="@swedbankpay/design-guide"
        type="primary"
      />
       before calling it on an element.
    </p>
    <ComponentPreview
      codeFigure={true}
      dangerousHTML={true}
      language="javascript"
    >
      import { toast } from "@swedbankpay/design-guide"; 
      

      toast();
    </ComponentPreview>
    <ComponentPreview
      codeFigure={true}
      dangerousHTML={true}
      language="html"
    >
      &lt;button type="button" class="btn btn-primary" onclick="toast({
	type: 'neutral' 
	html: '&lt;p&gt;&lt;b&gt;Info header&lt;/b&gt;
		 Input informative alert information here, provide &lt;a href="#"&gt;link&lt;/a&gt; to solution or more info when possible.
		&lt;/p&gt;'})"&gt;Neutral toast
&lt;/button&gt;
    </ComponentPreview>
  </section>
</section>
`;

exports[`Components: Toast Overview renders 1`] = `
<section>
  <h2
    id="overview"
  >
    Overview
  </h2>
  <ComponentPreview
    hideCodeFigure={true}
    language="html"
    showCasePanel={true}
    showCasePanelAdvanced={
      Object {
        "elements": Array [
          Object {
            "component": <Toast
              title="Information"
              type="neutral"
            />,
            "description": "Use this toast when you want to inform the user. The message should clearly state and explain what the information is about and in some cases a link can also be used to direct the user towards continued reading.",
            "options": Object {
              "checkbox": Array [],
            },
            "tab": "Information",
            "title": "Information toast",
          },
          Object {
            "component": <Toast
              title="Success"
              type="success"
            />,
            "description": "Use success toast when the action performed by the user has returned a success.",
            "options": Object {
              "checkbox": Array [],
            },
            "tab": "Success",
            "title": "Success toast",
          },
          Object {
            "component": <Toast
              title="Warning"
              type="warning"
            />,
            "description": "The warning toast warns the user about situations that might be unfavorable. Donâ€™t use this to present critical information.",
            "options": Object {
              "checkbox": Array [],
            },
            "tab": "Warning",
            "title": "Warning toast",
          },
          Object {
            "component": <Toast
              title="Error"
              type="danger"
            />,
            "description": "Error toast informs the user of error and issues that may have occurred, they should let the user know what has happened and how the user can solve the issue.",
            "options": Object {
              "checkbox": Array [],
            },
            "tab": "Error",
            "title": "Error toast",
          },
        ],
        "hideOptions": true,
        "id": "overviewToast",
        "tabsId": "overviewToastTabs",
      }
    }
  />
  <ComponentPreview
    codeFigure={true}
    dangerousHTML={true}
    language="html"
  >
    &lt;button type="button" class="btn btn-primary" onclick="dg.toast({
	type: 'neutral' 
	html: '&lt;p&gt;&lt;b&gt;Info header&lt;/b&gt; Input informative alert information here, provide &lt;a href="#"&gt;link&lt;/a&gt; to solution or more info when possible.&lt;/p&gt;'})"&gt;
Neutral toast
&lt;/button&gt;
  </ComponentPreview>
  <section>
    <h3>
      When to consider something else
    </h3>
    <ul
      className="list list-bullet"
    >
      <li>
        Toasts are temporary notifications, therefore in cases where you want to display a more permanent message to the user, use the 
        <Link
          to="/components/alerts"
        >
          alert
        </Link>
         component instead which stays permanently on the screen.
      </li>
      <li>
        Similarly, if you require action from the user before continuing to the next page, use a 
        <Link
          to="/components/dialog"
        >
          dialog
        </Link>
         component instead.
      </li>
    </ul>
  </section>
  <section>
    <h3>
      How to use toast
    </h3>
    <div
      className="slab slab-plain slab-border-success"
    >
      <span
        className="h3"
      >
        Do
      </span>
      <div
        className="toast-example-container"
      >
        <div
          className="ml-auto mr-3 mt-3"
          id="toast-container"
        >
          <div
            className="toast toast-neutral"
          >
            <i
              className="material-icons"
            >
              info
            </i>
            <div
              className="toast-content"
            >
              <b>
                Short information message
              </b>
            </div>
            <i
              className="material-icons"
            >
              close
            </i>
          </div>
        </div>
      </div>
    </div>
    <p>
      The positioning of the toast component should always be at the top left corner of the page on web and top center on mobile devices.
    </p>
    <div
      className="slab slab-plain slab-border-error"
    >
      <span
        className="h3"
      >
        Don't
      </span>
      <div
        className="toast-example-container m-4"
      >
        <div
          className="toast-dont-example m-auto"
          id="toast-container"
        >
          <div
            className="toast toast-neutral"
          >
            <i
              className="material-icons"
            >
              info
            </i>
            <div
              className="toast-content"
            >
              <b>
                Short information message
              </b>
            </div>
            <i
              className="material-icons"
            >
              close
            </i>
          </div>
        </div>
      </div>
    </div>
    <p>
      Since the toast component provides updates on user actions and never critical information, it should not disturb/abrupt the user flow. As seen on the example above, it should not pop up in the middle of the screen interrupting the user. 
    </p>
  </section>
</section>
`;

exports[`Components: Toast renders 1`] = `
<DocContainer>
  <section
    id="toast-doc"
  >
    <p
      className="lead"
    >
      The toast component is only displayed when the user has performed an action. The components informs the user of the status of their request, warning and potential errors.
    </p>
    <Overview />
    <ContentGuidelines />
    <DeveloperDocumentation />
  </section>
</DocContainer>
`;
