// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Components: Tabs ContentGuidelines renders 1`] = `
<section>
  <h2
    id="content-guidelines"
  >
    Content guidelines
  </h2>
  <div
    className="slab slab-plain px-5"
  >
    <div
      className="w-75 m-auto"
    >
      <Tabs
        id="tabs-scroll-example"
        items={
          Array [
            "Selected Label",
            "Unselected Label",
            "Unselected Label",
          ]
        }
        ulId="tabs-scroll-example-ul"
      />
    </div>
  </div>
  <ul
    className="list list-bullet"
  >
    <li>
      The 
      <b>
        Label
      </b>
       for tabs should state the name of the category and division. This should be short and to the point making is as easy as possible for the user to find their desired category.
    </li>
    <li>
      The 
      <b>
        order of labels
      </b>
       should always be arranged according the content, sorted after relevance. However, in cases where there is not a preferred order, the tabs should be arrange the tabs in alphabetical order instead.
    </li>
  </ul>
</section>
`;

exports[`Components: Tabs DeveloperDocumentation renders 1`] = `
<Fragment>
  <h2
    id="developer-documentation"
  >
    Developer documentation
  </h2>
  <span
    className="h3"
  >
    Javascript methods
  </span>
  <JavascriptDocs
    componentName="tabs"
    others={
      Array [
        [Function],
      ]
    }
  />
</Fragment>
`;

exports[`Components: Tabs Overview renders 1`] = `
<section>
  <h2
    id="overview"
  >
    Overview
  </h2>
  <div
    className="showcase-panel p-5"
  >
    <div
      className="w-75 m-auto"
    >
      <Tabs
        id="tabs-example"
        items={
          Array [
            "Selected",
            "Unselected",
            "Unselected",
          ]
        }
      />
    </div>
  </div>
  <div
    className="component-description border-left border-right p-4 pb-2"
  >
    <span
      className="h3 d-inline-block mb-2"
    >
      Tabs
    </span>
    <p
      className="mb-0"
    >
      The tabs component has three different states, the selected state for the category currently displayed. Unselected state for all the other categories not currently selected and lastly there the hover state when the user hover over an unselected state.
    </p>
  </div>
  <ComponentPreview
    codeFigure={true}
    language="html"
  >
    <Tabs
      id="tabs-example"
      items={
        Array [
          "Selected",
          "Unselected",
          "Unselected",
        ]
      }
    />
  </ComponentPreview>
  <section>
    <h3>
      When to consider something else
    </h3>
    <ul
      className="list list-bullet"
    >
      <li>
        It is important to consider whether or not dividing the content into sub-categories is helpful for the user. Using Tabs isn’t always the best solution and can create more fragmented experience and leading to issues where the user might miss out on content. Similarly, this is also not idea if the user needs to compare the content. In those cases it is better to present the content on a page with proper headlines and structure.
      </li>
    </ul>
  </section>
  <section>
    <h3>
      Scrollable tabs
    </h3>
    <div
      className="slab slab-plain"
    >
      <div
        className="w-75 m-auto"
      >
        <Tabs
          id="tabs-scroll-example"
          items={
            Array [
              "Selected",
              "Unselected",
              "Unselected",
              "Unselected",
              "Unselected",
              "Unselected",
            ]
          }
          scroll={true}
          ulId="tabs-scroll-example-ul"
        />
      </div>
    </div>
    <p>
      The tab component also includes scrollable behaviour with the addition of a clickable chevron arrow when the size of the viewport no longer can display all the tab categories at once. The user can navigate inside the tabs menu.
    </p>
  </section>
  <section
    id="how-to-use-tabs"
  >
    <h3>
      How to use tabs
    </h3>
    <div
      className="slab slab-plain slab-border-success"
    >
      <span
        className="h3"
      >
        Do
      </span>
      <div
        className="px-5 py-3"
      >
        <Tabs
          id="tabs-scroll-example"
          items={
            Array [
              "Selected",
              "Unselected",
              "Unselected",
            ]
          }
          ulId="tabs-scroll-example-ul"
        />
        <div
          className="slab slab-default p-5"
        />
      </div>
    </div>
    <div
      className="slab slab-plain slab-border-error"
    >
      <span
        className="h3"
      >
        Don't
      </span>
      <div
        className="px-5 py-3"
      >
        <Tabs
          id="tabs-scroll-example"
          items={
            Array [
              "Selected",
              "Unselected",
              "Unselected",
            ]
          }
          scroll={true}
          ulId="tabs-scroll-example-ul"
        />
        <div
          className="slab slab-default p-5"
        />
      </div>
    </div>
    <p>
      The tab component should always fill the full container of the content it governs. As seen on the examples above, the length of the underline for tab isn’t determined by the amount of tabs/length of the text. But should instead indicate the content that it anchors to and contains.
    </p>
  </section>
</section>
`;

exports[`Components: Tabs renders 1`] = `
<DocContainer
  docToc={true}
>
  <p
    className="lead"
  >
    Tabs component separates content into groups within a single content, it lets the user navigate and quickly switch between section within the same content.
  </p>
  <Overview />
  <ContentGuidelines />
  <DeveloperDocumentation />
</DocContainer>
`;
