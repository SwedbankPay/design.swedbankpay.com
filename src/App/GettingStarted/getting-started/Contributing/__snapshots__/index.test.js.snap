// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GettingStarted: Contributing Add Component To Routes renders 1`] = `
<Fragment>
  <h2
    id="add-component-to-routes"
  >
    Add component to routes
  </h2>
  <p>
    In 
    <CodeTags
      code="./src/App/routes/docs.js"
      type="secondary"
    />
     under the components object add the following:
  </p>
  <ComponentPreview
    codeFigure={true}
    language="javascript"
  >
    
/**
 * Components
 */
{
    title: "Components",
    path: "/docs/components",
    redirect: "/docs/components/alerts",
    routes: [
        ...
        ...
        // ADD THIS
        {
            title: "My Example Documentation Component",
            path: "/docs/components/my-example-documentation-component",
            componentPath: "components/My-example-documentation-component"
        },
        ...
        ...
    ]
},
            
  </ComponentPreview>
  <p>
    You will now be able to go to the route you provided to preview your component. Run 
    <CodeTags
      code="npm start"
      type="secondary"
    />
     if you haven
    '
    t already done so, and navigate to 
    <CodeTags
      code="localhost:3000/docs/components/my-example-documentation-component"
      type="secondary"
    />
     to see your component in action.
  </p>
</Fragment>
`;

exports[`GettingStarted: Contributing Adding JavaScript renders 1`] = `<h2 />`;

exports[`GettingStarted: Contributing Adding JavaScript renders 2`] = `<p />`;

exports[`GettingStarted: Contributing Adding JavaScript renders 3`] = `
<div>
  <h3>
    Create a script file for your component
  </h3>
  <p>
    Create a new file under 
    <CodeTags
      code="./src/scripts/main/[MyExampleComponent]/"
      type="secondary"
    />
     for your component, name it 
    <CodeTags
      code="index.js"
      type="secondary"
    />
    :
  </p>
  <ComponentPreview
    codeFigure={true}
    language="javascript"
  >
    
const init = () =&gt; {
    alert("MyExampleComponent was initialized");
};
const MyExampleComponent = {
    init
};
export default MyExampleComponent;
                
  </ComponentPreview>
  <p>
    Note: All essential functionality for your component needs to be called within the 
    <CodeTags
      code="init"
      type="secondary"
    />
     method.
  </p>
</div>
`;

exports[`GettingStarted: Contributing Adding JavaScript renders 4`] = `
<div>
  <h3>
    Add your components script to scripts
  </h3>
  <p>
    Open 
    <CodeTags
      code="./src/scripts/main/index.js"
      type="secondary"
    />
     and add your component:
  </p>
  <ComponentPreview
    codeFigure={true}
    language="javascript"
  >
    
...
import MyExampleComponent from "./MyExampleComponent";
...
const dg = {
...
MyExampleComponent,
...
};
...
export { ... MyExampleComponent, ... }
                
  </ComponentPreview>
</div>
`;

exports[`GettingStarted: Contributing Adding JavaScript renders 5`] = `
<div>
  <h2>
    Initializing the script in the documentation
  </h2>
  <p>
    Considering the documentation is built in react your documentation component will load after 
    <CodeTags
      code="scripts"
      type="secondary"
    />
     runs it
    '
    s 
    <CodeTags
      code="initAll"
      type="secondary"
    />
     method, you will need to run your component
    '
    s init method when the component actually renders.
  </p>
  <p>
    You can do this by slightly modifying the 
    <CodeTags
      code="MyExampleDocumentationComponent"
      type="secondary"
    />
    :
  </p>
  <ComponentPreview
    codeFigure={true}
    language="javascript"
  >
    
//example documentation component
// change this line
import React, { Component } from "react";
...
// import your components script
import { MyExampleComponent } from "@src/scripts/main";
...
...
// modify MyExampleDocumentationComponent
class MyExampleDocumentationComponent extends Component {
    componentDidMount () {
        MyExampleComponent.init();
    }
    render() {
        return (
            &lt;DocContainer docToc&gt;
                &lt;p className="lead"&gt;This is the documentation for My Example Component.&lt;/p&gt;
                &lt;h2 id="example-usage"&gt;Example usage&lt;/h2&gt;
                &lt;ComponentPreview language="html" showCasePanel codeFigure&gt;
                    &lt;MyExampleComponent type="dark" title="My Example Component" separator /&gt;
                &lt;/ComponentPreview&gt;
            &lt;/DocContainer&gt;
        )
    }
}
                
  </ComponentPreview>
</div>
`;

exports[`GettingStarted: Contributing Adding JavaScript renders 6`] = `
<div>
  <h2
    id="adding-javascript"
  >
    Adding javascript
  </h2>
  <p>
    If your component needs javascript to run, you will need to add the javascript to the 
    <CodeTags
      code="scripts"
      type="secondary"
    />
  </p>
  <CreateAScriptFile />
  <AddScriptToDG />
  <InitializingTheScript />
</div>
`;

exports[`GettingStarted: Contributing Adding Styles renders 1`] = `<h2 />`;

exports[`GettingStarted: Contributing Adding Styles renders 2`] = `<p />`;

exports[`GettingStarted: Contributing Adding Styles renders 3`] = `
<Fragment>
  <h3>
    Creating variables
  </h3>
  <p>
    To add custom variables to your component modify 
    <CodeTags
      code="./src/less/_variables.less"
      type="secondary"
    />
    , and add a section for your component. Add it alphabetically and update the table of contents.
  </p>
  <p>
    Adding a section should look like this:
  </p>
  <ComponentPreview
    codeFigure={true}
    language="css"
  >
    
// _variables.less
// [number]. My Example Component
// ==========================================================================
@my-example-component-color: @gray-3;
@my-example-component-background: @gray-8;
@my-example-component-padding: 1rem;
@my-example-component-font-family: "Arial";
                
  </ComponentPreview>
</Fragment>
`;

exports[`GettingStarted: Contributing Adding Styles renders 4`] = `<p />`;

exports[`GettingStarted: Contributing Adding Styles renders 5`] = `<p />`;

exports[`GettingStarted: Contributing Adding Styles renders 6`] = `
<div>
  <h2
    id="adding-styles"
  >
    Adding styles
  </h2>
  <p>
    To add styling for your component create a new file in 
    <CodeTags
      code="./src/less/components/"
      type="secondary"
    />
    , name it 
    <CodeTags
      code="my-example-component.less"
      type="secondary"
    />
    .
  </p>
  <CreatingVariables />
  <p>
    The style for 
    <CodeTags
      code="MyExampleComponent"
      type="secondary"
    />
     should now be included properly, and you should see changes immediately while running dev.
  </p>
  <p>
    When writing styles for your component, try to use 
    <CodeTags
      code="rem"
      type="secondary"
    />
     (
    <CodeTags
      code="1rem"
      type="secondary"
    />
     = ~
    <CodeTags
      code="16px"
      type="secondary"
    />
    ) and the predefined variables (only if it makes sense of course) as much as possible. And follow the linting rules set by 
    <CodeTags
      code="./.stylelintrc"
      type="secondary"
    />
    .
  </p>
</div>
`;

exports[`GettingStarted: Contributing Create A Documentation Page renders 1`] = `
<Fragment>
  <h2
    id="create-a-documentation-page"
  >
    Create a documentation page
  </h2>
  <p>
    Create a new file under 
    <CodeTags
      code="./src/App/Documentation/Components/[MyExampleDocumentationComponent]/"
      type="secondary"
    />
     for your component, call it 
    <CodeTags
      code="index.js"
      type="secondary"
    />
    :
  </p>
  <ComponentPreview
    codeFigure={true}
    language="javascript"
  >
    
//example documentation component
import React from "react";
import { ComponentPreview, DocContainer } from "@docutils";
import MyExampleComponent from "@components/MyExampleComponent";
const MyExampleDocumentationComponent = () =&gt; (
    &lt;DocContainer docToc&gt;
        &lt;p className="lead"&gt;This is the documentation for My Example Component.&lt;/p&gt;
        &lt;h2 id="example-usage"&gt;Example usage&lt;/h2&gt;
        &lt;ComponentPreview language="html" showCasePanel codeFigure&gt;
            &lt;MyExampleComponent type="dark" title="My Example Component" separator /&gt;
        &lt;/ComponentPreview&gt;
    &lt;/DocContainer&gt;
);
export default MyExampleDocumentationComponent;
            
  </ComponentPreview>
  <p>
    Use the custom 
    <CodeTags
      code="ComponentPreview"
      type="secondary"
    />
     component to preview your component. It has several props, for this example we are going to be using 
    <CodeTags
      code="language"
      type="secondary"
    />
    , 
    <CodeTags
      code="showCasePanel"
      type="secondary"
    />
     and 
    <CodeTags
      code="codeFigure"
      type="secondary"
    />
    .
  </p>
  <p>
    We are also using the 
    <CodeTags
      code="DocContainer"
      type="secondary"
    />
     component to sentralize the layout of the documentation, pass the 
    <CodeTags
      code="docToc"
      type="secondary"
    />
     prop to add a dynamic table of contents to the documentation of your component. This component scans the provided component for 
    <CodeTags
      code="<h2>"
      type="primary"
    />
    -tags and creates anchors for easier navigation. Just remember to add an id to the 
    <CodeTags
      code="<h2>"
      type="primary"
    />
    -tag.
  </p>
</Fragment>
`;

exports[`GettingStarted: Contributing Creating Your Component renders 1`] = `
<Fragment>
  <h2
    id="creating-your-component"
  >
    Creating your component
  </h2>
  <p>
    Create a new file under 
    <CodeTags
      code="./src/App/components/[MyExampleComponent]/"
      type="secondary"
    />
     for your component, name it 
    <CodeTags
      code="index.js"
      type="secondary"
    />
    :
  </p>
  <ComponentPreview
    codeFigure={true}
    language="javascript"
  >
    
//example component
import React from "react";
import PropTypes from "prop-types";
const MyExampleComponent = ({ type, title, separator }) =&gt; (
    &lt;div className={\`well well-\${type}\`}&gt;
        &lt;h3&gt;{title}&lt;/h3&gt;
        {separator ? &lt;hr /&gt; : null}
        This is my example component in a well.
    &lt;/div&gt;
);
MyExampleComponent.propTypes = {
    type: PropTypes.oneOf(["light", "dark"]).isRequired,
    title: PropTypes.string.isRequired,
    separator: PropTypes.bool
};
export default MyExampleComponent;
            
  </ComponentPreview>
</Fragment>
`;

exports[`GettingStarted: Contributing renders 1`] = `
<DocContainer
  docToc={true}
>
  <p
    className="lead"
  >
    When contributing, it is important to remember that this project supports two brands: 
    <strong>
      Swedbank Pay
    </strong>
     and 
    <strong>
      PayEx
    </strong>
    .
  </p>
  <p>
    Both brands depend on different theme variables, so it is vital to check that the component also works and looks good on the opposite brand of which you are working on.
  </p>
  <CreatingYourComponent />
  <CreateADocumentationPage />
  <AddComponentToRoutes />
  <AddingStyles />
  <AddingJavaScript />
</DocContainer>
`;
