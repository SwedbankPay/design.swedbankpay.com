// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component: InputGroup -  renders 1`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  renders a form-group with a feedback icon if prop feedbackIcon is provided 1`] = `
<InputGroup
  feedbackIcon="testvalue"
  type="typetest"
>
  <div
    className="form-group"
  >
    

    <div
      className="input-group has-feedback"
    >
      

      <input
        autoComplete={null}
        className="form-control"
        data-validate={null}
        defaultValue=""
        disabled={null}
        id={null}
        pattern={null}
        placeholder={null}
        readOnly={null}
        required={null}
        type="typetest"
      />
      

      <Feedback
        icon="testvalue"
      >
        <span
          className="form-control-feedback"
        >
          
		
          <i
            aria-hidden="true"
            className="material-icons"
          >
            testvalue
          </i>
          
	
        </span>
      </Feedback>
       
      

    </div>
  </div>
</InputGroup>
`;

exports[`Component: InputGroup -  renders a form-group with a help block if prop helpBlock is provided 1`] = `
<InputGroup
  helpBlock="testvalue"
  type="typetest"
>
  <div
    className="form-group"
  >
    

    <input
      autoComplete={null}
      className="form-control"
      data-validate={null}
      defaultValue=""
      disabled={null}
      id={null}
      pattern={null}
      placeholder={null}
      readOnly={null}
      required={null}
      type="typetest"
    />
    <div
      className="help-block"
      data-error={null}
      data-success={null}
    >
      testvalue
    </div>
  </div>
</InputGroup>
`;

exports[`Component: InputGroup -  renders a form-group with a help block with data-success and data-error attributes 1`] = `
<InputGroup
  errorMessage="error"
  helpBlock="testvalue"
  successMessage="success"
  type="typetest"
>
  <div
    className="form-group"
  >
    

    <input
      autoComplete={null}
      className="form-control"
      data-validate={null}
      defaultValue=""
      disabled={null}
      id={null}
      pattern={null}
      placeholder={null}
      readOnly={null}
      required={null}
      type="typetest"
    />
    <div
      className="help-block"
      data-error="error"
      data-success="success"
    >
      testvalue
    </div>
  </div>
</InputGroup>
`;

exports[`Component: InputGroup -  renders a form-group with a label if prop label is provided 1`] = `
<div
  className="form-group"
>
  

  <label>
    this is a text in a label
  </label>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  renders a form-group with a postfix if prop postfixValue is provided 1`] = `
<InputGroup
  postfixValue="testvalue"
  type="typetest"
>
  <div
    className="form-group"
  >
    

    <div
      className="input-group"
    >
      

      <input
        autoComplete={null}
        className="form-control"
        data-validate={null}
        defaultValue=""
        disabled={null}
        id={null}
        pattern={null}
        placeholder={null}
        readOnly={null}
        required={null}
        type="typetest"
      />
      

       
      <Addon
        value="testvalue"
      >
        <span
          className="input-group-addon"
        >
          testvalue
        </span>
      </Addon>
      

    </div>
  </div>
</InputGroup>
`;

exports[`Component: InputGroup -  renders a form-group with a prefix button if prop prefixValue is provided 1`] = `
<InputGroup
  prefixBtnColor="primary"
  prefixType="button"
  prefixValue="button text"
  type="typetest"
>
  <div
    className="form-group"
  >
    

    <div
      className="input-group"
    >
      

      <Addon
        color="primary"
        type="button"
        value="button text"
      >
        <button
          className="btn btn-primary"
          type="button"
        >
          button text
        </button>
      </Addon>
      

      <input
        autoComplete={null}
        className="form-control"
        data-validate={null}
        defaultValue=""
        disabled={null}
        id={null}
        pattern={null}
        placeholder={null}
        readOnly={null}
        required={null}
        type="typetest"
      />
      

       
    </div>
  </div>
</InputGroup>
`;

exports[`Component: InputGroup -  renders a form-group with a prefix icon if prop prefixValue equals icon 1`] = `
<InputGroup
  prefixType="icon"
  prefixValue="home"
  type="typetest"
>
  <div
    className="form-group"
  >
    

    <div
      className="input-group"
    >
      

      <Addon
        type="icon"
        value="home"
      >
        <span
          className="input-group-addon"
        >
          <i
            aria-hidden="true"
            className="material-icons"
          >
            home
          </i>
        </span>
      </Addon>
      

      <input
        autoComplete={null}
        className="form-control"
        data-validate={null}
        defaultValue=""
        disabled={null}
        id={null}
        pattern={null}
        placeholder={null}
        readOnly={null}
        required={null}
        type="typetest"
      />
      

       
    </div>
  </div>
</InputGroup>
`;

exports[`Component: InputGroup -  renders a form-group with a prefix label if prop prefixValue is provided and no prefixType is given 1`] = `
<InputGroup
  prefixValue="label text"
  type="typetest"
>
  <div
    className="form-group"
  >
    

    <div
      className="input-group"
    >
      

      <Addon
        value="label text"
      >
        <span
          className="input-group-addon"
        >
          label text
        </span>
      </Addon>
      

      <input
        autoComplete={null}
        className="form-control"
        data-validate={null}
        defaultValue=""
        disabled={null}
        id={null}
        pattern={null}
        placeholder={null}
        readOnly={null}
        required={null}
        type="typetest"
      />
      

       
    </div>
  </div>
</InputGroup>
`;

exports[`Component: InputGroup -  renders a form-group with a select field with given values if type equals select 1`] = `
<InputGroup
  selectOptions={
    Array [
      "Bounty hunter",
      "Smuggler",
      "Jedi",
    ]
  }
  type="select"
>
  <div
    className="form-group"
  >
    

    <select
      className="form-control"
    >
      
		
      <option>
        Bounty hunter
      </option>
      
		
      <option>
        Smuggler
      </option>
      
		
      <option>
        Jedi
      </option>
      
	
    </select>
  </div>
</InputGroup>
`;

exports[`Component: InputGroup -  renders a form-group with a text-area if type equals textarea 1`] = `
<InputGroup
  type="textarea"
>
  <div
    className="form-group"
  >
    

    <textarea
      autoComplete={null}
      className="form-control"
      data-validate={null}
      defaultValue=""
      disabled={null}
      id={null}
      pattern={null}
      placeholder={null}
      readOnly={null}
      required={null}
      type="textarea"
    />
  </div>
</InputGroup>
`;

exports[`Component: InputGroup -  throws an error if postfixBtnColor prop has an invalid value 1`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if postfixBtnColor prop has an invalid value 2`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if postfixBtnColor prop has an invalid value 3`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if postfixBtnColor prop has an invalid value 4`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if postfixType prop has an invalid value 1`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if postfixType prop has an invalid value 2`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if postfixType prop has an invalid value 3`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if postfixType prop has an invalid value 4`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if postfixType prop has an invalid value 5`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if prefixBtnColor prop has an invalid value 1`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if prefixBtnColor prop has an invalid value 2`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if prefixBtnColor prop has an invalid value 3`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if prefixBtnColor prop has an invalid value 4`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if prefixType prop has an invalid value 1`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if prefixType prop has an invalid value 2`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if prefixType prop has an invalid value 3`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if prefixType prop has an invalid value 4`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if prefixType prop has an invalid value 5`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if type prop is not provided 1`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type={null}
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if validationState prop has an invalid value 1`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if validationState prop has an invalid value 2`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if validationState prop has an invalid value 3`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if validationState prop has an invalid value 4`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;

exports[`Component: InputGroup -  throws an error if validationState prop has an invalid value 5`] = `
<div
  className="form-group"
>
  

  <input
    autoComplete={null}
    className="form-control"
    data-validate={null}
    defaultValue=""
    disabled={null}
    id={null}
    pattern={null}
    placeholder={null}
    readOnly={null}
    required={null}
    type="typetest"
  />
</div>
`;
