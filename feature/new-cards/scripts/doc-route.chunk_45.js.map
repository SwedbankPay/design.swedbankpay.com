{"version":3,"sources":["webpack:///./src/App/components/Chart/index.js","webpack:///./src/App/Examples/examples/customers/CustomersDetailed/components/CustomersDetailedCharts/index.js"],"names":["Chart","Component","_this$props","this","props","id","options","colorPool","dg","chart","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","propTypes","PropTypes","string","isRequired","object","arrayOf","CustomersDetailedCharts","_ref","customerIdName","customerOrders","customerInquiries","createNumArray","datasetDataLength","length","totalNumMessages","reduce","accumulator","inquiry","numMessages","Fragment","_components_Chart__WEBPACK_IMPORTED_MODULE_2__","type","data","labels","_toConsumableArray","Array","keys","map","i","toString","datasets","label","fill","scales","yAxes","scaleLabel","display","labelString","date","ticks","beginAtZero","className","filter","resolved","Math","floor","number","exact","bool","message"],"mappings":"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","file":"scripts/doc-route.chunk_45.js?cd68b8dad3c92dfd1fa3","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Chart extends Component {\n    componentDidMount () {\n        const { id, options, colorPool } = this.props;\n\n        dg.chart(id, options, colorPool);\n    }\n\n    render () {\n        return (\n            <canvas id={this.props.id} />\n        );\n    }\n}\n\nChart.propTypes = {\n    id: PropTypes.string.isRequired,\n    options: PropTypes.object.isRequired,\n    colorPool: PropTypes.arrayOf(PropTypes.string)\n};\n\nexport default Chart;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Chart from \"@components/Chart\";\n\nconst CustomersDetailedCharts = ({ customerIdName, customerOrders, customerInquiries, createNumArray }) => {\n    const datasetDataLength = customerOrders.length;\n    const totalNumMessages = customerInquiries.reduce((accumulator, inquiry) => accumulator + inquiry.numMessages, 0);\n\n    return (\n        <>\n            <h3>Orders</h3>\n            <h4>Historical purchase prices</h4>\n            <Chart\n                id=\"customers-detailed-charts-1\"\n                options={{\n                    type: \"bar\",\n                    data: {\n                        labels: [...Array(datasetDataLength).keys()].map(i => (2019 - (datasetDataLength - 1) + i).toString()),\n                        datasets: [\n                            {\n                                label: customerIdName,\n                                data: customerOrders,\n                                fill: false\n                            },\n                            {\n                                label: \"Customers average\",\n                                data: createNumArray(datasetDataLength, 1000, 200),\n                                fill: false\n                            },\n                            {\n                                label: \"Estimated\",\n                                data: createNumArray(datasetDataLength, 850, 200),\n                                fill: false\n                            }\n                        ]\n                    },\n                    options: {\n                        scales: {\n                            yAxes: [{\n                                scaleLabel: {\n                                    display: true,\n                                    labelString: \"British Pound (Â£)\"\n                                }\n                            }]\n                        }\n                    }\n                }}\n            />\n\n            <h3>Inquiries</h3>\n            <h4>Number of inquiry messages</h4>\n            <Chart\n                id=\"customers-detailed-charts-2\"\n                options={{\n                    type: \"line\",\n                    data: {\n                        labels: customerInquiries.map(inquiry => inquiry.date),\n                        datasets: [\n                            {\n                                label: customerIdName,\n                                data: customerInquiries.map(inquiry => inquiry.numMessages),\n                                fill: false\n                            },\n                            {\n                                label: \"Customers average\",\n                                data: createNumArray(customerInquiries.length, 3, 4), // The multiple Math.floor(Math.random) is there to achieve a less random looking distribution\n                                fill: false\n                            }\n                        ]\n                    },\n                    options: {\n                        scales: {\n                            yAxes: [{\n                                ticks: {\n                                    beginAtZero: true\n                                }\n                            }]\n                        }\n                    }\n                }}\n            />\n            <div className=\"row\">\n                <div className=\"col-lg-6\">\n                    <h4>Status distribution</h4>\n                    <Chart id=\"customers-detailed-charts-3\"\n                        options={{\n                            type: \"pie\",\n                            data: {\n                                labels: [\"Resolved\", \"Unresolved\", \"Unknown\"],\n                                datasets: [\n                                    {\n                                        data: [customerInquiries.filter(inquiry => inquiry.resolved).length, customerInquiries.filter(inquiry => !inquiry.resolved).length, 1]\n                                    }\n                                ]\n                            }\n                        }}\n                    />\n                </div>\n                <div className=\"col-lg-6\">\n                    <h4>Time before response</h4>\n                    <Chart id=\"customers-detailed-charts-4\"\n                        options={{\n                            type: \"pie\",\n                            data: {\n                                labels: [\"< 2 days\", \"< 1 week\", \"< 1 month\", \"< 3 months\", \"Other\"],\n                                datasets: [\n                                    {\n                                        data: [\n                                            Math.floor(totalNumMessages * 0.4),\n                                            Math.floor(totalNumMessages * 0.3),\n                                            Math.floor(totalNumMessages * 0.15),\n                                            Math.floor(totalNumMessages * 0.1),\n                                            Math.floor(totalNumMessages * 0.05)\n                                        ]\n                                    }\n                                ]\n                            }\n                        }}\n                    />\n                </div>\n            </div>\n\n        </>\n    );\n};\n\nCustomersDetailedCharts.propTypes = {\n    customerIdName: PropTypes.string.isRequired,\n    customerOrders: PropTypes.arrayOf(PropTypes.number).isRequired,\n    customerInquiries: PropTypes.arrayOf(PropTypes.exact({\n        id: PropTypes.string.isRequired,\n        date: PropTypes.string.isRequired,\n        numMessages: PropTypes.number.isRequired,\n        resolved: PropTypes.bool.isRequired,\n        message: PropTypes.string.isRequired\n    })).isRequired\n};\n\nexport default CustomersDetailedCharts;\n"],"sourceRoot":""}