{"version":3,"sources":["webpack:///./src/App/ComponentsDocumentation/components/Toast/index.js"],"names":["Overview","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","Fragment","id","_docutils__WEBPACK_IMPORTED_MODULE_2__","language","codeFigure","dangerousHTML","showCasePanel","className","type","onClick","dg","toast","html","_components_Alert__WEBPACK_IMPORTED_MODULE_3__","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","to","Options","_components_CodeTags__WEBPACK_IMPORTED_MODULE_4__","code","PremadeToasts","CustomHtml","Toast","Component"],"mappings":"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","file":"scripts/doc-route.chunk_36.js?683197078bf22ec79cba","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ComponentPreview, DocContainer } from \"@docutils\";\nimport Alert from \"@components/Alert\";\nimport CodeTags from \"@components/CodeTags\";\n\nconst Overview = () => (\n    <>\n        <h2 id=\"overview\">Overview</h2>\n        <p>You want jam on that toast?</p>\n        <ComponentPreview language=\"javascript\" codeFigure>\n            {\"dg.toast({ html: \\\"I am a toast!\\\" });\"}\n        </ComponentPreview>\n        <ComponentPreview language=\"html\" codeFigure dangerousHTML>\n            {\"<button onclick=\\\"dg.toast({ html: 'I am a toast!' })\\\" class=\\\"btn btn-primary\\\">Toast!</button>\"}\n        </ComponentPreview>\n        <ComponentPreview language=\"html\" showCasePanel>\n            <button className=\"btn btn-primary\" type=\"button\" onClick={() => dg.toast({ html: \"I am a toast!\" })}>Click for toast!</button>\n        </ComponentPreview>\n        <Alert type=\"warning\">\n            <h5>Content restriction</h5>\n            <p>\n                Donâ€™t put too much text in toasts as they are meant to be visible for only a short amount of time.\n                Due to the time restriction you should also avoid putting vital information in them.\n                A <Link to=\"/components/sheet\">sheet</Link> or <Link to=\"/components/dialog\">dialog</Link> is\n                recommended when recieving input or relaying large amounts of information.\n            </p>\n        </Alert>\n    </>\n);\n\nconst Options = () => (\n    <>\n        <h2 id=\"options\">Options</h2>\n        <table className=\"table table-striped\">\n            <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>Type</th>\n                    <th>Default</th>\n                    <th>Description</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>html</td>\n                    <td>String</td>\n                    <td><CodeTags type=\"secondary\" code={\"\\\"\\\"\"} /></td>\n                    <td>The HTML content of the Toast.</td>\n                </tr>\n                <tr>\n                    <td>type</td>\n                    <td>String</td>\n                    <td><CodeTags type=\"secondary\" code={\"\\\"\\\"\"} /></td>\n                    <td>Premade alert types; <CodeTags type=\"secondary\" code=\"success\" />, <CodeTags type=\"secondary\" code=\"neutral\" />, <CodeTags type=\"secondary\" code=\"warning\" /> and <CodeTags type=\"secondary\" code=\"danger\" /> are available.</td>\n                </tr>\n                <tr>\n                    <td>dismissable</td>\n                    <td>Boolean</td>\n                    <td><CodeTags type=\"secondary\" code=\"true\" /></td>\n                    <td>Wether or not the alert should be dismissable by the user (close button).</td>\n                </tr>\n                <tr>\n                    <td>icon</td>\n                    <td>String</td>\n                    <td><CodeTags type=\"secondary\" code={\"\\\"\\\"\"} /></td>\n                    <td>Custom icon for the toast. See <Link to=\"/core/iconography\">icons</Link> for more info.</td>\n                </tr>\n                <tr>\n                    <td>displayLength</td>\n                    <td>Number</td>\n                    <td><CodeTags type=\"secondary\" code=\"4000\" /></td>\n                    <td>Length in ms the Toast stays before dismissal.</td>\n                </tr>\n                <tr>\n                    <td>classes</td>\n                    <td>Array of strings</td>\n                    <td><CodeTags type=\"secondary\" code=\"[]\" /></td>\n                    <td>Classes to be added to the toast element.</td>\n                </tr>\n                <tr>\n                    <td>completeCallback</td>\n                    <td>Function</td>\n                    <td><CodeTags type=\"secondary\" code=\"null\" /></td>\n                    <td>Callback function called when toast is dismissed.</td>\n                </tr>\n            </tbody>\n        </table>\n    </>\n);\n\nconst PremadeToasts = () => (\n    <>\n        <h2 id=\"premade-toasts\">Premade toasts</h2>\n        <p>There are four premade toast styles other than the default one; <CodeTags type=\"secondary\" code=\"neutral\" />, <CodeTags type=\"secondary\" code=\"success\" />, <CodeTags type=\"secondary\" code=\"warning\" /> and <CodeTags type=\"secondary\" code=\"danger\" />. Apply the desired one to the options object and be amazed!</p>\n        <ComponentPreview language=\"html\" codeFigure dangerousHTML>\n            {\"<button type=\\\"button\\\" onclick=\\\"dg.toast({ html: 'I am a neutral toast!', type: 'neutral' })\\\" class=\\\"btn btn-primary\\\">Neutral toast</button>\"}\n            {\"<button type=\\\"button\\\" onclick=\\\"dg.toast({ html: 'I am a success toast!', type: 'success' })\\\" class=\\\"btn btn-primary\\\">Success toast</button>\"}\n            {\"<button type=\\\"button\\\" onclick=\\\"dg.toast({ html: 'I am a warning toast!', type: 'warning' })\\\" class=\\\"btn btn-primary\\\">Warning toast</button>\"}\n            {\"<button type=\\\"button\\\" onclick=\\\"dg.toast({ html: 'I am a danger toast!', type: 'danger' })\\\" class=\\\"btn btn-primary\\\">Danger toast</button>\"}\n        </ComponentPreview>\n        <ComponentPreview language=\"html\" showCasePanel>\n            <button\n                className=\"btn btn-primary\"\n                type=\"button\"\n                onClick={() => dg.toast({\n                    html: \"I am a toast!\",\n                    type: \"neutral\"\n                })}\n            >\n                Neutral toast\n            </button>{\"\\n\"}\n            <button\n                className=\"btn btn-primary\"\n                type=\"button\"\n                onClick={() => dg.toast({\n                    html: \"I am a toast!\",\n                    type: \"success\"\n                })}\n            >\n                Success toast\n            </button>{\"\\n\"}\n            <button\n                className=\"btn btn-primary\"\n                type=\"button\"\n                onClick={() => dg.toast({\n                    html: \"I am a toast!\",\n                    type: \"warning\"\n                })}\n            >\n                Warning toast\n            </button>{\"\\n\"}\n            <button\n                className=\"btn btn-primary\"\n                type=\"button\"\n                onClick={() => dg.toast({\n                    html: \"I am a toast!\",\n                    type: \"danger\"\n                })}\n            >\n                Danger toast\n            </button>\n        </ComponentPreview>\n    </>\n);\n\nconst CustomHtml = () => {\n    const toastHtml = \"<span><p>I am toast content.</p><p>You can put me on several lines.</p></span><button class=\\\"btn toast-action\\\">Undo</button>\";\n\n    return (\n        <>\n            <h2 id=\"custom-html\">Custom HTML</h2>\n            <p>You can pass in an HTML String as the first argument as well. Take a look at the example below, where we pass in text as well as a flat button. If you call an external function instead of in-line JavaScript, you will not need to escape quotation marks.</p>\n            <ComponentPreview language=\"javascript\" codeFigure>\n                {\"const toastHtml = \\\"<span><p>I am toast content.</p><p>You can put me on several lines.</p></span><button class='btn toast-action'>Undo</button>\\\";\"}{\"\\n\"}\n                {\"dg.toast({ html: toastHtml });\"}\n            </ComponentPreview>\n            <ComponentPreview language=\"html\" showCasePanel>\n                <button className=\"btn btn-primary\" type=\"button\" onClick={() => dg.toast({ html: toastHtml })}>Toast with action</button>\n            </ComponentPreview>\n        </>\n    );\n};\n\nclass Toast extends Component {\n    render () {\n        return (\n            <DocContainer>\n                <p className=\"lead\">\n                    Toasts can be used as a way to give feedback to a user. Use it to display short messages that something has happened that will not be immediately apparent on the website.\n                    This can be everything from a server query to saving some user settings.\n                </p>\n                <Overview />\n                <Options />\n                <PremadeToasts />\n                <CustomHtml />\n            </DocContainer>\n        );\n    }\n}\n\nexport default Toast;\n\n/* For testing */\nexport { Overview, Options, PremadeToasts, CustomHtml };\n"],"sourceRoot":""}