{"version":3,"sources":["webpack://design.swedbankpay.com/./src/App/ComponentsDocumentation/components/Charts/Introduction/index.js","webpack://design.swedbankpay.com/./src/App/ComponentsDocumentation/components/Charts/index.js","webpack://design.swedbankpay.com/./src/App/components/Chart/index.js"],"names":["BASENAME","process","brand","scriptUrl","dashboardScriptUrl","styleUrl","dashboardStyleUrl","QuickStart","id","Css","type","code","ComponentPreview","language","codeFigure","rel","href","JavaScript","src","className","target","LineChart","showCasePanel","options","data","labels","datasets","label","steppedLine","borderDash","scales","yAxes","scaleLabel","display","labelString","ticks","callback","value","fill","BarChart","beginAtZero","stacked","xAxes","DoughnutAndPieCharts","MixingTypes","CustomColors","colorPool","Charts","DocContainer","docToc","Component","Chart","this","props","dg","chart","propTypes","PropTypes"],"mappings":"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","file":"scripts/doc-route.chunk_10.5e95f57f1a18aa20cdb1.js","sourcesContent":["import React from \"react\";\n\nimport { ComponentPreview } from \"@docutils\";\nimport CodeTags from \"@components/CodeTags\";\n\nconst BASENAME = process.env.basename;\nconst brand = process.env.brand;\nconst scriptUrl = `https://design.${brand}.com${BASENAME}scripts/dg.js`;\nconst dashboardScriptUrl = `https://design.${brand}.com${BASENAME}scripts/dg-dashboard.js`;\nconst styleUrl = `https://design.${brand}.com${BASENAME}styles/dg-style.css`;\nconst dashboardStyleUrl = `https://design.${brand}.com${BASENAME}styles/dg-dashboard.css`;\n\nconst QuickStart = () => (\n    <>\n        <h3 id=\"quick-start\">Quick start</h3>\n        <p>To quickly add the dashboard theme to your project, include the snippets below in your project.</p>\n    </>\n);\n\nconst Css = () => (\n    <>\n        <h2 id=\"css\">CSS</h2>\n        <p>Copy-paste the stylesheet <CodeTags type=\"primary\" code={\"<link>\"} /> into your <CodeTags type=\"primary\" code={\"<head>\"} /> before all other stylesheets to load our CSS.</p>\n        <ComponentPreview language=\"html\" codeFigure>\n            <link rel=\"stylesheet\" href={styleUrl} />\n            <link rel=\"stylesheet\" href={dashboardStyleUrl} />\n        </ComponentPreview>\n    </>\n);\n\nconst JavaScript = () => (\n    <>\n        <h2 id=\"javascript\">JavaScript</h2>\n        <p>The dashboard theme requires a separate script to run properly. So add the dashboard script below the <CodeTags type=\"secondary\" code=\"scripts\" /> at the bottom\n        of your <CodeTags type=\"primary\" code={\"<body>\"} /> tag like this:</p>\n        <ComponentPreview language=\"html\" codeFigure>\n            <script src={scriptUrl}></script>\n            <script src={dashboardScriptUrl}></script>\n        </ComponentPreview>\n    </>\n);\n\nconst Introduction = () => (\n    <>\n        <h2 id=\"introduction\">Introduction</h2>\n        <p className=\"lead\">\n            We are using <a href=\"https://www.chartjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">chart.js</a> to generate the charts.\n            Our script is mainly just a wrapper around that library to add the correct styling etc.\n        </p>\n        <p>Most options and settings available in the chart.js documentation will be available.</p>\n        <p>For now, the following chart types are available:</p>\n        <ul>\n            <li><CodeTags type=\"secondary\" code={\"\\\"line\\\"\"} /></li>\n            <li><CodeTags type=\"secondary\" code={\"\\\"bar\\\"/\\\"horizontalBar\\\"\"} /></li>\n            <li><CodeTags type=\"secondary\" code={\"\\\"pie\\\"/\\\"doughnut\\\"\"} /></li>\n        </ul>\n        <QuickStart />\n        {/* <Css /> */}\n        <JavaScript />\n    </>\n);\n\nexport default Introduction;\n\n/* For testing */\nexport { QuickStart, Css, JavaScript };\n","import React, { Component } from \"react\";\n\nimport { ComponentPreview, DocContainer } from \"@docutils\";\nimport Chart from \"@components/Chart\";\nimport CodeTags from \"@components/CodeTags\";\nimport Introduction from \"./Introduction\";\n\nconst LineChart = () => (\n    <>\n        <h2 id=\"line-chart\">Line chart</h2>\n        <p className=\"lead\">If Johnny Cash could, then you too should be able to...</p>\n        <p>A line chart is a way of plotting data points on a line. Often, it is used to show trend data, or the comparison of two data sets.</p>\n        <p>See <a href=\"https://www.chartjs.org/docs/latest/charts/line.html\" target=\"_blank\" rel=\"noopener noreferrer\">chart.js</a> for more information on line charts.</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"simple-line-chart\" options={{\n                type: \"line\",\n                data: {\n                    labels: [\"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"],\n                    datasets: [\n                        {\n                            label: \"Peak\",\n                            data: [261, 673, 962, 1067, 1007, 779]\n                        }\n                    ]\n                }\n            }} />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"simple-line-chart\", {\n    type: \"line\",\n    data: {\n        labels: [\"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"],\n        datasets: [\n            {\n                label: \"Peak\",\n                data: [261, 673, 962, 1067, 1007, 779]\n            }\n        ]\n    }\n});\n                `}\n        </ComponentPreview>\n\n        <h3>Stepped and dashed line</h3>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"stepped-dashed-line-chart\" options={{\n                type: \"line\",\n                data: {\n                    labels: [\"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"],\n                    datasets: [\n                        {\n                            label: \"Active users\",\n                            data: [1815, 1958, 2080, 2210, 2341, 2471, 2600, 2725],\n                            steppedLine: true\n                        },\n                        {\n                            label: \"Registered users\",\n                            data: [2196, 2327, 2421, 2573, 2644, 2767, 2913, 3004],\n                            borderDash: [15, 5]\n                        }\n                    ]\n                }\n            }} />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"stepped-dashed-line-chart\", {\n    type: \"line\",\n    data: {\n        labels: [\"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"],\n        datasets: [\n            {\n                label: \"Active users\",\n                data: [1815, 1958, 2080, 2210, 2341, 2471, 2600, 2725],\n                steppedLine: true\n            },\n            {\n                label: \"Registered users\",\n                data: [2196, 2327, 2421, 2573, 2644, 2767, 2913, 3004],\n                borderDash: [15, 5]\n            }\n        ]\n    }\n});\n                `}\n        </ComponentPreview>\n\n        <h3>Advanced options</h3>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"advanced-line-chart\" options={{\n                type: \"line\",\n                data: {\n                    labels: [\"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"],\n                    datasets: [\n                        {\n                            label: \"DotA2 TI Prize Pool\",\n                            data: [1.6, 1.6, 2.87, 10.92, 18.42, 20.77, 24.78, 25.53]\n                        },\n                        {\n                            label: \"LoL World Championship Prize Pool\",\n                            data: [0.1, 2, 2.05, 2.13, 2.13, 5.07, 4.94, 2.25]\n                        }\n                    ]\n                },\n                options: {\n                    scales: {\n                        yAxes: [{\n                            scaleLabel: {\n                                display: true,\n                                labelString: \"In millions\"\n                            },\n                            ticks: {\n                                callback: value => `$${value}`\n                            }\n                        }]\n                    }\n                }\n            }} />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"advanced-line-chart\", {\n    type: \"line\",\n    data: {\n        labels: [\"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"],\n        datasets: [\n            {\n                label: \"DotA2 TI Prize Pool\",\n                data: [1.6, 1.6, 2.87, 10.92, 18.42, 20.77, 24.78, 25.53]\n            },\n            {\n                label: \"LoL World Championship Prize Pool\",\n                data: [0.1, 2, 2.05, 2.13, 2.13, 5.07, 4.94, 2.25]\n            }\n        ]\n    },\n    options: {\n        scales: {\n            yAxes: [{\n                scaleLabel: {\n                    display: true,\n                    labelString: \"In millions\"\n                },\n                ticks: {\n                    callback: value => \\`$\\${value}\\`\n                }\n            }]\n        }\n    }\n});\n                `}\n        </ComponentPreview>\n\n        <h3>With fill</h3>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"line-fill-chart\" options={{\n                type: \"line-fill\",\n                data: {\n                    labels: [\"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"],\n                    datasets: [\n                        {\n                            label: \"Peak\",\n                            data: [261, 673, 962, 1067, 1007, 779],\n                            fill: true\n                        }\n                    ]\n                }\n            }} />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"line-fill-chart\", {\n    type: \"line-fill\",\n    data: {\n        labels: [\"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"],\n        datasets: [\n            {\n                label: \"Peak\",\n                data: [261, 673, 962, 1067, 1007, 779],\n                fill: true\n            }\n        ]\n    }\n});\n                `}\n        </ComponentPreview>\n    </>\n);\n\nconst BarChart = () => (\n    <>\n        <h2 id=\"bar-chart\">Bar chart</h2>\n        <p className=\"lead\">A priest and a rabbi walked into a bar...</p>\n        <p>A bar chart provides a way of showing data values represented as vertical bars. It is sometimes used to show trend data, and the comparison of multiple data sets side by side.</p>\n        <p>See <a href=\"https://www.chartjs.org/docs/latest/charts/bar.html\" target=\"_blank\" rel=\"noopener noreferrer\">chart.js</a> for more information on bar charts.</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"simple-bar-chart\" options={{\n                type: \"bar\",\n                data: {\n                    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n                    datasets: [\n                        {\n                            label: \"Hours of daylight\",\n                            data: [6.75, 9.25, 11.75, 14.5, 17, 18.75, 18, 15.5, 13, 10.25, 7.5, 6]\n                        }\n                    ]\n                },\n                options: {\n                    scales: {\n                        yAxes: [{\n                            ticks: {\n                                beginAtZero: true\n                            }\n                        }]\n                    }\n                }\n            }} />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"simple-bar-chart\", {\n    type: \"bar\",\n    data: {\n        labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n        datasets: [\n            {\n                label: \"Hours of daylight\",\n                data: [6.75, 9.25, 11.75, 14.5, 17, 18.75, 18, 15.5, 13, 10.25, 7.5, 6]\n            }\n        ]\n    },\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    beginAtZero: true\n                }\n            }]\n        }\n    }\n});\n        `}\n        </ComponentPreview>\n\n        <h3>Multiple datasets</h3>\n        <p>You can add multiple datasets</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"multi-bar-chart\" options={{\n                type: \"bar\",\n                data: {\n                    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n                    datasets: [\n                        {\n                            label: \"Hours of daylight\",\n                            data: [6.75, 9.25, 11.75, 14.5, 17, 18.75, 18, 15.5, 13, 10.25, 7.5, 6]\n                        },\n                        {\n                            label: \"Total rain (in cm)\",\n                            data: [4.9, 3.6, 4.7, 4.1, 5.3, 6.5, 8.1, 8.9, 9, 8.4, 7.3, 5.5]\n                        },\n                        {\n                            label: \"Average temperature (in celcius)\",\n                            data: [-1.7, -4.1, -2.3, 6.5, 16.1, 17.9, 22.2, 16.3, 12.5, 7.4, 1.6, -1.5]\n                        }\n                    ]\n                },\n                options: {\n                    scales: {\n                        yAxes: [{\n                            ticks: {\n                                beginAtZero: true\n                            }\n                        }]\n                    }\n                }\n            }} />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"multi-bar-chart\", {\n    type: \"bar\",\n    data: {\n        labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n        datasets: [\n            {\n                label: \"Hours of daylight\",\n                data: [6.75, 9.25, 11.75, 14.5, 17, 18.75, 18, 15.5, 13, 10.25, 7.5, 6]\n            },\n            {\n                label: \"Total rain (in cm)\",\n                data: [4.9, 3.6, 4.7, 4.1, 5.3, 6.5, 8.1, 8.9, 9, 8.4, 7.3, 5.5]\n            },\n            {\n                label: \"Average temperature (in celcius)\",\n                data: [-1.7, -4.1, -2.3, 6.5, 16.1, 17.9, 22.2, 16.3, 12.5, 7.4, 1.6, -1.5]\n            }\n        ]\n    },\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    beginAtZero: true\n                }\n            }]\n        }\n    }\n});\n            `}\n        </ComponentPreview>\n\n        <h3>Stacked bar</h3>\n        <p className=\"lead\">You can stack, because a stacked bar is almost as good as a stocked one</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"stacked-multi-bar-chart\" options={{\n                type: \"bar\",\n                data: {\n                    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n                    datasets: [\n                        {\n                            label: \"Paid with cash\",\n                            data: [19, 23, 29, 24, 28, 33, 21, 24, 20, 17, 23, 24]\n                        },\n                        {\n                            label: \"Paid with credit card\",\n                            data: [31, 29, 32, 17, 25, 32, 28, 30, 24, 22, 20, 37]\n                        },\n                        {\n                            label: \"Paid with Vipps\",\n                            data: [11, 9, 7, 12, 4, 13, 8, 10, 4, 1, 13, 16]\n                        }\n                    ]\n                },\n                options: {\n                    scales: {\n                        yAxes: [{\n                            stacked: true,\n                            ticks: {\n                                beginAtZero: true\n                            }\n                        }],\n                        xAxes: [{\n                            stacked: true\n                        }]\n                    }\n                }\n            }} />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"stacked-multi-bar-chart\", {\n    type: \"bar\",\n    data: {\n        labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n        datasets: [\n            {\n                label: \"Paid with cash\",\n                data: [19, 23, 29, 24, 28, 33, 21, 24, 20, 17, 23, 24]\n            },\n            {\n                label: \"Paid with credit card\",\n                data: [31, 29, 32, 17, 25, 32, 28, 30, 24, 22, 20, 37]\n            },\n            {\n                label: \"Paid with Vipps\",\n                data: [11, 9, 7, 12, 4, 13, 8, 10, 4, 1, 13, 16]\n            }\n        ]\n    },\n    options: {\n        scales: {\n            yAxes: [{\n                stacked: true,\n                ticks: {\n                    beginAtZero: true\n                }\n            }],\n            xAxes: [{\n                stacked: true\n            }]\n        }\n    }\n});\n                `}\n        </ComponentPreview>\n    </>\n);\n\nconst DoughnutAndPieCharts = () => (\n    <>\n        <h2 id=\"doughnut-and-pie-charts\">Doughnut and Pie charts</h2>\n        <p className=\"lead\">Stress cannot exist in the presence of pie...</p>\n        <p>Pie and doughnut charts are probably the most commonly used charts. They are divided into segments, the arc of each segment shows the proportional value of each piece of data.</p>\n        <p>See <a href=\"https://www.chartjs.org/docs/latest/charts/doughnut.html\" target=\"_blank\" rel=\"noopener noreferrer\">chart.js</a> for more information on doughnut and pie charts.</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"simple-pie-chart\" options={{\n                type: \"pie\",\n                data: {\n                    labels: [\"Chrome\", \"Internet Explorer\", \"Firefox\", \"Edge\", \"Safari\", \"Opera\", \"Other\"],\n                    datasets: [\n                        {\n                            data: [63.14, 11.43, 10.23, 4.34, 3.83, 1.56, 4.19]\n                        }\n                    ]\n                }\n            }} />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"simple-pie-chart\", {\n    type: \"pie\",\n    data: {\n        labels: [\"Chrome\", \"Internet Explorer\", \"Firefox\", \"Edge\", \"Safari\", \"Opera\", \"Other\"],\n        datasets: [\n            {\n                data: [63.14, 11.43, 10.23, 4.34, 3.83, 1.56, 4.19]\n            }\n        ]\n    }\n});\n            `}\n        </ComponentPreview>\n\n        <h2>Doughnut</h2>\n        <p className=\"lead\">Did anyone say <code className=\"token string\">doughnut</code>?</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"doughnut-chart\" options={{\n                type: \"doughnut\",\n                data: {\n                    labels: [\"PC and Mac\", \"Smartphones and Tablets\", \"PS4/PRO\", \"VR Headsets\", \"Xbox one/Scorpio\", \"Web Browsers\", \"Linux\", \"Nintendo Switch\", \"Other\"],\n                    datasets: [\n                        {\n                            data: [53, 38, 27, 24, 22, 13, 7, 3, 9]\n                        }\n                    ]\n                }\n            }} />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"doughnut-chart\", {\n    type: \"doughnut\",\n    data: {\n        labels: [\"Chrome\", \"Internet Explorer\", \"Firefox\", \"Edge\", \"Safari\", \"Opera\", \"Other\"],\n        datasets: [\n            {\n                data: [63.14, 11.43, 10.23, 4.34, 3.83, 1.56, 4.19]\n            }\n        ]\n    }\n});\n        `}\n        </ComponentPreview>\n    </>\n);\n\nconst MixingTypes = () => (\n    <>\n        <h2 id=\"mixing-types\">Mixing types</h2>\n        <p className=\"lead\">With Chart.js, it is possible to create <a href=\"https://www.chartjs.org/docs/latest/charts/mixed.html\" target=\"_blank\" rel=\"noopener noreferrer\">mixed charts</a> that are a combination of two or more different chart types. A common example is a bar chart that also includes a line dataset.</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"mixed-chart\" options={{\n                type: \"bar\",\n                data: {\n                    labels: [\"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"],\n                    datasets: [\n                        {\n                            label: \"Growth\",\n                            data: [20, 25, 30]\n                        },\n                        {\n                            label: \"Expected Growth\",\n                            data: [20, 25, 30, 35, 40, 45],\n                            type: \"line\"\n                        }\n                    ]\n                },\n                options: {\n                    scales: {\n                        yAxes: [{\n                            ticks: {\n                                beginAtZero: true\n                            }\n                        }]\n                    }\n                }\n            }} />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"mixed-chart\", {\n    type: \"bar\",\n    data: {\n        labels: [\"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"],\n        datasets: [\n            {\n                label: \"Growth\",\n                data: [20, 25, 30]\n            },\n            {\n                label: \"Expected Growth\",\n                data: [20, 25, 30, 35, 40, 45],\n                type: \"line\" // Changes this dataset to become a line\n            }\n        ]\n    },\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    beginAtZero: true\n                }\n            }]\n        }\n    }\n});\n        `}\n        </ComponentPreview>\n    </>\n);\n\nconst CustomColors = () => (\n    <>\n        <h2 id=\"custom-colors\">Custom colors</h2>\n        <p>Except for the three first colors, the rest of the colors are customizable. Call <CodeTags type=\"secondary\" code=\"dg.chart\" /> with a last optional argument consisting of a list of RGB color codes.</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"custom-color-pie\"\n                options={{\n                    type: \"pie\",\n                    data: {\n                        labels: [\"Chrome\", \"Internet Explorer\", \"Firefox\", \"Edge\", \"Safari\", \"Opera\", \"Other\"],\n                        datasets: [\n                            {\n                                data: [63.14, 11.43, 10.23, 4.34, 3.83, 1.56, 4.19]\n                            }\n                        ]\n                    }\n                }}\n                colorPool={[\"81, 43, 43\",\n                    \"81, 151, 27\",\n                    \"163, 139, 128\",\n                    \"114, 96, 94\",\n                    \"197, 19, 28\"\n                ]}\n            />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"custom-color-pie\", {\n    type: \"pie\",\n    data: {\n        labels: [\"Chrome\", \"Internet Explorer\", \"Firefox\", \"Edge\", \"Safari\", \"Opera\", \"Other\"],\n        datasets: [\n            {\n                data: [63.14, 11.43, 10.23, 4.34, 3.83, 1.56, 4.19]\n            }\n        ]\n    }\n},\n[\"81, 43, 43\",\n\"81, 151, 27\",\n\"163, 139, 128\",\n\"114, 96, 94\",\n\"197, 19, 28\"]);\n            `}\n        </ComponentPreview>\n\n    </>\n);\n\nclass Charts extends Component {\n    render () {\n        return (\n            <DocContainer docToc>\n                <Introduction />\n                <LineChart />\n                <BarChart />\n                <DoughnutAndPieCharts />\n                <MixingTypes />\n                <CustomColors />\n            </DocContainer>\n        );\n    }\n}\n\nexport default Charts;\n\n/* For testing */\nexport { LineChart, BarChart, DoughnutAndPieCharts, MixingTypes, CustomColors };\n\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Chart extends Component {\n    componentDidMount () {\n        const { id, options, colorPool } = this.props;\n\n        dg.chart(id, options, colorPool);\n    }\n\n    render () {\n        return (\n            <canvas id={this.props.id} />\n        );\n    }\n}\n\nChart.propTypes = {\n    id: PropTypes.string.isRequired,\n    options: PropTypes.object.isRequired,\n    colorPool: PropTypes.arrayOf(PropTypes.string)\n};\n\nexport default Chart;\n"],"sourceRoot":""}