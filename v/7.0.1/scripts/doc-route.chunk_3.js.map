{"version":3,"sources":["webpack://@swedbankpay/design-guide/./src/App/ComponentsDocumentation/components/Alerts/constants.js","webpack://@swedbankpay/design-guide/./src/App/ComponentsDocumentation/components/Alerts/index.js"],"names":["exampleText","href","alertsShowCase","id","tabsId","elements","tab","component","Alert","type","icon","text","options","checkbox","title","inputs","name","value","close","description","Overview","ComponentPreview","language","showCasePanel","showCasePanelAdvanced","codeFigure","WhenToConsider","HowTo","className","to","ContentGuidelines","DeveloperDocumentation","CodeTags","code","dangerousHTML","useEffect","alert","DocContainer"],"mappings":"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","file":"scripts/doc-route.chunk_3.js","sourcesContent":["import React from \"react\";\nimport Alert from \"@components/Alert\";\n\nconst exampleText = <p><b>Error title:</b> Input informative alert message here, provide link to solution or more info when <a href=\"#\">possible</a></p>;\n\nexport const alertsShowCase = {\n    id: \"overviewAlert\",\n    tabsId: \"overviewAlertTabs\",\n    elements: [\n        {\n            tab: \"Error\",\n            component: <Alert type=\"danger\" icon=\"cancel\" text={exampleText} />,\n            options: {\n                checkbox: [\n                    {\n                        title: \"Options\",\n                        inputs: [\n                            {\n                                id: \"close_button\",\n                                name: \"Close button\",\n                                value: {\n                                    close: true\n                                }\n                            }\n                        ]\n                    }\n                ]\n            },\n            title: \"Error alert\",\n            description: \"Use this alert to let the user know that something went wrong. The message should clearly state the problem and if possible provide information on how to fix it.\"\n        },\n        {\n            tab: \"Warning\",\n            component: <Alert type=\"warning\" icon=\"warning\" text={exampleText} />,\n            options: {\n                checkbox: [\n                    {\n                        title: \"Options\",\n                        inputs: [\n                            {\n                                id: \"close_button\",\n                                name: \"Close button\",\n                                value: {\n                                    close: true\n                                }\n                            }\n                        ]\n                    }\n                ]\n            },\n            title: \"Warning error\",\n            description: \"Use this alert to help users avoid errors and warn against decisions that might have unexpected results\"\n        },\n        {\n            tab: \"Informative\",\n            component: <Alert type=\"informative\" icon=\"info\" text={exampleText}/>,\n            options: {\n                checkbox: [\n                    {\n                        title: \"Options\",\n                        inputs: [\n                            {\n                                id: \"close_button\",\n                                name: \"Close button\",\n                                value: {\n                                    close: true\n                                }\n                            }\n                        ]\n                    }\n                ]\n            },\n            title: \"Informative alert\",\n            description: \"Use this alert to communicate additional information to the user that may not be tied to their current action or task.\t\"\n        },\n        {\n            tab: \"Success\",\n            component: <Alert type=\"success\" icon=\"check_circle\" text={exampleText} />,\n            options: {\n                checkbox: [\n                    {\n                        title: \"Options\",\n                        inputs: [\n                            {\n                                id: \"close_button\",\n                                name: \"Close button\",\n                                value: {\n                                    close: true\n                                }\n                            }\n                        ]\n                    }\n                ]\n            },\n            title: \"Success alert\",\n            description: \"Use this alert to let the user know that an action or event has happened successfully. Success alerts are not a common use case for alert messages.\"\n        }\n    ]\n};\n// Will be restored at a later stage\n\n// export const alertsGlobalShowCase = {\n//     id: \"overviewAlertGlobal\",\n//     hideOptions: true,\n//     tabsId: \"overviewAlertGlobalTabs\",\n//     elements: [\n//         {\n//             tab: \"Warning\",\n//             component: <Alert type=\"warning\" global icon=\"warning\" text={<p><b>Login problems:</b> We are currently experiencing high numbers of login failures. We are working on solving the problem as quick as possible.</p>} />,\n//             options: {\n//                 checkbox: [\n//                     {\n//                         inputs: []\n//                     }\n//                 ]\n//             },\n//             title: \"Global warning alert\",\n//             description: \"Use this alert to broadcast a problem concerning the the entire system.\"\n//         },\n//         {\n//             tab: \"Informative\",\n//             component: <Alert type=\"informative\" global icon=\"info\" text={<p><b>Planned maintenance:</b> Friday 16:00 - 18:00 you will not be able to log into our service. We apologize form the inconvenience in advance.</p>}/>,\n//             options: {\n//                 checkbox: [\n//                     {\n//                         inputs: []\n//                     }\n//                 ]\n//             },\n//             title: \"Global informative alert\",\n//             description: \"Use this alert to broadcast information concerning the entire system.\"\n//         }\n//     ]\n// };\n","import React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ComponentPreview, DocContainer } from \"@docutils\";\nimport AlertComponent from \"@components/Alert\";\nimport CodeTags from \"@components/CodeTags\";\nimport { alertsShowCase } from \"./constants\";\nimport { alert } from \"@src/scripts/main\";\n\nconst Overview = () => (\n    <section>\n        <h2 id=\"local-alerts\">Overview</h2>\n        <p>Alerts are inserted within the content area near related items to notify users about potential problems or to communicate information. There are four different sub-types of alerts: error, warning, info, and success.</p>\n\n        <ComponentPreview language=\"html\" showCasePanel showCasePanelAdvanced={alertsShowCase} codeFigure/>\n\n        <WhenToConsider />\n        <HowTo />\n    </section>\n);\n\nconst WhenToConsider = () => (\n    <section>\n        <h3>When to consider something else</h3>\n        <ul className=\"list list-bullet\">\n            <li>If an action will destroy the users work consider a more intrusive pattern such as a <Link to=\"/components/dialog\">Dialog</Link> to confirm the action.</li>\n            <li>Always use field-level error messages in forms to indicate inaccurate input. Error alerts can be used to supplement these messages.</li>\n            <li>Consider using a <Link to=\"/components/dialog\">Toast</Link> to confirm the system response to an user action that do not correspond to a specific section of the page.</li>\n        </ul>\n    </section>\n);\n\nconst HowTo = () => (\n    <section>\n        <h3>How to align local alerts</h3>\n        <div className=\"slab slab-plain slab-border-success\">\n            <span className=\"h3\">Do</span>\n            <AlertComponent type=\"informative\" icon=\"info\" text={<p><b>Best practices:</b> To minimize the risk for a challenge request, it’s recommended that you add as much data as possible to the risk indicator object in the request below.</p>} />\n            <AlertComponent type=\"warning\" icon=\"warning\" text={<p><b>GDPR sensitive data:</b> If it is necessary to use GDPR sensitive data, it must be hashed and then the hash can be used in requests towards Swedbank Pay.</p>} />\n        </div>\n        <p>If multiple alerts are displayed subsequently they should be arranged vertically in consideration to readability.</p>\n\n        <div className=\"slab slab-plain slab-border-error\">\n            <span className=\"h3\">Don&apos;t</span>\n            <div className=\"d-flex\">\n                <div className=\"flex-fill mr-1\">\n                    <AlertComponent type=\"informative\" icon=\"info\" text={<p><b>Best practices:</b> To minimize the risk for a challenge request, it’s recommended that you add as much data as possible to the risk indicator object in the request below.</p>} />\n                </div>\n                <div className=\"flex-fill ml-1\">\n                    <AlertComponent type=\"warning\" icon=\"warning\" text={<p><b>GDPR sensitive data:</b> If it is necessary to use GDPR sensitive data, it must be hashed and then the hash can be used in requests towards Swedbank Pay.</p>} />\n                </div>\n            </div>\n        </div>\n\n        <p>Avoid arranging subsequent alerts horizontally.</p>\n    </section>\n);\n\n// Will be restored at a later stage\n\n// const GlobalAlerts = () => (\n//     <section id=\"global-alerts-container\">\n//         <h2 id=\"global-alerts\">Global alerts</h2>\n//         <p>Global alerts are used in the global context of an application and communicate a state that affects the entire system. This component should only be used when it’s necessary to broadcast a static message across the system. There are two different sub-types of global alerts: warning and info. They are full-width and placed at the very top of the page above content and navigation. </p>\n//         <ComponentPreview language=\"html\" showCasePanel showCasePanelAdvanced={alertsGlobalShowCase} codeFigure/>\n//     </section>\n// );\n\nconst ContentGuidelines = () => (\n    <section>\n        <h2 id=\"content-guidelines\">Content guidelines</h2>\n        <div className=\"slab slab-plain py-4\">\n            <div className=\"d-flex justify-content-center align-items-center pt-3\">\n                <AlertComponent type=\"danger\" icon=\"info\" text={<p><b>Error title:</b> Content text <a href=\"\" >link</a></p>} />\n            </div>\n        </div>\n\n        <p>Alerts provide limited space for content, and therefore it must be short and concise. A user should be able to scan the notification, be apprised of the situation, and know what to do next.</p>\n\n        <ul className=\"list list-bullet\">\n            <li>The <b>title</b> should be short and descriptive, explaining the most important piece of information.</li>\n            <li>The <b>content</b> should be limited to one or two short sentences.</li>\n            <li>If possible, include a <b>link</b> within the content that redirects the user to next step or if needed gives more information.</li>\n        </ul>\n    </section>\n);\n\nconst DeveloperDocumentation = () => (\n    <section>\n        <h2 id=\"developer-documentation\">Developer documentation</h2>\n        <span className=\"h3\">Javascript methods</span>\n        <p className=\"mt-2\">Use <CodeTags type=\"secondary\" code=\"dg.alert.init()\"/> to initialize all alerts.</p>\n        <p>Use <CodeTags type=\"secondary\" code='dg.alert.init(\"component-id\")'/> to initialize one specific component.</p>\n\n        <section>\n            <h3>Usage with NPM</h3>\n            <p><Link to=\"/get-started/for-developers/\">Usage with NPM</Link> will require you to import it from <CodeTags type=\"primary\" code=\"@swedbankpay/design-guide\" />.</p>\n            <ComponentPreview language=\"javascript\" codeFigure dangerousHTML>\n                import &#123; alert &#125; from &quot;@swedbankpay/design-guide&quot;; {\"\\n\"}\n                alert.init()\n            </ComponentPreview>\n        </section>\n    </section>\n);\n\nconst Alerts = () => {\n    useEffect(() => {\n        alert.init();\n    });\n\n    return (\n        <DocContainer>\n            <section id=\"alerts-doc\">\n                <p className=\"lead\">Alerts are short messages used to inform and give feedback to the user about an action or state. Icons and color indicate the type and urgency of the information within the message. </p>\n                <Overview />\n                <ContentGuidelines />\n                <DeveloperDocumentation />\n            </section>\n        </DocContainer>\n    );\n};\n\nexport default Alerts;\n\n/* For testing */\nexport { Overview, ContentGuidelines, DeveloperDocumentation };\n"],"sourceRoot":""}