{"version":3,"sources":["webpack://@swedbankpay/design-guide/./node_modules/classnames/index.js","webpack://@swedbankpay/design-guide/./src/App/components/ActionLink/index.js"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","module","exports","default","define","window","ActionLink","props","link","otherProps","actionLinkClasses","classnames","newTab","multiline","disabled","attrs","href","rel","target","className","ActionLinkContent","linkText","badge","smallText","type","text","propTypes","PropTypes"],"mappings":";4WAOC,WAGA,IAAIA,EAAS,GAAGC,eAEhB,SAASC,IAGR,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAC1C,IAAIG,EAAMF,UAAUD,GACpB,GAAKG,EAAL,CAEA,IAAIC,EAAU,EAAOD,GAErB,GAAgB,WAAZC,GAAoC,WAAZA,EAC3BL,EAAQM,KAAKF,QACP,GAAIG,MAAMC,QAAQJ,IACxB,GAAIA,EAAID,OAAQ,CACf,IAAIM,EAAQV,EAAWW,MAAM,KAAMN,GAC/BK,GACHT,EAAQM,KAAKG,SAGT,GAAgB,WAAZJ,EACV,GAAID,EAAIO,WAAaC,OAAOC,UAAUF,SACrC,IAAK,IAAIG,KAAOV,EACXP,EAAOkB,KAAKX,EAAKU,IAAQV,EAAIU,IAChCd,EAAQM,KAAKQ,QAIfd,EAAQM,KAAKF,EAAIO,aAKpB,OAAOX,EAAQgB,KAAK,KAGgBC,EAAOC,SAC3CnB,EAAWoB,QAAUpB,EACrBkB,EAAOC,QAAUnB,GAC+C,WAAtB,EAAOqB,SAA2BA,YAEtE,kBACL,OAAOrB,GADF,QAAe,OAAf,aAINsB,OAAOtB,WAAaA,EAhDrB,I,ktBCHD,IAAMuB,EAAa,SAAAC,GACf,IAAQC,EAAwBD,EAAxBC,KAASC,EAAjB,EAAgCF,EAAhC,GACMG,EAAoBC,IACtB,cACAF,EAAWG,OAAS,sBAAwB,KAC5CH,EAAWI,UAAY,YAAc,KACrCJ,EAAWK,SAAW,WAAa,MAGjCC,EAAQ,CACVC,KAAMR,GAAc,IACpBS,IAAKR,EAAWG,OAAS,sBAAwB,KACjDM,OAAQT,EAAWG,OAAS,SAAW,MAG3C,OACI,gCACI,uBAAGO,UAAWT,GAAuBK,GAAQ,KACzC,gBAACK,EAAsBX,MAMjCW,EAAoB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,UAAWV,EAA/B,EAA+BA,UAA/B,OACtB,gCACKA,EACG,gCACI,uBAAKM,UAAU,sBAAf,IAAsC,KAClC,wBAAMA,UAAU,yBAAhB,IAA0C,KACtC,4BAAO,KAAK,wBAAMA,UAAU,qBAAqBE,GAAiB,KAAlE,IAAyEC,EAAQ,wBAAMH,UAAS,gBAAWG,EAAME,OAASF,EAAMG,MAAe,iCAAO,MACtJ,wBAAMN,UAAU,cAAcI,GAAkB,QAK5D,uBAAKJ,UAAU,sBACX,wBAAMA,UAAU,uBAAsB,wBAAMA,UAAS,4BAAuBG,EAAQ,GAAK,aAAeD,GAAxG,IAA0HC,EAAQ,wBAAMH,UAAS,gBAAWG,EAAME,OAASF,EAAMG,MAAe,qCAMhNnB,EAAWoB,UAAY,CACnBnB,MAAOoB,UAAgB,CACnBN,SAAUM,sBACVL,MAAOK,UAAgB,CACnBH,KAAMG,sBACNF,KAAME,wBAEVJ,UAAWI,WACXd,UAAWc,SACXf,OAAQe,SACRnB,KAAMmB,cAIdP,EAAkBM,UAAY,CAC1BL,SAAUM,sBACVL,MAAOK,UAAgB,CACnBH,KAAMG,sBACNF,KAAME,wBAEVJ,UAAWI,WACXd,UAAWc,SACXf,OAAQe,UAGZ","file":"scripts/doc-route.chunk_91.js","sourcesContent":["/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nconst ActionLink = props => {\n    const { link, ...otherProps } = props;\n    const actionLinkClasses = classnames(\n        \"action-link\",\n        otherProps.newTab ? \"action-link-new-tab\" : null,\n        otherProps.multiline ? \"multiline\" : null,\n        otherProps.disabled ? \"disabled\" : null\n    );\n\n    const attrs = {\n        href: link ? link : \"#\",\n        rel: otherProps.newTab ? \"noopener noreferrer\" : null,\n        target: otherProps.newTab ? \"_blank\" : null\n    };\n\n    return (\n        <>\n            <a className={actionLinkClasses} {...attrs}>{\"\\n\"}\n                <ActionLinkContent {...otherProps}/>\n            </a>\n        </>\n    );\n};\n\nconst ActionLinkContent = ({ linkText, badge, smallText, multiline }) => (\n    <>\n        {multiline ?\n            <>\n                <div className=\"d-flex flex-column\"> {\"\\n\"}\n                    <span className=\"action-link-multiline\"> {\"\\n\"}\n                        <span>{\"\\n\"}<span className=\"action-link-label\">{linkText}</span>{\"\\n\"} {badge ? <span className={`badge ${badge.type}`}>{badge.text}</span> : <></>}{\"\\n\"}</span>\n                        <span className=\"small-text\">{smallText}</span>{\"\\n\"}\n                    </span>\n                </div>\n            </>\n            :\n            <div className=\"d-flex flex-column\">\n                <span className=\"action-link-content\"><span className={`action-link-label ${badge ? \"\" : \"no-badge\"}`}>{linkText}</span> {badge ? <span className={`badge ${badge.type}`}>{badge.text}</span> : <></>}</span>\n            </div>\n        }\n    </>\n);\n\nActionLink.propTypes = {\n    props: PropTypes.shape({\n        linkText: PropTypes.string.isRequired,\n        badge: PropTypes.shape({\n            type: PropTypes.string.isRequired,\n            text: PropTypes.string.isRequired\n        }),\n        smallText: PropTypes.string,\n        multiline: PropTypes.bool,\n        newTab: PropTypes.bool,\n        link: PropTypes.string\n    })\n};\n\nActionLinkContent.propTypes = {\n    linkText: PropTypes.string.isRequired,\n    badge: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        text: PropTypes.string.isRequired\n    }),\n    smallText: PropTypes.string,\n    multiline: PropTypes.bool,\n    newTab: PropTypes.bool\n};\n\nexport default ActionLink;\n\nexport { ActionLinkContent };\n"],"sourceRoot":""}