{"version":3,"sources":["webpack://@swedbankpay/design-guide/./node_modules/classnames/index.js","webpack://@swedbankpay/design-guide/./src/App/Identity/identity/Iconography/constants.js","webpack://@swedbankpay/design-guide/./src/App/Identity/identity/Iconography/index.js","webpack://@swedbankpay/design-guide/./src/App/components/IconPreview/index.js"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","module","exports","default","define","window","materialIcons","cardIcons","title","code","paymentIcons","flags","flagSizes","brandTitle","process","MaterialIcons","id","className","href","target","rel","CodeTags","type","tableData","icon","IconPreview","preview","name","ComponentPreview","language","codeFigure","CardIcons","PaymentIcons","size","Flags","flag","previewSize","squaredFlag","DocContainer","split","iconClasses","classnames","includes","propTypes","PropTypes"],"mappings":"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","file":"scripts/doc-route.chunk_71.js","sourcesContent":["/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","export const materialIcons = [\"insert_invitation\", \"cake\", \"mood\", \"thumb_up_alt\", \"whatshot\"];\n\nexport const cardIcons = [\n    {\n        title: \"Payment card\",\n        code: \"payment-card\"\n    },\n    {\n        title: \"American Expres\",\n        code: \"amex\"\n    },\n    {\n        title: \"Bank Accept\",\n        code: \"bank-axept\"\n    },\n    {\n        title: \"Coop\",\n        code: \"coop\"\n    },\n    {\n        title: \"Dankort\",\n        code: \"dankort\"\n    },\n    {\n        title: \"Diners Club\",\n        code: \"diners\"\n    },\n    {\n        title: \"Forbrugsforeningen\",\n        code: \"forbrugsforeningen\"\n    },\n    {\n        title: \"ICA\",\n        code: \"ica\"\n    },\n    {\n        title: \"ICA Banken\",\n        code: \"ica-banken\"\n    },\n    {\n        title: \"Ikano Bank\",\n        code: \"ikano-bank\"\n    },\n    {\n        title: \"JCB\",\n        code: \"jcb\"\n    },\n    {\n        title: \"Lindex\",\n        code: \"lindex\"\n    },\n    {\n        title: \"Maestro\",\n        code: \"maestro\"\n    },\n    {\n        title: \"Mastercard\",\n        code: \"mastercard\"\n    },\n    {\n        title: \"Visa\",\n        code: \"visa\"\n    }\n];\n\nexport const paymentIcons = [\n    {\n        title: \"Viabill\",\n        code: \"viabill\"\n    },\n    {\n        title: \"Vipps\",\n        code: \"vipps\"\n    },\n    {\n        title: \"Swish\",\n        code: \"swish\"\n    },\n    {\n        title: \"MobilePay\",\n        code: \"mobilepay\"\n    },\n    {\n        title: \"CarPay\",\n        code: \"carpay\"\n    },\n    {\n        title: \"Trustly\",\n        code: \"trustly\"\n    }\n];\n\nexport const flags = [\n    {\n        title: \"Norway\",\n        code: \"no\"\n    },\n    {\n        title: \"Sweden\",\n        code: \"se\"\n    },\n    {\n        title: \"Denmark\",\n        code: \"dk\"\n    },\n    {\n        title: \"Finland\",\n        code: \"fi\"\n    },\n    {\n        title: \"EU\",\n        code: \"eu\"\n    }\n];\n\nexport const flagSizes = [\"tiny\", \"small\", \"medium\", \"large\", \"huge\"];\n","import React from \"react\";\nimport * as tableData from \"./constants\";\n\nimport { ComponentPreview, DocContainer } from \"@docutils\";\nimport IconPreview from \"@components/IconPreview\";\nimport CodeTags from \"@components/CodeTags\";\n\nconst brandTitle = process.env.brandTitle;\n\nconst MaterialIcons = () => (\n    <section>\n        <h2 id=\"material-rounded-icons\">Material Outlined Icons</h2>\n        <p className=\"mb-0\">We primarily use the version called Outlined in the Material icons to avoid a to heavy look. For a full overview of the available icons, please, visit the Material.io. </p>\n\n        <a href=\"https://fonts.google.com/icons?selected=Material+Icons+Outlined\" className=\"icon-link\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <i className=\"material-icons\" aria-hidden=\"true\">open_in_new</i>\n            <span className=\"ml-2\">Material Icons Overview</span>\n        </a>\n\n        <h3>Example of how to implement icons</h3>\n        <p>To use an icon, provide the following markup: <CodeTags type=\"primary\" code={\"<i class=\\\"material-icons\\\" aria-hidden=\\\"true\\\">{icon_name}</i>\"} /></p>\n        <div className=\"d-flex justify-content-between p-4\">\n            {tableData.materialIcons.map(icon => (\n                <IconPreview key={icon} preview type=\"material-icons\" name={icon} />\n            ))}\n        </div>\n        <ComponentPreview language=\"html\" codeFigure>\n            {tableData.materialIcons.map(icon => (\n                <React.Fragment key={icon}>\n                    <i className=\"material-icons\" aria-hidden=\"true\">{icon}</i>{\"\\n\"}\n                </React.Fragment>\n            ))}\n        </ComponentPreview>\n    </section>\n);\n\nconst CardIcons = () => (\n    <section>\n        <h2 id=\"card-icons\">Card icons</h2>\n        <p>Card icons are typically used to show users which card providers that are available. The payment-card icon can be used as a placeholder and/or when the card is not recognized. </p>\n\n        <h3>Example of how to implement card icons</h3>\n        <p>To use an icon, provide the following markup: <CodeTags type=\"primary\" code={\"<i class=\\\"payment-icon payment-icon-{icon-name}\\\" aria-hidden=\\\"true\\\" /i>\"} /></p>\n\n        <table className=\"table table-plain\">\n            <thead>\n                <tr>\n                    <th>Icon</th>\n                    <th>Card type</th>\n                    <th>Code</th>\n                </tr>\n            </thead>\n            <tbody>\n                {tableData.cardIcons.map(icon => (\n                    <tr key={icon.code}>\n                        <td><IconPreview type=\"payment-icon\" name={icon.code} /></td>\n                        <td>{icon.title}</td>\n                        <td><CodeTags type=\"secondary\" code={icon.code}/></td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n        <ComponentPreview language=\"html\" codeFigure>\n            {tableData.cardIcons.map(icon => (\n                <React.Fragment key={icon.code}>\n                    <i className={`payment-icon payment-icon-${icon.code}`} aria-hidden=\"true\" />{\"\\n\"}\n                </React.Fragment>\n            ))}\n        </ComponentPreview>\n    </section>\n);\n\nconst PaymentIcons = () => (\n    <section>\n        <h2 id=\"payment-icons\">Payment icons</h2>\n        <p>Below is a list of payment icons that we use in our products. Be mindful when using payment logotypes. Try to make the payment icon feel more secondary in combination with the {brandTitle} logotype. We always want the {brandTitle} logotype to be primary.</p>\n\n        <h3>Example of how to implement payment icons</h3>\n        <p>To use an icon, provide the following markup: <CodeTags type=\"primary\" code={\"<i class=\\\"payment-icon payment-icon-{icon-name}\\\" aria-hidden=\\\"true\\\" /i>\"} /></p>\n\n        <table className=\"table table-plain\">\n            <thead>\n                <tr>\n                    <th>Icon</th>\n                    <th>Payment method</th>\n                    <th>Code</th>\n                </tr>\n            </thead>\n            <tbody>\n                {tableData.paymentIcons.map(icon => (\n                    <tr key={icon.code}>\n                        <td><IconPreview type=\"payment-icon\" name={icon.code} size=\"large\"/></td>\n                        <td>{icon.title}</td>\n                        <td><CodeTags type=\"secondary\" code={icon.code}/></td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n        <ComponentPreview language=\"html\" codeFigure>\n            {tableData.paymentIcons.map(icon => (\n                <React.Fragment key={icon.code}>\n                    <i className={`payment-icon payment-icon-${icon.code}`} aria-hidden=\"true\" />{\"\\n\"}\n                </React.Fragment>\n            ))}\n        </ComponentPreview>\n    </section>\n);\n\nconst Flags = () => (\n    <section>\n        <h2 id=\"flags\">Flags</h2>\n        <p>Below is a list of flag icons that we use in our system, To use the flag icons add the classes <CodeTags type=\"secondary\" code=\".flag-icon\"/> and  <CodeTags type=\"secondary\" code=\".flag-icon-xx\"/>  (where xx is the <a href=\"https://www.iso.org/obp/ui/#search\">ISO_3166-1-alpha-2-code</a> of a country) to an empty <CodeTags type=\"secondary\" code=\"<i>\"/></p>\n        <table className=\"table table-plain\">\n            <thead>\n                <tr>\n                    <th>Icon</th>\n                    <th>Country</th>\n                    <th>Code</th>\n                </tr>\n            </thead>\n            <tbody>\n                {tableData.flags.map(icon => (\n                    <tr key={icon.code}>\n                        <td><IconPreview type=\"flag-icon\" name={icon.code} size=\"medium\"/></td>\n                        <td>{icon.title}</td>\n                        <td><CodeTags type=\"secondary\" code={icon.code}/></td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n        <ComponentPreview language=\"html\" codeFigure >\n            {tableData.flags.map(flag => (\n                <React.Fragment key={flag.code}>\n                    <i className={`flag-icon flag-icon-${flag.code}`} aria-hidden=\"true\" />{\"\\n\"}\n                </React.Fragment>\n            ))}\n        </ComponentPreview>\n\n        <h3>Sizes</h3>\n        <p>All size available for the flags are pre-defined and are shown below. Tiny is the default size and for example is used input fields. </p>\n        <div className=\"d-flex justify-content-between align-items-end p-4\">\n            {tableData.flags.map((flag, i) => (\n                <React.Fragment key={flag.code}>\n                    <IconPreview previewSize type=\"flag-icon\" name={flag.code} size={tableData.flagSizes[i]} />{\"\\n\"}\n                </React.Fragment>\n            ))}\n        </div>\n        <ComponentPreview language=\"html\" codeFigure>\n            {tableData.flags.map((flag, i) => (\n                <React.Fragment key={flag.code}>\n                    <i className={`flag-icon flag-icon-${flag.code} flag-icon-${tableData.flagSizes[i]}`} aria-hidden=\"true\" />{\"\\n\"}\n                </React.Fragment>\n            ))}\n        </ComponentPreview>\n\n        <h3>Squared</h3>\n        <p>All flags can be used in a square format. In the example we see squared flags in the size tiny. All predefined sizes are available in combination with <CodeTags type=\"secondary\" code=\".flag-icon-squared\"/>. </p>\n        <div className=\"d-flex justify-content-between align-items-end p-4\">\n            {tableData.flags.map((flag, i) => (\n                <React.Fragment key={flag.code}>\n                    <IconPreview previewSize type=\"flag-icon\" squaredFlag name={flag.code} size={tableData.flagSizes[i]} />\n                </React.Fragment>\n            ))}\n        </div>\n        <ComponentPreview language=\"html\" codeFigure>\n            {tableData.flags.map((flag, i) => (\n                <React.Fragment key={flag.code}>\n                    <i className={`flag-icon flag-icon-squared flag-icon-${flag.code} flag-icon-${tableData.flagSizes[i]}`} aria-hidden=\"true\" />{\"\\n\"}\n                </React.Fragment>\n            ))}\n        </ComponentPreview>\n    </section>\n);\n\nconst Iconography = () => (\n    <DocContainer>\n        <p className=\"lead\">\n        At {brandTitle} we use Material icons from Material Design, but we also include icons for well-known payment providers, and flags for most nations in the world. All icons are integrated and are available in HTML and CSS.\n        </p>\n        <MaterialIcons />\n        <CardIcons />\n        <PaymentIcons />\n        <Flags />\n    </DocContainer>\n);\n\nexport default Iconography;\n\nexport { MaterialIcons, CardIcons, PaymentIcons, Flags };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nconst IconPreview = ({ name, squaredFlag, preview, previewSize, size, className, type }) => {\n    const classNames = className ? className.split(\" \") : [];\n    const iconClasses = classnames(\n        type,\n        size ? `${type}-${size}` : \"\",\n        type === \"material-icons\" ? \"\" : `${type}-${name}`,\n        squaredFlag ? \"flag-icon-squared\" : \"\",\n        ...classNames\n    );\n\n    return preview || previewSize ? (\n        <div className=\"icon-preview\">\n            <i className={iconClasses} aria-hidden=\"true\">{iconClasses.includes(\"material-icons\") ? name : null}</i>\n            <code className=\"code-tags code-tags-secondary mt-2\">\n                {previewSize ? size : name}\n            </code>\n        </div>\n    ) : <i className={iconClasses} aria-hidden=\"true\">{iconClasses.includes(\"material-icons\") ? name : null}</i>;\n};\n\nIconPreview.propTypes = {\n    name: PropTypes.string.isRequired,\n    type: PropTypes.oneOf([\n        \"material-icons\",\n        \"payment-icon\",\n        \"flag-icon\"\n    ]),\n    squaredFlag: PropTypes.bool,\n    preview: PropTypes.bool,\n    size: PropTypes.oneOf([\n        \"tiny\",\n        \"small\",\n        \"medium\",\n        \"large\",\n        \"huge\"\n    ]),\n    className: PropTypes.string\n};\n\nexport default IconPreview;\n"],"sourceRoot":""}