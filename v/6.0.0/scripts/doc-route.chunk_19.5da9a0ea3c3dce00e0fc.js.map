{"version":3,"sources":["webpack://design.swedbankpay.com/./node_modules/classnames/index.js","webpack://design.swedbankpay.com/./src/App/ComponentsDocumentation/components/InputField/constants.js","webpack://design.swedbankpay.com/./src/App/ComponentsDocumentation/components/InputField/index.js","webpack://design.swedbankpay.com/./src/App/components/InputGroup/index.js"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","module","exports","default","define","window","inputShowCase","id","elements","component","InputGroup","type","label","placeholder","options","checkbox","inputs","name","value","prefixType","prefixValue","title","tooltip","optional","radio","values","disabled","helpBlock","validationState","errorMessage","description","className","aria-hidden","CodeTags","code","textareaShowCase","Overview","href","ComponentPreview","language","showCasePanel","showCasePanelAdvanced","codeFigure","Textarea","ContentGuidelines","defaultValue","DeveloperDocumentation","autocomplete","to","DocContainer","Addon","color","Feedback","icon","pattern","validate","required","autoComplete","readOnly","selectOptions","prefixBtnColor","postfixValue","postfixType","postfixBtnColor","feedbackIcon","successMessage","attrs","inputGrpClasses","classnames","htmlFor","data-tooltip","data-tooltip-position","map","opt","Fragment","hidden","data-success","data-error","propTypes","PropTypes"],"mappings":"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","file":"scripts/doc-route.chunk_19.5da9a0ea3c3dce00e0fc.js","sourcesContent":["/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React from \"react\";\nimport InputGroup from \"@components/InputGroup\";\nimport CodeTags from \"@components/CodeTags\";\n\nexport const inputShowCase = {\n    id: \"no-tabs\",\n    elements: [\n        {\n            component: <InputGroup type=\"text\" label=\"Input label\" placeholder=\"Placeholder text\" />,\n            options: {\n                checkbox: [\n                    {\n                        inputs: [\n                            {\n                                id: \"input_icon\",\n                                name: \"With icon\",\n                                value: {\n                                    prefixType: \"icon\",\n                                    prefixValue: \"email\"\n                                }\n                            }\n                        ]\n                    },\n                    {\n                        title: \"Label add on\",\n                        inputs: [\n                            {\n                                id: \"help_icon\",\n                                name: \"With help icon\",\n                                value: {\n                                    tooltip: true\n                                }\n                            },\n                            {\n                                id: \"optional\",\n                                name: \"Is optional\",\n                                value: {\n                                    optional: true\n                                }\n                            }\n                        ]\n                    }\n                ],\n                radio: [\n                    {\n                        id: \"unit_radio\",\n                        title: \"Input type examples\",\n                        values: [\n                            {\n                                name: \"Text\",\n                                value: {\n                                    type: \"text\"\n                                }\n                            },\n                            {\n                                name: \"E-mail\",\n                                value: {\n                                    type: \"email\"\n                                }\n                            },\n                            {\n                                name: \"Tel\",\n                                value: {\n                                    type: \"tel\"\n                                }\n                            },\n                            {\n                                name: \"Password\",\n                                value: {\n                                    type: \"password\"\n                                }\n                            }\n                        ]\n                    },\n                    {\n                        id: \"state_radio\",\n                        title: \"State modifiers\",\n                        values: [\n                            {\n                                name: \"Default\",\n                                value: {\n                                    disabled: false\n                                }\n                            },\n                            {\n                                name: \"Error\",\n                                value: {\n                                    helpBlock: true,\n                                    validationState: \"error\",\n                                    errorMessage: \"Descriptive helpful error message.\"\n                                }\n                            },\n                            {\n                                name: \"Disabled\",\n                                value: {\n                                    disabled: true\n                                }\n                            }\n                        ]\n                    }\n                ]\n            },\n            title: \"Input field\",\n            description: <>\n                <p>Inputs fields have a few different states which includes the default state, focus state, disabled state and error state.</p>\n                <p>The default input type is text but it can also be specified as for example Email which will make it automatically validated when submitted or Password which will mask the characters submitted.</p>\n                <div className=\"alert alert-informative mt-3\">\n                    <i className=\"material-icons alert-icon align-self-start\" aria-hidden=\"true\">info</i>\n                    <p><b>Usage with icon.</b> Remember to wrap your inputfield within an <CodeTags type=\"secondary\" code=\".input-group\"/></p>\n                </div>\n            </>\n        }\n    ]\n};\n\nexport const textareaShowCase = {\n    id: \"no-tabs-2\",\n    elements: [\n        {\n            component: <InputGroup type=\"textarea\" label=\"Input label\" placeholder=\"Placeholder text\" />,\n            options: {\n                checkbox: [\n                    {\n                        title: \"Label add on\",\n                        inputs: [\n                            {\n                                id: \"help_icon_textarea\",\n                                name: \"With help icon\",\n                                value: {\n                                    tooltip: true\n                                }\n                            },\n                            {\n                                id: \"optional_textarea\",\n                                name: \"Is optional\",\n                                value: {\n                                    optional: true\n                                }\n                            }\n                        ]\n                    }\n                ],\n                radio: [\n                    {\n                        id: \"state_radio_textarea\",\n                        title: \"State modifiers\",\n                        values: [\n                            {\n                                name: \"Default\",\n                                value: {\n                                    disabled: false\n                                }\n                            },\n                            {\n                                name: \"Error\",\n                                value: {\n                                    helpBlock: true,\n                                    validationState: \"error\",\n                                    errorMessage: \"Descriptive helpful error message.\"\n                                }\n                            },\n                            {\n                                name: \"Disabled\",\n                                value: {\n                                    disabled: true\n                                }\n                            }\n                        ]\n                    }\n                ]\n            },\n            title: \"Textarea\",\n            description: \"Textareas have a few different sates which includes the default state, focus state, disabled state and error state. \"\n        }\n    ]\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ComponentPreview, DocContainer } from \"@docutils\";\nimport CodeTags from \"@components/CodeTags\";\nimport InputGroup from \"@components/InputGroup\";\nimport { inputShowCase, textareaShowCase } from \"./constants\";\n\nconst Overview = () => (\n    <section id=\"input-field-overview\">\n        <h2 id=\"input-field\">Input field</h2>\n        <p>Use a Input field when the expected user input is a single line of text. A Input field must always have a Input label that clearly describes the type of input a field requires and it may also have a Placeholder example text, refer to <a href=\"#content-guidelines\">content guidelines</a> for more information.</p>\n\n        <ComponentPreview language=\"html\" showCasePanel showCasePanelAdvanced={inputShowCase} codeFigure />\n\n        <h3>When to consider something else</h3>\n        <ul className=\"pl-3 list list-bullet\">\n            <li>Use a <b>Textarea</b> when the expected user input is more than one sentence</li>\n        </ul>\n    </section>\n);\n\nconst Textarea = () => (\n    <section id=\"textarea-overview\">\n        <h2 id=\"textarea\">Textarea</h2>\n        <p>Use a Textarea when the expected user input is more than one sentence. Textareas must always have a Input label that clearly describes the type of input a field requires and it may also have a Placeholder example text, refer to <a href=\"#content-guidelines\">content guidelines</a> for more information. </p>\n\n        <ComponentPreview language=\"html\" showCasePanel showCasePanelAdvanced={textareaShowCase} codeFigure />\n\n        <h3>When to consider something else</h3>\n        <ul className=\"pl-3 list list-bullet\">\n            <li>Use a <b>Input field</b> when the expected user input is a short text</li>\n        </ul>\n    </section>\n);\n\nconst ContentGuidelines = () => (\n    <section>\n        <h2 id=\"content-guidelines\">Content guidelines</h2>\n\n        <div className=\"slab slab-plain h-100 mb-2\">\n            <div className=\"d-flex flex-column align-items-center\">\n                <div className=\"py-3\">\n                    <InputGroup type=\"text\" label=\"Input label\" defaultValue=\"Input text\" validationState=\"error\" errorMessage=\"Error message\" helpBlock tooltip/>\n                    <InputGroup type=\"textarea\" label=\"Input label\" optional placeholder=\"Placeholder text\"/>\n                </div>\n            </div>\n        </div>\n\n        <h3>Input label</h3>\n        <p>A input field must have a label that clearly describes the type of input a field requires. </p>\n        <ul className=\"list list-bullet\">\n            <li>Use a label that is meaningful, clear, and concise.</li>\n            <li>When a text field is not required to be filled by the user, label it as “optional”.</li>\n            <li>If there is a need for a more detailed description, a help icon which triggers a Popover on click can be added after the label. </li>\n        </ul>\n\n        <h3>Placeholder text</h3>\n        <p>A placeholder text may be used inside of the input field to serve as an example of what the user can enter, consider to start with “e.g.” or similar abbreviation in corresponding language. </p>\n\n        <div className=\"row placeholder-guideline\">\n            <div className=\"col-6\">\n                <div className=\"slab slab-plain slab-border-success pb-4\">\n                    {/* <span className=\"h3 mb-3\">Do</span> */}\n                    <h3 className=\"mb-3 mt-0\">Do</h3>\n                    <InputGroup type=\"text\" label=\"Personal authentication number\" placeholder=\"YYYYMMDDNNNN\"/>\n                </div>\n                <p>Use the placeholder text as an example of what to enter.</p>\n            </div>\n            <div className=\"col-6\">\n                <div className=\"slab slab-plain slab-border-error pb-4\">\n                    <h3 className=\"mb-3 mt-0\">Don&#x27;t</h3>\n                    <InputGroup type=\"text\" label=\"Personal authentication number\" placeholder=\"Enter with 10 digits\"/>\n                </div>\n                <p>Don’t use the placeholder text as an instruction of what to enter.</p>\n            </div>\n        </div>\n\n        <h3>Error message</h3>\n        <p>When input isn’t accepted, input fields should display a short and concise error message, it should be no more than a single sentence</p>\n\n        <div className=\"row placeholder-guideline\">\n            <div className=\"col-6\">\n                <div className=\"slab slab-plain slab-border-success pb-4\">\n                    <h3 className=\"mb-3 mt-0\">Do</h3>\n                    <InputGroup type=\"text\" validationState=\"error\" helpBlock errorMessage='The email address must include \"@\"' label=\"Email address\" defaultValue=\"Name.com\"/>\n                </div>\n                <p>Do explain what went wrong and how to fix it.</p>\n            </div>\n            <div className=\"col-6\">\n                <div className=\"slab slab-plain slab-border-error pb-4\">\n                    <h3 className=\"mb-3 mt-0\">Don&#x27;t</h3>\n                    <InputGroup type=\"text\" validationState=\"error\" helpBlock errorMessage=\"Invalid input\" label=\"Email address\" defaultValue=\"Name.com\"/>\n                </div>\n                <p>Don&#x27;t use technical jargong </p>\n            </div>\n        </div>\n    </section>\n);\n\nconst DeveloperDocumentation = () => (\n    <section>\n        <h2 id=\"developer-documentation mb-3\">Developer documentation</h2>\n        <h3 className=\"mt-3\">Autocomplete</h3>\n        <p>Add <CodeTags type=\"primary\" code=\"autocomplete\"/> attributes to input fields when it is possible to make a form easier for users to fill. </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure>\n            <InputGroup type=\"text\" label=\"Name\" autocomplete=\"on\" />\n        </ComponentPreview>\n\n        <h3>Validation</h3>\n        <p>To use our validation, start by adding the attribute <CodeTags type=\"primary\" code=\"novalidate\"/> to your desired input field. If you wish to validate an entire form, add the validate attribute to the <CodeTags type=\"primary\" code=\"form\"/> tag.</p>\n\n        <h3>Error message</h3>\n        <p>Insert the error message in the attribute <CodeTags type=\"primary\" code=\"data-error\"/> in the <CodeTags type=\"primary\" code=\".help-block\"/> element. </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure>\n            <InputGroup type=\"text\" label=\"Input label\" defaultValue=\"Input text\" validationState=\"error\" errorMessage=\"Descriptive helpful error message.\" helpBlock />\n        </ComponentPreview>\n\n        <h3>Disabled state</h3>\n        <p>Disable a input field by adding <CodeTags type=\"primary\" code=\"disabled\"/> attribute to the desired input field. You can also disable the <CodeTags type=\"primary\" code=\"form-group\"/> or <CodeTags type=\"primary\" code=\"fieldset\"/> in which the input field is located, refer to <Link to=\"/components/forms\">forms</Link> for more info.</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure>\n            <InputGroup type=\"text\" label=\"Input label\" placeholder=\"Placeholder text\" disabled />\n        </ComponentPreview>\n\n        <h3>Javascript methods</h3>\n        <p><CodeTags type=\"primary\" code=\"dg.validation.init()\"/> can be used on a form tag to initialize all fields contained in the form, or you can pass a single field to initialize just that one.</p>\n    </section>\n);\n\nconst InputField = () => (\n    <DocContainer>\n        <section id=\"input-field-doc\">\n            <p className=\"lead\">Input fields typically reside in forms and enable the user to interact with and input words, characters or numbers. Depending on the expected length of the user input use either a Input field for shorter input or a Textarea for longer input.</p>\n            <Overview />\n            <Textarea />\n            <ContentGuidelines />\n            <DeveloperDocumentation />\n        </section>\n    </DocContainer>\n);\n\nexport default InputField;\n\nexport { Overview, Textarea, ContentGuidelines, DeveloperDocumentation };\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nexport const Addon = ({ type, value, color, disabled }) => (\n    (type === \"button\") ?\n        <button type=\"button\" className={`btn btn-${color}`} disabled={disabled}>\n            {value}\n        </button>\n        : <span className=\"input-group-addon\">{(type === \"icon\") ? <i className=\"material-icons material-icons-outlined\" aria-hidden=\"true\">{value}</i> : value}</span>\n);\n\nconst Feedback = ({ icon }) => (\n    <span className=\"form-control-feedback\">{\"\\n\\t\\t\"}\n        <i className=\"material-icons\" aria-hidden=\"true\">{icon}</i>{\"\\n\\t\"}\n    </span>\n);\n\nconst InputGroup = ({\n    id,\n    type,\n    placeholder,\n    pattern,\n    validate,\n    required,\n    defaultValue,\n    autoComplete,\n    disabled,\n    readOnly,\n    label,\n    validationState,\n    selectOptions,\n    prefixValue,\n    prefixType,\n    prefixBtnColor,\n    postfixValue,\n    postfixType,\n    postfixBtnColor,\n    feedbackIcon,\n    helpBlock,\n    errorMessage,\n    successMessage,\n    tooltip,\n    optional\n}) => {\n    const attrs = {\n        type: type || null,\n        className: \"form-control\",\n        id: id || null,\n        placeholder: placeholder || null,\n        defaultValue: defaultValue || \"\",\n        disabled: disabled || null,\n        readOnly: readOnly || null,\n        autoComplete: autoComplete || null,\n        required: required || null,\n        pattern: pattern ? \"\" : null,\n        \"data-validate\": validate ? \"\" : null\n    };\n\n    const inputGrpClasses = classnames(\n        \"input-group\",\n        validationState ? `has-${validationState}` : null,\n        feedbackIcon ? \"has-feedback\" : null\n    );\n\n    return (\n        <div className={`form-group${disabled ? \" disabled\" : \"\"}${type === \"select\" ? errorMessage ? \" has-error\" : \"\" : \"\"}`}>{\"\\n\"}\n            {label ? <label htmlFor={id}>{\"\\n\"}{label} {optional && \"(optional)\"}{tooltip && \"\\n\"}\n                {tooltip &&\n                    <i className=\"material-icons help-icon\" data-tooltip=\"Some informative text\" data-tooltip-position=\"top\">{\"\\n\"}\n                        help_outline{\"\\n\"}</i>}{\"\\n\"}\n            </label> : null}{label ? \"\\n\" : null}\n            {prefixValue || postfixValue || feedbackIcon || errorMessage ?\n                <div className={inputGrpClasses}>{\"\\n\"}\n                    {prefixValue ? <Addon type={prefixType} value={prefixValue} color={prefixBtnColor} disabled={disabled} /> : null }{prefixValue ? \"\\n\" : null}\n                    {type === \"textarea\" ?\n                        <textarea {...attrs}></textarea>\n                        : type === \"select\" ?\n                            <select className=\"form-control\" disabled={disabled} readOnly={readOnly}>{\"\\n\\t\\t\"}\n                                {selectOptions.map((opt, i) => (\n                                    <Fragment key={opt + i}>\n                                        <option>{opt}</option>{(i !== selectOptions.length - 1) ? \"\\n\\t\\t\" : \"\"}\n                                    </Fragment>\n                                ))}{\"\\n\\t\"}\n                            </select>\n                            :\n                            <input {...attrs} />}\n                    {\"\\n\"}\n                    {feedbackIcon ? <Feedback icon={feedbackIcon} /> : null} {feedbackIcon ? \"\\n\" : null}\n                    {postfixValue ? <Addon type={postfixType} value={postfixValue} color={postfixBtnColor} disabled={disabled} /> : null }{postfixValue ? \"\\n\" : null}\n                </div>\n                :\n                <>\n                    {type === \"textarea\" ?\n                        <textarea {...attrs}></textarea>\n                        : type === \"select\" ?\n                            <select className=\"form-control\" defaultValue=\"placeholder\" disabled={disabled} readOnly={readOnly} required={required}>{\"\\n\\t\\t\"}\n                                {placeholder && <option value=\"placeholder\" disabled hidden>{placeholder}</option> }\n                                {selectOptions.map((opt, i) => (\n                                    <Fragment key={opt + i}>\n                                        <option value={opt}>{opt}</option>{(i !== selectOptions.length - 1) ? \"\\n\\t\\t\" : \"\"}\n                                    </Fragment>\n                                ))}{\"\\n\\t\"}\n                            </select>\n                            :\n                            <input {...attrs} />}\n                </>\n            }\n            {helpBlock ? <div className=\"help-block\" data-success={successMessage || null} data-error={errorMessage || null}>{helpBlock}</div> : null}\n        </div>\n    );\n};\n\nInputGroup.propTypes = {\n    type: PropTypes.string.isRequired,\n    id: PropTypes.string,\n    placeholder: PropTypes.string,\n    pattern: PropTypes.string,\n    validate: PropTypes.bool,\n    required: PropTypes.bool,\n    defaultValue: PropTypes.string,\n    autoComplete: PropTypes.string,\n    disabled: PropTypes.bool,\n    readOnly: PropTypes.bool,\n    label: PropTypes.string,\n    validationState: PropTypes.oneOf([\"error\", \"\"]),\n    selectOptions: PropTypes.array,\n    prefixValue: PropTypes.string,\n    prefixType: PropTypes.oneOf([\"button\", \"icon\", \"\"]),\n    prefixBtnColor: PropTypes.oneOf([\"primary\", \"secondary\"]),\n    postfixValue: PropTypes.string,\n    postfixType: PropTypes.oneOf([\"button\", \"icon\", \"\"]),\n    postfixBtnColor: PropTypes.oneOf([\"primary\", \"secondary\"]),\n    feedbackIcon: PropTypes.string,\n    helpBlock: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool\n    ]),\n    errorMessage: PropTypes.string,\n    successMessage: PropTypes.string\n};\n\nexport default InputGroup;\n"],"sourceRoot":""}