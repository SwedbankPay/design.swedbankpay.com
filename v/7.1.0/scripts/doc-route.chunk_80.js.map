{"version":3,"sources":["webpack://@swedbankpay/design-guide/./src/App/Patterns/content/Login/constants.js","webpack://@swedbankpay/design-guide/./src/App/Patterns/content/Login/index.js"],"names":["guidelineList","basename","process","Overview","id","src","className","alt","LoginForm","passwordId","emailId","checkboxId","additionalText","helpDesk","logo","alternativeLogins","title","productLabel","ComponentPreview","language","codeFigure","ContentGuidelines","placeholder","passwordLabel","emailLabel","map","text","i","key","to","DeveloperDocumentation","showCasePanel","InputGroup","type","validationState","label","helpBlock","errorMessage","error","defaultPassword","defaultEmail","DocContainer"],"mappings":"oWAEaA,EAAgB,CACzB,uCAAM,0CAAN,2EACA,gCAAE,mCAAF,kDACA,yDAAwB,+CAAxB,sMACA,uCAAM,kDAAN,2HACA,gCAAE,wCAAF,wIACA,gCAAE,mCAAF,4DACA,gCAAE,iDAAF,wHACA,sEAAqC,kDAArC,MCAEC,EAAWC,YAEXC,EAAW,kBACb,+BACI,sBAAIC,GAAG,YAAP,YAEA,uBAAKC,IAAG,UAAKJ,EAAL,wDAAqEK,UAAU,iEAAiEC,IAAI,2BAC5J,uBAAKD,UAAU,kGACX,gBAACE,EAAA,QAAD,CAAWC,WAAW,yBAAyBC,QAAQ,sBAAsBC,WAAW,yBAAyBC,gBAAc,EAACC,UAAQ,EAACC,MAAI,EAACC,mBAAiB,EAACC,MAAM,KAAKC,aAAa,oBAE5L,uBAAKX,UAAU,gCACX,uBAAKA,UAAU,OACX,mCADJ,4GAKJ,gBAAC,EAAAY,iBAAD,CAAkBC,SAAS,OAAOC,YAAU,GACxC,uBAAKd,UAAU,oCACX,uBAAKA,UAAU,OACX,uBAAKA,UAAU,8BACX,uBAAKA,UAAU,0BACX,gBAACE,EAAA,QAAD,CAAWC,WAAW,yBAAyBC,QAAQ,sBAAsBC,WAAW,mBAAmBC,gBAAc,EAACC,UAAQ,EAACC,MAAI,EAACC,mBAAiB,EAACC,MAAM,KAAKC,aAAa,qBAEnL,KACP,uBAAKZ,IAAG,UAAKJ,EAAL,oDAAiEM,IAAI,yBAAyBD,UAAU,sCAO9He,EAAoB,kBACtB,+BACI,sBAAIjB,GAAG,sBAAP,sBACA,uBAAKE,UAAU,2BACX,uBAAKA,UAAU,yBACX,uBAAKA,UAAU,0BACX,gBAACE,EAAA,QAAD,CAAWc,YAAY,mBACnBN,MAAM,KACNL,WAAW,6BACXF,WAAW,6BACXc,cAAc,uBAAuBb,QAAQ,0BAC7Cc,WAAW,uBACXT,mBAAiB,EACjBH,eAAe,uBACfK,aAAa,gBACbH,MAAI,OAIpB,sBAAIR,UAAU,oBACTN,EAAcyB,KAAI,SAACC,EAAMC,GAAP,OAAa,sBAAIC,IAAKD,GAAID,OAEjD,+BACI,mCACA,uBAAKrB,IAAG,UAAKJ,EAAL,+DAA4EM,IAAI,kCAAkCD,UAAU,eACpI,6jBAAoiB,gBAAC,KAAD,CAAMuB,GAAG,qBAAT,mBAApiB,QAONC,EAAyB,kBAC3B,+BACI,sBAAI1B,GAAG,2BAAP,2BACA,mDACA,2NAEA,+BACI,oDACA,wOACA,gBAAC,EAAAc,iBAAD,CAAkBC,SAAS,OAAOC,YAAU,EAACW,eAAa,GACtD,uBAAKzB,UAAU,oCACX,gBAAC0B,EAAA,QAAD,CAAYC,KAAK,QAAQC,gBAAgB,QAAQC,MAAM,QAAQC,WAAS,EAACC,aAAa,yBAIlG,+BACI,oDACA,0OACA,gBAAC,EAAAnB,iBAAD,CAAkBC,SAAS,OAAOC,YAAU,EAACW,eAAa,GACtD,uBAAKzB,UAAU,oCACX,gBAACE,EAAA,QAAD,CAAW8B,OAAK,EAACC,iBAAe,EAACC,cAAY,EACzC/B,WAAW,8BACXC,QAAQ,2BACRC,WAAW,mBACXK,MAAM,YAgB9B,EATc,kBACV,gBAAC,EAAAyB,aAAD,KACI,qBAAGnC,UAAU,QAAb,wGACA,gBAACH,EAAD,MACA,gBAACkB,EAAD,MACA,gBAACS,EAAD","file":"scripts/doc-route.chunk_80.js","sourcesContent":["import React from \"react\";\n\nexport const guidelineList = [\n    <>The <b>Product label</b> should display the name of the product the user is about to log in to.</>,\n    <><b>Log in</b> should always be the title of the login form.</>,\n    <>A section of links to <b>third party logins</b> can be added. Use a divider to separate it from the standard login section. It can be placed either before or after depending on the most common or desired way to login to the specific portal. </>,\n    <>The <b>required input fields</b> varies depending on the type of login. The amount of required fields  differs depending on the authentication method. </>,\n    <><b>Remember me</b> is an optional field. When it is enabled it saves the data and present prefilled fields the next time the user is about to log in. </>,\n    <><b>Button</b> is used to allow the user to perform the login request.</>,\n    <><b>Additional help text</b> is optional and can be added underneath the button in order to provide the user with additional help or guidelines.</>,\n    <>Login forms should always have the <b>Swedbank pay logotype</b>.</>\n];\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { DocContainer } from \"@docutils\";\nimport { ComponentPreview } from \"~/src/App/docutils\";\n\nimport InputGroup from \"@components/InputGroup\";\nimport LoginForm from \"../../components/LoginForm/index\";\n\nimport { guidelineList } from \"./constants\";\n\nconst basename = process.env.basename;\n\nconst Overview = () => (\n    <section>\n        <h2 id=\"overview\">Overview</h2>\n\n        <img src={`${basename}img/documentation/patterns/login-pattern-example.png`} className=\"d-none d-md-block w-100 border-left border-right border-bottom\" alt=\"Image for login screen\" />\n        <div className=\"container-fluid d-block d-md-none border-left border-right border-bottom border-top-brand py-3\">\n            <LoginForm passwordId=\"login-password-example\" emailId=\"login-email-example\" checkboxId=\"login-checkbox-example\" additionalText helpDesk logo alternativeLogins title=\"h1\" productLabel=\"Merchant Admin\" />\n        </div>\n        <div className=\"border-left border-right p-3\">\n            <div className=\"m-3\">\n                <h3>Login</h3>\n                The login page is customizable and components can be removed or added to fit a specific products needs.\n            </div>\n        </div>\n        <ComponentPreview language=\"html\" codeFigure>\n            <div className=\"container-fluid border-top-brand\">\n                <div className=\"row\">\n                    <div className=\"col-lg-5 col-12 d-flex p-0\">\n                        <div className=\"col-sm-9 col-12 m-auto\">\n                            <LoginForm passwordId=\"password-input-example\" emailId=\"email-input-example\" checkboxId=\"checkbox-example\" additionalText helpDesk logo alternativeLogins title=\"h1\" productLabel=\"Merchant Admin\" />\n                        </div>\n                    </div>{\"\\n\"}\n                    <img src={`${basename}img/documentation/patterns/login-img-example.png`} alt=\"Image for login screen\" className=\"d-none d-lg-block col-7 px-0\" />\n                </div>\n            </div>\n        </ComponentPreview>\n    </section>\n);\n\nconst ContentGuidelines = () => (\n    <section>\n        <h2 id=\"content-guidelines\">Content guidelines</h2>\n        <div className=\"showcase-panel p-0 mb-4\">\n            <div className=\"border-top-brand py-5\">\n                <div className=\"col-sm-8 col-12 m-auto\">\n                    <LoginForm placeholder=\"Placeholder text\"\n                        title=\"h1\"\n                        checkboxId=\"guideline-checkbox-example\"\n                        passwordId=\"guideline-password-example\"\n                        passwordLabel=\"Required input field\" emailId=\"guideline-email-example\"\n                        emailLabel=\"Required input field\"\n                        alternativeLogins\n                        additionalText=\"Additional help text\"\n                        productLabel=\"Product Label\"\n                        logo />\n                </div>\n            </div>\n        </div>\n        <ul className=\"list list-bullet\">\n            {guidelineList.map((text, i) => <li key={i}>{text}</li>)}\n        </ul>\n        <section>\n            <h3>Image</h3>\n            <img src={`${basename}img/documentation/patterns/login-img-collection-example.png`} alt=\"Fitting images for login screen\" className=\"w-100 mb-3\" />\n            <p>The login form is always accompanied by a image on the right side on desktop devices, the image is hidden on smaller devices. Above are an example of some images that would be fitting to be used as login images, the most important thing to look out for is telling a story, especially when it comes to the product. “Who is this product for?” If it is an product for consumers outside of our organization, try to relate the image to that segment of the user. For more guidance on how to design with images and find our image library, refer to the <Link to=\"/identity/imagery\">Imagery section</Link>.\n            </p>\n        </section>\n\n    </section>\n);\n\nconst DeveloperDocumentation = () => (\n    <section>\n        <h2 id=\"developer-documentation\">Developer documentation</h2>\n        <h3>Errors and validation</h3>\n        <p>Not being able to log in to an application is very frustrating for the user, therefore error messages should be used to help the user understand what went wrong and how to solve the problem.</p>\n\n        <section>\n            <h4>Client-side validation</h4>\n            <p>Use client-side validation to validate as much data as possible inline before the user submits the form. Common inline errors include empty required fields, invalid characters or incorrect input format. </p>\n            <ComponentPreview language=\"html\" codeFigure showCasePanel>\n                <div className=\"col-sm-6 col-12 m-auto px-0 pt-3\">\n                    <InputGroup type=\"email\" validationState=\"error\" label=\"Email\" helpBlock errorMessage=\"Email is required\" />\n                </div>\n            </ComponentPreview>\n        </section>\n        <section>\n            <h4>Server-side validation</h4>\n            <p>Use server side validation when the user submits the form. Display a local error alert after the page has reloaded if an error has occurred. Incorrect email or password are the most common servers errors. </p>\n            <ComponentPreview language=\"html\" codeFigure showCasePanel>\n                <div className=\"col-sm-6 col-12 m-auto px-0 py-3\">\n                    <LoginForm error defaultPassword defaultEmail\n                        passwordId=\"validation-password-example\"\n                        emailId=\"validation-email-example\"\n                        checkboxId=\"checkbox-example\"\n                        title=\"h2\" />\n                </div>\n            </ComponentPreview>\n        </section>\n    </section>\n);\n\nconst Login = () => (\n    <DocContainer>\n        <p className=\"lead\">The login page allow users to gain access to an application by entering login credentials to a form.</p>\n        <Overview />\n        <ContentGuidelines />\n        <DeveloperDocumentation />\n    </DocContainer>\n);\n\nexport default Login;\n\nexport { Overview, ContentGuidelines, DeveloperDocumentation };\n"],"sourceRoot":""}