{"version":3,"sources":["webpack://@swedbankpay/design-guide/./src/App/ComponentsDocumentation/components/Toast/constants.js","webpack://@swedbankpay/design-guide/./src/App/ComponentsDocumentation/components/Toast/index.js"],"names":["Toast","type","title","className","onClick","toast","html","optionsTable","tableHead","tableBody","tableData","CodeTags","code","AlertBox","Alert","id","icon","text","toastShowCase","tabsId","hideOptions","elements","tab","component","options","checkbox","description","Overview","ComponentPreview","language","showCasePanel","hideCodeFigure","showCasePanelAdvanced","codeFigure","dangerousHTML","to","ContentGuidelines","DeveloperDocumentation","map","i","key","th","td","DocContainer","Component"],"mappings":"+WAMMA,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,OACV,0BAAQC,UAAU,kBAAkBF,KAAK,SAASG,QAAS,kBAAMC,WAAM,CACnEC,KAAM,yCAAF,OAESJ,EAFT,8JAKJD,WANJ,QAOUC,EAPV,WAUSK,EAAe,CACxB,CACIC,UAAW,CAAC,OAAQ,OAAQ,UAAW,eACvCC,UAAW,CACP,CACIC,UAAW,CACP,OACA,SACA,gCAAE,gBAACC,EAAA,QAAD,CAAUV,KAAK,YAAYW,KAAK,QAClC,mCAGR,CACIF,UAAW,CACP,OACA,SACA,gCAAE,gBAACC,EAAA,QAAD,CAAUV,KAAK,YAAYW,KAAK,QAClC,gDAAe,gBAACD,EAAA,QAAD,CAAUV,KAAK,YAAYW,KAAK,YAA/C,KAA4D,gBAACD,EAAA,QAAD,CAAUV,KAAK,YAAYW,KAAK,YAA5F,KAAyG,gBAACD,EAAA,QAAD,CAAUV,KAAK,YAAYW,KAAK,YAAzI,KAAsJ,gBAACD,EAAA,QAAD,CAAUV,KAAK,YAAYW,KAAK,cAI9L,CACIF,UAAW,CACP,UACA,mBACA,gCAAE,gBAACC,EAAA,QAAD,CAAUV,KAAK,YAAYW,KAAK,QAClC,8CAGR,CACIF,UAAW,CACP,mBACA,WACA,gCAAE,gBAACC,EAAA,QAAD,CAAUV,KAAK,YAAYW,KAAK,UAClC,yDAOdC,EAAW,kBACb,gBAACC,EAAA,QAAD,CAAOC,GAAG,uBAAuBd,KAAK,cAAce,KAAM,OAAQC,KAAM,yBAAG,gDAAH,sHAG/DC,EAAgB,CACzBH,GAAI,gBACJI,OAAQ,oBACRC,aAAa,EACbC,SAAU,CACN,CACIC,IAAK,UACLC,UAAW,gBAACvB,EAAD,CAAOC,KAAK,UAAUC,MAAM,YACvCsB,QAAS,CACLC,SAAU,IAEdvB,MAAO,gBACPwB,YAAa,yNAEjB,CACIJ,IAAK,UACLC,UAAW,gBAACvB,EAAD,CAAOC,KAAK,UAAUC,MAAM,YACvCsB,QAAS,CACLC,SAAU,IAEdvB,MAAO,gBACPwB,YAAa,gCACT,4GACA,gBAACb,EAAD,QAGR,CACIS,IAAK,UACLC,UAAW,gBAACvB,EAAD,CAAOC,KAAK,UAAUC,MAAM,YACvCsB,QAAS,CACLC,SAAU,IAEdvB,MAAO,gBACPwB,YAAa,gCACT,yJACA,gBAACb,EAAD,QAGR,CACIS,IAAK,QACLC,UAAW,gBAACvB,EAAD,CAAOC,KAAK,SAASC,MAAM,UACtCsB,QAAS,CACLC,SAAU,IAEdvB,MAAO,cACPwB,YAAa,gCACT,2LACA,gBAACb,EAAD,U,4yCCtGhB,IAAMc,EAAW,kBACb,+BACI,sBAAIZ,GAAG,YAAP,YACA,gBAAC,EAAAa,iBAAD,CAAkBC,SAAS,OAAOC,eAAa,EAACC,gBAAc,EAACC,sBAAuBd,IACtF,gBAAC,EAAAU,iBAAD,CAAkBC,SAAS,OAAOI,YAAU,EAACC,eAAa,GACrD,oRAEL,+BACI,6DACA,sBAAI/B,UAAU,oBACV,4JAAmI,gBAAC,KAAD,CAAMgC,GAAG,sBAAT,SAAnI,6DACA,sHAA6F,gBAAC,KAAD,CAAMA,GAAG,sBAAT,UAA7F,yBAIR,+BACI,8CACA,uBAAKhC,UAAU,uCACX,wBAAMA,UAAU,MAAhB,MACA,uBAAKA,UAAU,gDACX,uBAAKY,GAAG,kBAAkBZ,UAAU,2BAChC,uBAAKA,UAAU,wCACX,qBAAGA,UAAU,kBAAb,QACA,uBAAKA,UAAU,iBAAgB,uDAC/B,qBAAGA,UAAU,kBAAb,aAKhB,iKAEA,uBAAKA,UAAU,qCACX,wBAAMA,UAAU,MAAhB,SACA,uBAAKA,UAAU,yDACX,uBAAKY,GAAG,kBAAkBZ,UAAU,yCAChC,uBAAKA,UAAU,uBACX,qBAAGA,UAAU,kBAAb,QACA,uBAAKA,UAAU,iBAAgB,uDAC/B,qBAAGA,UAAU,kBAAb,aAKhB,6QAKNiC,EAAoB,kBACtB,+BACI,gDACA,uBAAKjC,UAAU,6BACX,uBAAKA,UAAU,gCACX,uBAAKY,GAAG,kBAAkBZ,UAAU,iBAChC,uBAAKA,UAAU,8BACX,qBAAGA,UAAU,kBAAb,QACA,uBAAKA,UAAU,iBAAgB,qCAC/B,qBAAGA,UAAU,kBAAb,aAKhB,sBAAIA,UAAU,oBACV,iCAAQ,oCAAR,8OAKNkC,EAAyB,kBAC3B,2BAAStB,GAAG,2BACR,qDACA,mDAA0B,gBAACJ,EAAA,QAAD,CAAUV,KAAK,YAAYW,KAAK,eAA1D,4CACA,gBAAC,EAAAgB,iBAAD,CAAkBC,SAAS,OAAOI,YAAU,EAACC,eAAa,GACrD,uRAGL,qCACA,uBAAK/B,UAAU,iBACVI,EAAa+B,KAAI,WAA2BC,GAA3B,IAAG/B,EAAH,EAAGA,UAAWC,EAAd,EAAcA,UAAd,OACd,yBAAO+B,IAAKhC,EAAWL,UAAU,uBAC7B,6BACI,0BACKK,EAAU8B,KAAI,SAAAG,GAAE,OAAI,sBAAID,IAAKC,EAAKF,GAAIE,QAG/C,6BACKhC,EAAU6B,KAAI,WAAgBC,GAAhB,IAAG7B,EAAH,EAAGA,UAAH,OACX,sBAAI8B,IAAKD,GACJ7B,EAAU4B,KAAI,SAACI,EAAIH,GAAL,OAAW,sBAAIC,IAAKE,EAAKH,GAAIG,gBAQpE,+BACI,4CACA,yBAAG,gBAAC,KAAD,CAAMP,GAAG,gCAAT,kBAAH,uCAAoG,gBAACxB,EAAA,QAAD,CAAUV,KAAK,UAAUW,KAAK,8BAAlI,qCACA,gBAAC,EAAAgB,iBAAD,CAAkBC,SAAS,aAAaI,YAAU,EAACC,eAAa,GAAhE,sDAC4E,KAD5E,YAIA,gBAAC,EAAAN,iBAAD,CAAkBC,SAAS,OAAOI,YAAU,EAACC,eAAa,GACrD,yRAuBjB,E,+VAhBI,WACI,OACI,gBAAC,EAAAS,aAAD,KACI,2BAAS5B,GAAG,aACR,qBAAGZ,UAAU,QAAb,8KAGA,gBAACwB,EAAD,MACA,gBAACS,EAAD,MACA,gBAACC,EAAD,a,8BAVAO","file":"scripts/doc-route.chunk_37.js","sourcesContent":["import React from \"react\";\n\nimport CodeTags from \"@components/CodeTags\";\nimport Alert from \"@components/Alert\";\nimport { toast } from \"@src/scripts/main\";\n\nconst Toast = ({ type, title }) => (\n    <button className=\"btn btn-primary\" type=\"button\" onClick={() => toast({\n        html: `\n            <p>\n                <b>${title} header:</b>\n                Input informative alert information here, provide <a href>link</a> to solution or more info when possible.\n            </p>`,\n        type\n    })}>Show {title} toast</button>\n);\n\nexport const optionsTable = [\n    {\n        tableHead: [\"Name\", \"Type\", \"Default\", \"Description\"],\n        tableBody: [\n            {\n                tableData: [\n                    \"html\",\n                    \"String\",\n                    <><CodeTags type=\"secondary\" code='\"\"'/></>,\n                    \"The HTML content of the Toast.\"\n                ]\n            },\n            {\n                tableData: [\n                    \"type\",\n                    \"String\",\n                    <><CodeTags type=\"secondary\" code='\"\"'/></>,\n                    <>Alert types: <CodeTags type=\"secondary\" code=\"success\"/>, <CodeTags type=\"secondary\" code=\"neutral\"/>, <CodeTags type=\"secondary\" code=\"warning\"/>, <CodeTags type=\"secondary\" code=\"danger\"/>\n                    </>\n                ]\n            },\n            {\n                tableData: [\n                    \"classes\",\n                    \"Array of strings\",\n                    <><CodeTags type=\"secondary\" code=\"[]\"/></>,\n                    \"Classes to be added to the toast element.\"\n                ]\n            },\n            {\n                tableData: [\n                    \"completeCallback\",\n                    \"Function\",\n                    <><CodeTags type=\"secondary\" code=\"null\"/></>,\n                    \"Callback function called when toast is dismissed.\"\n                ]\n            }\n        ]\n    }\n];\n\nconst AlertBox = () => (\n    <Alert id=\"toast-overview-alert\" type=\"informative\" icon={\"info\"} text={<p><b>Static code example</b> The code viewer shows an example on how to trigger a neutral toast. Change the type for warning/error/success.</p>}/>\n);\n\nexport const toastShowCase = {\n    id: \"overviewToast\",\n    tabsId: \"overviewToastTabs\",\n    hideOptions: true,\n    elements: [\n        {\n            tab: \"Neutral\",\n            component: <Toast type=\"neutral\" title=\"Neutral\" />,\n            options: {\n                checkbox: []\n            },\n            title: \"Neutral toast\",\n            description: \"Use this toast to inform the user about something, in some cases a link can be used to direct the user towards continued reading. For information on how to trigger a toast, read more under Developer documentation.\"\n        },\n        {\n            tab: \"Success\",\n            component: <Toast type=\"success\" title=\"Success\" />,\n            options: {\n                checkbox: []\n            },\n            title: \"Success toast\",\n            description: <>\n                <p>Use success toast to show that the action performed by the user was successful.</p>\n                <AlertBox />\n            </>\n        },\n        {\n            tab: \"Warning\",\n            component: <Toast type=\"warning\" title=\"Warning\" />,\n            options: {\n                checkbox: []\n            },\n            title: \"Warning toast\",\n            description: <>\n                <p>The warning toast warns the user about situations that might be unfavorable. Donâ€™t use this to present critical information.</p>\n                <AlertBox />\n            </>\n        },\n        {\n            tab: \"Error\",\n            component: <Toast type=\"danger\" title=\"Error\" />,\n            options: {\n                checkbox: []\n            },\n            title: \"Error toast\",\n            description: <>\n                <p>Error toast informs the user of error and issues that may have occurred. They should let the user know what has happened and how the user can solve the issue.</p>\n                <AlertBox />\n            </>\n        }\n    ]\n};\n\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ComponentPreview, DocContainer } from \"@docutils\";\nimport CodeTags from \"@components/CodeTags\";\nimport { toastShowCase, optionsTable } from \"./constants\";\n\nconst Overview = () => (\n    <section>\n        <h2 id=\"overview\">Overview</h2>\n        <ComponentPreview language=\"html\" showCasePanel hideCodeFigure showCasePanelAdvanced={toastShowCase} />\n        <ComponentPreview language=\"html\" codeFigure dangerousHTML>\n            {\"<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" onclick=\\\"dg.toast({\\n\\ttype: 'neutral' \\n\\thtml: '<p><b>Info header</b> Input informative alert information here, provide <a href=\\\"#\\\">link</a> to solution or more info when possible.</p>'})\\\">\\nShow neutral toast\\n</button>\"}\n        </ComponentPreview>\n        <section>\n            <h3>When to consider something else</h3>\n            <ul className=\"list list-bullet\">\n                <li>Toasts are temporary notifications, therefore in cases where you want to display a more permanent message to the user, use the <Link to=\"/components/alerts\">alert</Link> component instead which stays permanently on the screen.</li>\n                <li>Similarly, if you require action from the user before continuing to the next page, use a <Link to=\"/components/dialog\">dialog</Link> component instead.</li>\n            </ul>\n        </section>\n\n        <section>\n            <h3>How to use toast</h3>\n            <div className=\"slab slab-plain slab-border-success\">\n                <span className=\"h3\">Do</span>\n                <div className=\"toast-example-container col-sm-10 col-12 p-0\">\n                    <div id=\"toast-container\" className=\"col-12 ml-auto mt-3 p-0\">\n                        <div className=\"toast toast-neutral col-sm-11 col-12\">\n                            <i className=\"material-icons\">info</i>\n                            <div className=\"toast-content\"><b>Short information message</b></div>\n                            <i className=\"material-icons\">close</i>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <p>The positioning of the toast component should always be at the top right corner of the page on web and top center on mobile devices.</p>\n\n            <div className=\"slab slab-plain slab-border-error\">\n                <span className=\"h3\">Don&apos;t</span>\n                <div className=\"toast-example-container col-sm-11 col-12 my-5 mx-auto\">\n                    <div id=\"toast-container\" className=\"toast-dont-example col-12 m-auto px-0\">\n                        <div className=\"toast toast-neutral\">\n                            <i className=\"material-icons\">info</i>\n                            <div className=\"toast-content\"><b>Short information message</b></div>\n                            <i className=\"material-icons\">close</i>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <p>Since the toast component provides updates on user actions and never critical information, it should not disturb/abrupt the user flow. As seen on the example above, it should not pop up in the middle of the screen interrupting the user. </p>\n        </section>\n    </section>\n);\n\nconst ContentGuidelines = () => (\n    <section>\n        <h3>Content guidelines</h3>\n        <div className=\"slab slab-plain mt-3 px-0\">\n            <div className=\"toast-example-container py-5\">\n                <div id=\"toast-container\" className=\"m-auto col-12\">\n                    <div className=\"toast toast-neutral col-12\">\n                        <i className=\"material-icons\">info</i>\n                        <div className=\"toast-content\"><b>Message</b></div>\n                        <i className=\"material-icons\">close</i>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ul className=\"list list-bullet\">\n            <li>The <b>message</b> for toast should reflect the type of the toast, if it is informative it should explain and link the user further. If it is an error toast, it should clearly explain what the issue is and explain how the user can solve the problem.</li>\n        </ul>\n    </section>\n);\n\nconst DeveloperDocumentation = () => (\n    <section id=\"developer-documentation\">\n        <h2>Developer documentation</h2>\n        <p>To use the Toast, call <CodeTags type=\"secondary\" code=\"dg.toast()\" /> on an element with the desired options.</p>\n        <ComponentPreview language=\"html\" codeFigure dangerousHTML>\n            {\"<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" onclick=\\\"dg.toast({\\n\\ttype: 'neutral' \\n\\thtml: '<p><b>Info header</b>\\n\\t\\t Input informative alert information here, provide <a href=\\\"#\\\">link</a> to solution or more info when possible.\\n\\t</p>'})\\\">Neutral toast\\n</button>\"}\n        </ComponentPreview>\n\n        <h4>Options</h4>\n        <div className=\"overflow-auto\">\n            {optionsTable.map(({ tableHead, tableBody }, i) => (\n                <table key={tableHead} className=\"table table-striped\">\n                    <thead>\n                        <tr>\n                            {tableHead.map(th => <th key={th + i}>{th}</th>)}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {tableBody.map(({ tableData }, i) => (\n                            <tr key={i}>\n                                {tableData.map((td, i) => <td key={td + i}>{td}</td>)}\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            ))}\n\n        </div>\n        <section>\n            <h3>Usage with NPM</h3>\n            <p><Link to=\"/get-started/for-developers/\">Usage with NPM</Link> will require you to import it from <CodeTags type=\"primary\" code=\"@swedbankpay/design-guide\" /> before calling it on an element.</p>\n            <ComponentPreview language=\"javascript\" codeFigure dangerousHTML>\n                import &#123; toast &#125; from &quot;@swedbankpay/design-guide&quot;; {\"\\n\"}\n                toast();\n            </ComponentPreview>\n            <ComponentPreview language=\"html\" codeFigure dangerousHTML>\n                {\"<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" onclick=\\\"toast({\\n\\ttype: 'neutral' \\n\\thtml: '<p><b>Info header</b>\\n\\t\\t Input informative alert information here, provide <a href=\\\"#\\\">link</a> to solution or more info when possible.\\n\\t\\t</p>'})\\\">Neutral toast\\n</button>\"}\n            </ComponentPreview>\n        </section>\n    </section>\n);\n\nclass Toast extends Component {\n    render () {\n        return (\n            <DocContainer>\n                <section id=\"toast-doc\">\n                    <p className=\"lead\">\n                        The toast component is only displayed when the user has performed an action. The components informs the user of the status of their request, warning and potential errors.\n                    </p>\n                    <Overview />\n                    <ContentGuidelines />\n                    <DeveloperDocumentation />\n                </section>\n            </DocContainer>\n        );\n    }\n}\n\nexport default Toast;\n\n/* For testing */\nexport { Overview, ContentGuidelines, DeveloperDocumentation };\n"],"sourceRoot":""}