{"version":3,"sources":["webpack://@swedbankpay/design-guide/./src/App/ComponentsDocumentation/components/Charts/Introduction/index.js","webpack://@swedbankpay/design-guide/./src/App/ComponentsDocumentation/components/Charts/index.js","webpack://@swedbankpay/design-guide/./src/App/components/Chart/index.js","webpack://@swedbankpay/design-guide/./src/scripts/dashboard/chart/bar.js","webpack://@swedbankpay/design-guide/./src/scripts/dashboard/chart/pie.js","webpack://@swedbankpay/design-guide/./src/scripts/dashboard/chart/line.js","webpack://@swedbankpay/design-guide/./src/scripts/dashboard/chart/line-fill.js","webpack://@swedbankpay/design-guide/./src/scripts/dashboard/chart/index.js","webpack://@swedbankpay/design-guide/./src/scripts/dashboard/index.js"],"names":["basename","process","scriptUrl","window","location","origin","dashboardScriptUrl","QuickStart","id","JavaScript","type","code","ComponentPreview","language","codeFigure","src","className","href","target","rel","LineChart","showCasePanel","options","data","labels","datasets","label","steppedLine","borderDash","scales","yAxes","scaleLabel","display","labelString","ticks","callback","value","fill","BarChart","beginAtZero","stacked","xAxes","DoughnutAndPieCharts","MixingTypes","CustomColors","colorPool","Charts","DocContainer","docToc","Component","Chart","this","props","chart","propTypes","PropTypes","userOptions","map","dataset","i","index","preparedDataset","backgroundColor","borderColor","borderWidth","hoverBorderWidth","pointBackgroundColor","pointBorderColor","pointHoverBorderColor","pointHoverBackgroundColor","pointBorderWidth","pointRadius","pointHoverRadius","hoverBackgroundColor","hoverBorderColor","forEach","push","prepareDataset","d","beforeDraw","xAxis","gridLines","_colorPool","element","document","getElementById","tagName","ctx","initBarChart","initPieChart","initLineChart","initLineFillChart","_init","getContext","slice","currentScript","getAttribute","dg"],"mappings":"2QAKMA,EAAWC,YACXC,EAAY,GAAH,OAAMC,OAAOC,SAASC,OAASL,EAA/B,iBACTM,EAAqB,GAAH,OAAMH,OAAOC,SAASC,OAASL,EAA/B,2BAElBO,EAAa,kBACf,gCACI,sBAAIC,GAAG,eAAP,eACA,8HAIFC,EAAa,kBACf,gCACI,sBAAID,GAAG,cAAP,cACA,kIAAyG,gBAAC,UAAD,CAAUE,KAAK,YAAYC,KAAK,YAAzI,0BACQ,gBAAC,UAAD,CAAUD,KAAK,UAAUC,KAAM,WADvC,mBAEA,gBAAC,EAAAC,iBAAD,CAAkBC,SAAS,OAAOC,YAAU,GACxC,0BAAQC,IAAKb,IACb,0BAAQa,IAAKT,OAwBzB,UAnBqB,kBACjB,gCACI,sBAAIE,GAAG,gBAAP,gBACA,qBAAGQ,UAAU,QAAb,gBACiB,qBAAGC,KAAK,2BAA2BC,OAAO,SAASC,IAAI,uBAAvD,YADjB,oHAIA,iHACA,8EACA,0BACI,0BAAI,gBAAC,UAAD,CAAUT,KAAK,YAAYC,KAAM,YACrC,0BAAI,gBAAC,UAAD,CAAUD,KAAK,YAAYC,KAAM,2BACrC,0BAAI,gBAAC,UAAD,CAAUD,KAAK,YAAYC,KAAM,uBAEzC,gBAACJ,EAAD,MACA,gBAACE,EAAD,S,kkDCpCR,IAAMW,EAAY,kBACd,gCACI,sBAAIZ,GAAG,cAAP,cACA,qBAAGQ,UAAU,QAAb,2DACA,+JACA,gCAAO,qBAAGC,KAAK,uDAAuDC,OAAO,SAASC,IAAI,uBAAnF,YAAP,yCACA,gBAAC,EAAAP,iBAAD,CAAkBC,SAAS,OAAOQ,eAAa,EAACP,YAAU,GACtD,gBAAC,UAAD,CAAON,GAAG,oBAAoBc,QAAS,CACnCZ,KAAM,OACNa,KAAM,CACFC,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACjDC,SAAU,CACN,CACIC,MAAO,OACPH,KAAM,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,YAMtD,gBAAC,EAAAX,iBAAD,CAAkBC,SAAS,aAAaC,YAAU,GAAlD,4TAiBA,qDACA,gBAAC,EAAAF,iBAAD,CAAkBC,SAAS,OAAOQ,eAAa,EAACP,YAAU,GACtD,gBAAC,UAAD,CAAON,GAAG,4BAA4Bc,QAAS,CAC3CZ,KAAM,OACNa,KAAM,CACFC,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACjEC,SAAU,CACN,CACIC,MAAO,eACPH,KAAM,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACjDI,aAAa,GAEjB,CACID,MAAO,mBACPH,KAAM,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACjDK,WAAY,CAAC,GAAI,UAMrC,gBAAC,EAAAhB,iBAAD,CAAkBC,SAAS,aAAaC,YAAU,GAAlD,ykBAuBA,8CACA,gBAAC,EAAAF,iBAAD,CAAkBC,SAAS,OAAOQ,eAAa,EAACP,YAAU,GACtD,gBAAC,UAAD,CAAON,GAAG,sBAAsBc,QAAS,CACrCZ,KAAM,OACNa,KAAM,CACFC,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACjEC,SAAU,CACN,CACIC,MAAO,sBACPH,KAAM,CAAC,IAAK,IAAK,KAAM,MAAO,MAAO,MAAO,MAAO,QAEvD,CACIG,MAAO,oCACPH,KAAM,CAAC,GAAK,EAAG,KAAM,KAAM,KAAM,KAAM,KAAM,SAIzDD,QAAS,CACLO,OAAQ,CACJC,MAAO,CAAC,CACJC,WAAY,CACRC,SAAS,EACTC,YAAa,eAEjBC,MAAO,CACHC,SAAU,SAAAC,GAAK,iBAAQA,aAO/C,gBAAC,EAAAxB,iBAAD,CAAkBC,SAAS,aAAaC,YAAU,GAAlD,q1BAkCA,uCACA,gBAAC,EAAAF,iBAAD,CAAkBC,SAAS,OAAOQ,eAAa,EAACP,YAAU,GACtD,gBAAC,UAAD,CAAON,GAAG,kBAAkBc,QAAS,CACjCZ,KAAM,YACNa,KAAM,CACFC,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACjDC,SAAU,CACN,CACIC,MAAO,OACPH,KAAM,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAClCc,MAAM,SAM1B,gBAAC,EAAAzB,iBAAD,CAAkBC,SAAS,aAAaC,YAAU,GAAlD,8VAoBFwB,EAAW,kBACb,gCACI,sBAAI9B,GAAG,aAAP,aACA,qBAAGQ,UAAU,QAAb,6CACA,4MACA,gCAAO,qBAAGC,KAAK,sDAAsDC,OAAO,SAASC,IAAI,uBAAlF,YAAP,wCACA,gBAAC,EAAAP,iBAAD,CAAkBC,SAAS,OAAOQ,eAAa,EAACP,YAAU,GACtD,gBAAC,UAAD,CAAON,GAAG,mBAAmBc,QAAS,CAClCZ,KAAM,MACNa,KAAM,CACFC,OAAQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YACvHC,SAAU,CACN,CACIC,MAAO,oBACPH,KAAM,CAAC,KAAM,KAAM,MAAO,KAAM,GAAI,MAAO,GAAI,KAAM,GAAI,MAAO,IAAK,MAIjFD,QAAS,CACLO,OAAQ,CACJC,MAAO,CAAC,CACJI,MAAO,CACHK,aAAa,WAOrC,gBAAC,EAAA3B,iBAAD,CAAkBC,SAAS,aAAaC,YAAU,GAAlD,2lBA0BA,+CACA,0DACA,gBAAC,EAAAF,iBAAD,CAAkBC,SAAS,OAAOQ,eAAa,EAACP,YAAU,GACtD,gBAAC,UAAD,CAAON,GAAG,kBAAkBc,QAAS,CACjCZ,KAAM,MACNa,KAAM,CACFC,OAAQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YACvHC,SAAU,CACN,CACIC,MAAO,oBACPH,KAAM,CAAC,KAAM,KAAM,MAAO,KAAM,GAAI,MAAO,GAAI,KAAM,GAAI,MAAO,IAAK,IAEzE,CACIG,MAAO,qBACPH,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,MAEhE,CACIG,MAAO,mCACPH,KAAM,EAAE,KAAM,KAAM,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,KAAM,QAInFD,QAAS,CACLO,OAAQ,CACJC,MAAO,CAAC,CACJI,MAAO,CACHK,aAAa,WAOrC,gBAAC,EAAA3B,iBAAD,CAAkBC,SAAS,aAAaC,YAAU,GAAlD,q7BAkCA,yCACA,qBAAGE,UAAU,QAAb,2EACA,gBAAC,EAAAJ,iBAAD,CAAkBC,SAAS,OAAOQ,eAAa,EAACP,YAAU,GACtD,gBAAC,UAAD,CAAON,GAAG,0BAA0Bc,QAAS,CACzCZ,KAAM,MACNa,KAAM,CACFC,OAAQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YACvHC,SAAU,CACN,CACIC,MAAO,iBACPH,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAEvD,CACIG,MAAO,wBACPH,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAEvD,CACIG,MAAO,kBACPH,KAAM,CAAC,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,OAIzDD,QAAS,CACLO,OAAQ,CACJC,MAAO,CAAC,CACJU,SAAS,EACTN,MAAO,CACHK,aAAa,KAGrBE,MAAO,CAAC,CACJD,SAAS,UAM7B,gBAAC,EAAA5B,iBAAD,CAAkBC,SAAS,aAAaC,YAAU,GAAlD,m+BAwCF4B,EAAuB,kBACzB,gCACI,sBAAIlC,GAAG,2BAAP,2BACA,qBAAGQ,UAAU,QAAb,iDACA,4MACA,gCAAO,qBAAGC,KAAK,2DAA2DC,OAAO,SAASC,IAAI,uBAAvF,YAAP,qDACA,gBAAC,EAAAP,iBAAD,CAAkBC,SAAS,OAAOQ,eAAa,EAACP,YAAU,GACtD,gBAAC,UAAD,CAAON,GAAG,mBAAmBc,QAAS,CAClCZ,KAAM,MACNa,KAAM,CACFC,OAAQ,CAAC,SAAU,oBAAqB,UAAW,OAAQ,SAAU,QAAS,SAC9EC,SAAU,CACN,CACIF,KAAM,CAAC,MAAO,MAAO,MAAO,KAAM,KAAM,KAAM,aAMlE,gBAAC,EAAAX,iBAAD,CAAkBC,SAAS,aAAaC,YAAU,GAAlD,iUAgBA,sCACA,qBAAGE,UAAU,QAAb,kBAAmC,wBAAMA,UAAU,gBAAhB,YAAnC,KACA,gBAAC,EAAAJ,iBAAD,CAAkBC,SAAS,OAAOQ,eAAa,EAACP,YAAU,GACtD,gBAAC,UAAD,CAAON,GAAG,iBAAiBc,QAAS,CAChCZ,KAAM,WACNa,KAAM,CACFC,OAAQ,CAAC,aAAc,0BAA2B,UAAW,cAAe,mBAAoB,eAAgB,QAAS,kBAAmB,SAC5IC,SAAU,CACN,CACIF,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,UAMzD,gBAAC,EAAAX,iBAAD,CAAkBC,SAAS,aAAaC,YAAU,GAAlD,kUAkBF6B,EAAc,kBAChB,gCACI,sBAAInC,GAAG,gBAAP,gBACA,qBAAGQ,UAAU,QAAb,2CAA4D,qBAAGC,KAAK,wDAAwDC,OAAO,SAASC,IAAI,uBAApF,gBAA5D,oIACA,gBAAC,EAAAP,iBAAD,CAAkBC,SAAS,OAAOQ,eAAa,EAACP,YAAU,GACtD,gBAAC,UAAD,CAAON,GAAG,cAAcc,QAAS,CAC7BZ,KAAM,MACNa,KAAM,CACFC,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACjDC,SAAU,CACN,CACIC,MAAO,SACPH,KAAM,CAAC,GAAI,GAAI,KAEnB,CACIG,MAAO,kBACPH,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAC3Bb,KAAM,UAIlBY,QAAS,CACLO,OAAQ,CACJC,MAAO,CAAC,CACJI,MAAO,CACHK,aAAa,WAOrC,gBAAC,EAAA3B,iBAAD,CAAkBC,SAAS,aAAaC,YAAU,GAAlD,gpBAiCF8B,EAAe,kBACjB,gCACI,sBAAIpC,GAAG,iBAAP,iBACA,6GAAoF,gBAAC,UAAD,CAAUE,KAAK,YAAYC,KAAK,aAApH,2EACA,gBAAC,EAAAC,iBAAD,CAAkBC,SAAS,OAAOQ,eAAa,EAACP,YAAU,GACtD,gBAAC,UAAD,CAAON,GAAG,mBACNc,QAAS,CACLZ,KAAM,MACNa,KAAM,CACFC,OAAQ,CAAC,SAAU,oBAAqB,UAAW,OAAQ,SAAU,QAAS,SAC9EC,SAAU,CACN,CACIF,KAAM,CAAC,MAAO,MAAO,MAAO,KAAM,KAAM,KAAM,UAK9DsB,UAAW,CAAC,aACR,cACA,gBACA,cACA,kBAIZ,gBAAC,EAAAjC,iBAAD,CAAkBC,SAAS,aAAaC,YAAU,GAAlD,sZAwBFgC,E,+VACF,WACI,OACI,gBAAC,EAAAC,aAAD,CAAcC,QAAM,GAChB,gBAAC,UAAD,MACA,gBAAC5B,EAAD,MACA,gBAACkB,EAAD,MACA,gBAACI,EAAD,MACA,gBAACC,EAAD,MACA,gBAACC,EAAD,Y,8BATKK,aAerB,a,w4CCrkBMC,E,0WACF,WACI,MAAmCC,KAAKC,MAAhC5C,EAAR,EAAQA,GAAIc,EAAZ,EAAYA,QAASuB,EAArB,EAAqBA,WAErBQ,OAAM7C,EAAIc,EAASuB,K,oBAGvB,WACI,OACI,0BAAQrC,GAAI2C,KAAKC,MAAM5C,U,8BATfyC,aAcpBC,EAAMI,UAAY,CACd9C,GAAI+C,sBACJjC,QAASiC,sBACTV,UAAWU,YAAkBA,aAGjC,a,kxBCzBA,IA2DA,EA3DqB,SAACC,EAAaX,GAC/B,IA+CQtB,EAASiC,EAATjC,KAER,cACOiC,GADP,IAEIjC,KAAM,CACFC,OAAQD,EAAKC,OACbC,SAAUF,EAAKE,SAASgC,KAAI,SAACC,EAASC,GAAV,OArDb,SAACD,EAASE,GAC7B,IAAQrC,EAAemC,EAAfnC,KAAMb,EAASgD,EAAThD,KAERmD,EAAkB,EAAH,KACdH,GADc,IAEjBI,gBAAiB,GACjBC,YAAa,GACbC,YAAa,EACbC,iBAAkB,IAoCtB,MAjCa,SAATvD,GACAmD,EAAgBK,qBAAuB,GACvCL,EAAgBM,iBAAmB,GACnCN,EAAgBO,sBAAwB,GACxCP,EAAgBQ,0BAA4B,GAC5CR,EAAgBG,YAAc,EAC9BH,EAAgBS,iBAAmB,EACnCT,EAAgBU,YAAc,EAC9BV,EAAgBW,iBAAmB,IAGnCX,EAAgBY,qBAAuB,GACvCZ,EAAgBa,iBAAmB,IAGvCnD,EAAKoD,SAAQ,WACJjE,EAMe,SAATA,IACPmD,EAAgBC,gBAAhB,eAA0CjB,EAAUe,GAApD,QACAC,EAAgBE,YAAhB,eAAsClB,EAAUe,GAAhD,QACAC,EAAgBK,qBAAhB,eAA+CrB,EAAUe,GAAzD,QACAC,EAAgBM,iBAAhB,eAA2CtB,EAAUe,GAArD,QACAC,EAAgBO,sBAAhB,eAAgDvB,EAAUe,GAA1D,QACAC,EAAgBQ,0BAAhB,eAAoDxB,EAAUe,GAA9D,UAXAC,EAAgBC,gBAAgBc,KAAhC,eAA6C/B,EAAUe,GAAvD,SACAC,EAAgBE,YAAYa,KAA5B,eAAyC/B,EAAUe,GAAnD,SACAC,EAAgBY,qBAAqBG,KAArC,eAAkD/B,EAAUe,GAA5D,SACAC,EAAgBa,iBAAiBE,KAAjC,eAA8C/B,EAAUe,GAAxD,aAaDC,EASyCgB,CAAenB,EAASC,U,urBCtDhF,IAkCA,EAlCqB,SAACH,EAAaX,GAC/B,IAsBQtB,EAASiC,EAATjC,KAER,cACOiC,GADP,IAEIjC,KAAM,CACFC,OAAQD,EAAKC,OACbC,SAAUF,EAAKE,SAASgC,KAAI,SAAAC,GAAO,OA5BpB,SAAAA,GACnB,IAAMG,EAAkB,OACjBH,GADc,IAEjBI,gBAAiB,GACjBC,YAAa,GACbU,qBAAsB,GACtBC,iBAAkB,GAClBV,YAAa,EACbC,iBAAkB,IAWtB,OARAP,EAAQnC,KAAKoD,SAAQ,SAACG,EAAGnB,GACrBE,EAAgBC,gBAAgBc,KAAhC,eAA6C/B,EAAUc,GAAvD,SACAE,EAAgBY,qBAAqBG,KAArC,eAAkD/B,EAAUc,GAA5D,SACAE,EAAgBE,YAAYa,KAA5B,eAAyC/B,EAAUc,GAAnD,SACAE,EAAgBa,iBAAiBE,KAAjC,eAA8C/B,EAAUc,GAAxD,YAIGE,EASoCgB,CAAenB,U,urBC7BlE,IA+BA,EA/BsB,SAACF,EAAaX,GAChC,IAkBQnC,EAAwB8C,EAAxB9C,KAAMa,EAAkBiC,EAAlBjC,KAAMD,EAAYkC,EAAZlC,QAEpB,MAAO,CACHZ,OACAa,KAAM,CACFC,OAAQD,EAAKC,OACbC,SAAUF,EAAKE,SAASgC,KAAI,SAACC,EAASC,GAAV,OAxBb,SAACD,EAASE,GAe7B,OAdwB,OACjBF,GADc,IAEjBI,gBAAiB,QAAF,OAAUjB,EAAUe,GAApB,QACfG,YAAa,QAAF,OAAUlB,EAAUe,GAApB,QACXM,qBAAsB,QAAF,OAAUrB,EAAUe,GAApB,QACpBS,0BAA2B,QAAF,OAAUxB,EAAUe,GAApB,QACzBQ,sBAAuB,QAAF,OAAUvB,EAAUe,GAApB,QACrBO,iBAAkB,QAAF,OAAUtB,EAAUe,GAApB,QAChBU,iBAAkB,EAClBN,YAAa,EACbO,YAAa,EACbC,iBAAkB,IAY0BK,CAAenB,EAASC,OAExErC,Y,urBC3BR,IA+BA,EA/B0B,SAACkC,EAAaX,GACpC,IAkBQnC,EAAwB8C,EAAxB9C,KAAMa,EAAkBiC,EAAlBjC,KAAMD,EAAYkC,EAAZlC,QAEpB,MAAO,CACHZ,OACAa,KAAM,CACFC,OAAQD,EAAKC,OACbC,SAAUF,EAAKE,SAASgC,KAAI,SAACC,EAASC,GAAV,OAxBb,SAACD,EAASE,GAe7B,OAdwB,OACjBF,GADc,IAEjBI,gBAAiB,QAAF,OAAUjB,EAAUe,GAApB,UACfG,YAAa,QAAF,OAAUlB,EAAUe,GAApB,QACXM,qBAAsB,QAAF,OAAUrB,EAAUe,GAApB,QACpBS,0BAA2B,QAAF,OAAUxB,EAAUe,GAApB,QACzBQ,sBAAuB,QAAF,OAAUvB,EAAUe,GAApB,QACrBO,iBAAkB,QAAF,OAAUtB,EAAUe,GAApB,QAChBU,iBAAkB,EAClBN,YAAa,EACbO,YAAa,EACbC,iBAAkB,IAY0BK,CAAenB,EAASC,OAExErC,Y,o7CCxBR4B,iDAAoD,EACpDA,qCAAyC,UACzCA,wCAA2C,EAC3CA,qBAAuB,CACnB6B,WADmB,SACP1B,GACR,IAAM2B,EAAQ3B,EAAMxB,OAAO,YAE3BmD,IAAUA,EAAM1D,QAAQ2D,UAAUjD,SAAU,MASpD,IAAMkD,EAAa,CACf,eACA,eACA,eACA,gBACA,gBACA,eACA,eACA,aACA,gBACA,cACA,cACA,eAgFJ,EApBc,SAAC1E,EAAIgD,EAAaX,GAC5B,IAAMsC,EAAUC,SAASC,eAAe7E,GAEpC2E,GAA+B,WAApBA,EAAQG,SACd9B,EAAY9C,MAEL8C,EAAYjC,MA5ClB,SAACgE,EAAK/B,EAAaX,GAC7B,IAAIvB,EAEJ,OAAQkC,EAAY9C,MAChB,IAAK,MACL,IAAK,gBACDY,EAAUkE,EAAahC,EAAaX,GAEpC,MAEJ,IAAK,MACL,IAAK,WACDvB,EAAUmE,EAAajC,EAAaX,GAEpC,MAEJ,IAAK,OACDvB,EAAUoE,EAAclC,EAAaX,GAErC,MAEJ,IAAK,YAEDvB,EAAU,OADVA,EAAUqE,EAAkBnC,EAAaX,IAClC,IAEHnC,KAAM,SAQdY,GACA,IAAI4B,IAAJ,CAAUqC,EAAKjE,GAcXsE,CAAMT,EAAQU,WAAW,MAAOrC,EAAaX,EAAY,GAAH,SAAOqC,EAAWY,MAAM,EAAG,IAA3B,EAAkCjD,IAAaqC,ICnG3Ga,EAAgBX,SAASW,cAE/B,GAAIA,GACIA,EAAcC,aAAa,UAAW,CACtC,IAAMC,EAAK9F,OAAO8F,IAAM,GAExBA,EAAG5C,MAAQA,EAEXlD,OAAO8F,GAAKA","file":"scripts/doc-route.chunk_9.js","sourcesContent":["import React from \"react\";\n\nimport { ComponentPreview } from \"@docutils\";\nimport CodeTags from \"@components/CodeTags\";\n\nconst basename = process.env.basename;\nconst scriptUrl = `${window.location.origin + basename}scripts/dg.js`;\nconst dashboardScriptUrl = `${window.location.origin + basename}scripts/dg-dashboard.js`;\n\nconst QuickStart = () => (\n    <>\n        <h3 id=\"quick-start\">Quick start</h3>\n        <p>To quickly add the dashboard theme to your project, include the snippets below in your project.</p>\n    </>\n);\n\nconst JavaScript = () => (\n    <>\n        <h2 id=\"javascript\">JavaScript</h2>\n        <p>The dashboard theme requires a separate script to run properly. So add the dashboard script below the <CodeTags type=\"secondary\" code=\"scripts\" /> at the bottom\n        of your <CodeTags type=\"primary\" code={\"<body>\"} /> tag like this:</p>\n        <ComponentPreview language=\"html\" codeFigure>\n            <script src={scriptUrl}></script>\n            <script src={dashboardScriptUrl}></script>\n        </ComponentPreview>\n    </>\n);\n\nconst Introduction = () => (\n    <>\n        <h2 id=\"introduction\">Introduction</h2>\n        <p className=\"lead\">\n            We are using <a href=\"https://www.chartjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">chart.js</a> to generate the charts.\n            Our script is mainly just a wrapper around that library to add the correct styling etc.\n        </p>\n        <p>Most options and settings available in the chart.js documentation will be available.</p>\n        <p>For now, the following chart types are available:</p>\n        <ul>\n            <li><CodeTags type=\"secondary\" code={\"\\\"line\\\"\"} /></li>\n            <li><CodeTags type=\"secondary\" code={\"\\\"bar\\\"/\\\"horizontalBar\\\"\"} /></li>\n            <li><CodeTags type=\"secondary\" code={\"\\\"pie\\\"/\\\"doughnut\\\"\"} /></li>\n        </ul>\n        <QuickStart />\n        <JavaScript />\n    </>\n);\n\nexport default Introduction;\n\n/* For testing */\nexport { QuickStart, JavaScript };\n","import React, { Component } from \"react\";\n\nimport { ComponentPreview, DocContainer } from \"@docutils\";\nimport Chart from \"@components/Chart\";\nimport CodeTags from \"@components/CodeTags\";\nimport Introduction from \"./Introduction\";\n\nconst LineChart = () => (\n    <>\n        <h2 id=\"line-chart\">Line chart</h2>\n        <p className=\"lead\">If Johnny Cash could, then you too should be able to...</p>\n        <p>A line chart is a way of plotting data points on a line. Often, it is used to show trend data, or the comparison of two data sets.</p>\n        <p>See <a href=\"https://www.chartjs.org/docs/latest/charts/line.html\" target=\"_blank\" rel=\"noopener noreferrer\">chart.js</a> for more information on line charts.</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"simple-line-chart\" options={{\n                type: \"line\",\n                data: {\n                    labels: [\"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"],\n                    datasets: [\n                        {\n                            label: \"Peak\",\n                            data: [261, 673, 962, 1067, 1007, 779]\n                        }\n                    ]\n                }\n            }} />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"simple-line-chart\", {\n    type: \"line\",\n    data: {\n        labels: [\"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"],\n        datasets: [\n            {\n                label: \"Peak\",\n                data: [261, 673, 962, 1067, 1007, 779]\n            }\n        ]\n    }\n});\n                `}\n        </ComponentPreview>\n\n        <h3>Stepped and dashed line</h3>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"stepped-dashed-line-chart\" options={{\n                type: \"line\",\n                data: {\n                    labels: [\"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"],\n                    datasets: [\n                        {\n                            label: \"Active users\",\n                            data: [1815, 1958, 2080, 2210, 2341, 2471, 2600, 2725],\n                            steppedLine: true\n                        },\n                        {\n                            label: \"Registered users\",\n                            data: [2196, 2327, 2421, 2573, 2644, 2767, 2913, 3004],\n                            borderDash: [15, 5]\n                        }\n                    ]\n                }\n            }} />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"stepped-dashed-line-chart\", {\n    type: \"line\",\n    data: {\n        labels: [\"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"],\n        datasets: [\n            {\n                label: \"Active users\",\n                data: [1815, 1958, 2080, 2210, 2341, 2471, 2600, 2725],\n                steppedLine: true\n            },\n            {\n                label: \"Registered users\",\n                data: [2196, 2327, 2421, 2573, 2644, 2767, 2913, 3004],\n                borderDash: [15, 5]\n            }\n        ]\n    }\n});\n                `}\n        </ComponentPreview>\n\n        <h3>Advanced options</h3>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"advanced-line-chart\" options={{\n                type: \"line\",\n                data: {\n                    labels: [\"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"],\n                    datasets: [\n                        {\n                            label: \"DotA2 TI Prize Pool\",\n                            data: [1.6, 1.6, 2.87, 10.92, 18.42, 20.77, 24.78, 25.53]\n                        },\n                        {\n                            label: \"LoL World Championship Prize Pool\",\n                            data: [0.1, 2, 2.05, 2.13, 2.13, 5.07, 4.94, 2.25]\n                        }\n                    ]\n                },\n                options: {\n                    scales: {\n                        yAxes: [{\n                            scaleLabel: {\n                                display: true,\n                                labelString: \"In millions\"\n                            },\n                            ticks: {\n                                callback: value => `$${value}`\n                            }\n                        }]\n                    }\n                }\n            }} />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"advanced-line-chart\", {\n    type: \"line\",\n    data: {\n        labels: [\"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"],\n        datasets: [\n            {\n                label: \"DotA2 TI Prize Pool\",\n                data: [1.6, 1.6, 2.87, 10.92, 18.42, 20.77, 24.78, 25.53]\n            },\n            {\n                label: \"LoL World Championship Prize Pool\",\n                data: [0.1, 2, 2.05, 2.13, 2.13, 5.07, 4.94, 2.25]\n            }\n        ]\n    },\n    options: {\n        scales: {\n            yAxes: [{\n                scaleLabel: {\n                    display: true,\n                    labelString: \"In millions\"\n                },\n                ticks: {\n                    callback: value => \\`$\\${value}\\`\n                }\n            }]\n        }\n    }\n});\n                `}\n        </ComponentPreview>\n\n        <h3>With fill</h3>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"line-fill-chart\" options={{\n                type: \"line-fill\",\n                data: {\n                    labels: [\"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"],\n                    datasets: [\n                        {\n                            label: \"Peak\",\n                            data: [261, 673, 962, 1067, 1007, 779],\n                            fill: true\n                        }\n                    ]\n                }\n            }} />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"line-fill-chart\", {\n    type: \"line-fill\",\n    data: {\n        labels: [\"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"],\n        datasets: [\n            {\n                label: \"Peak\",\n                data: [261, 673, 962, 1067, 1007, 779],\n                fill: true\n            }\n        ]\n    }\n});\n                `}\n        </ComponentPreview>\n    </>\n);\n\nconst BarChart = () => (\n    <>\n        <h2 id=\"bar-chart\">Bar chart</h2>\n        <p className=\"lead\">A priest and a rabbi walked into a bar...</p>\n        <p>A bar chart provides a way of showing data values represented as vertical bars. It is sometimes used to show trend data, and the comparison of multiple data sets side by side.</p>\n        <p>See <a href=\"https://www.chartjs.org/docs/latest/charts/bar.html\" target=\"_blank\" rel=\"noopener noreferrer\">chart.js</a> for more information on bar charts.</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"simple-bar-chart\" options={{\n                type: \"bar\",\n                data: {\n                    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n                    datasets: [\n                        {\n                            label: \"Hours of daylight\",\n                            data: [6.75, 9.25, 11.75, 14.5, 17, 18.75, 18, 15.5, 13, 10.25, 7.5, 6]\n                        }\n                    ]\n                },\n                options: {\n                    scales: {\n                        yAxes: [{\n                            ticks: {\n                                beginAtZero: true\n                            }\n                        }]\n                    }\n                }\n            }} />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"simple-bar-chart\", {\n    type: \"bar\",\n    data: {\n        labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n        datasets: [\n            {\n                label: \"Hours of daylight\",\n                data: [6.75, 9.25, 11.75, 14.5, 17, 18.75, 18, 15.5, 13, 10.25, 7.5, 6]\n            }\n        ]\n    },\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    beginAtZero: true\n                }\n            }]\n        }\n    }\n});\n        `}\n        </ComponentPreview>\n\n        <h3>Multiple datasets</h3>\n        <p>You can add multiple datasets</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"multi-bar-chart\" options={{\n                type: \"bar\",\n                data: {\n                    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n                    datasets: [\n                        {\n                            label: \"Hours of daylight\",\n                            data: [6.75, 9.25, 11.75, 14.5, 17, 18.75, 18, 15.5, 13, 10.25, 7.5, 6]\n                        },\n                        {\n                            label: \"Total rain (in cm)\",\n                            data: [4.9, 3.6, 4.7, 4.1, 5.3, 6.5, 8.1, 8.9, 9, 8.4, 7.3, 5.5]\n                        },\n                        {\n                            label: \"Average temperature (in celcius)\",\n                            data: [-1.7, -4.1, -2.3, 6.5, 16.1, 17.9, 22.2, 16.3, 12.5, 7.4, 1.6, -1.5]\n                        }\n                    ]\n                },\n                options: {\n                    scales: {\n                        yAxes: [{\n                            ticks: {\n                                beginAtZero: true\n                            }\n                        }]\n                    }\n                }\n            }} />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"multi-bar-chart\", {\n    type: \"bar\",\n    data: {\n        labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n        datasets: [\n            {\n                label: \"Hours of daylight\",\n                data: [6.75, 9.25, 11.75, 14.5, 17, 18.75, 18, 15.5, 13, 10.25, 7.5, 6]\n            },\n            {\n                label: \"Total rain (in cm)\",\n                data: [4.9, 3.6, 4.7, 4.1, 5.3, 6.5, 8.1, 8.9, 9, 8.4, 7.3, 5.5]\n            },\n            {\n                label: \"Average temperature (in celcius)\",\n                data: [-1.7, -4.1, -2.3, 6.5, 16.1, 17.9, 22.2, 16.3, 12.5, 7.4, 1.6, -1.5]\n            }\n        ]\n    },\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    beginAtZero: true\n                }\n            }]\n        }\n    }\n});\n            `}\n        </ComponentPreview>\n\n        <h3>Stacked bar</h3>\n        <p className=\"lead\">You can stack, because a stacked bar is almost as good as a stocked one</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"stacked-multi-bar-chart\" options={{\n                type: \"bar\",\n                data: {\n                    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n                    datasets: [\n                        {\n                            label: \"Paid with cash\",\n                            data: [19, 23, 29, 24, 28, 33, 21, 24, 20, 17, 23, 24]\n                        },\n                        {\n                            label: \"Paid with credit card\",\n                            data: [31, 29, 32, 17, 25, 32, 28, 30, 24, 22, 20, 37]\n                        },\n                        {\n                            label: \"Paid with Vipps\",\n                            data: [11, 9, 7, 12, 4, 13, 8, 10, 4, 1, 13, 16]\n                        }\n                    ]\n                },\n                options: {\n                    scales: {\n                        yAxes: [{\n                            stacked: true,\n                            ticks: {\n                                beginAtZero: true\n                            }\n                        }],\n                        xAxes: [{\n                            stacked: true\n                        }]\n                    }\n                }\n            }} />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"stacked-multi-bar-chart\", {\n    type: \"bar\",\n    data: {\n        labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n        datasets: [\n            {\n                label: \"Paid with cash\",\n                data: [19, 23, 29, 24, 28, 33, 21, 24, 20, 17, 23, 24]\n            },\n            {\n                label: \"Paid with credit card\",\n                data: [31, 29, 32, 17, 25, 32, 28, 30, 24, 22, 20, 37]\n            },\n            {\n                label: \"Paid with Vipps\",\n                data: [11, 9, 7, 12, 4, 13, 8, 10, 4, 1, 13, 16]\n            }\n        ]\n    },\n    options: {\n        scales: {\n            yAxes: [{\n                stacked: true,\n                ticks: {\n                    beginAtZero: true\n                }\n            }],\n            xAxes: [{\n                stacked: true\n            }]\n        }\n    }\n});\n                `}\n        </ComponentPreview>\n    </>\n);\n\nconst DoughnutAndPieCharts = () => (\n    <>\n        <h2 id=\"doughnut-and-pie-charts\">Doughnut and Pie charts</h2>\n        <p className=\"lead\">Stress cannot exist in the presence of pie...</p>\n        <p>Pie and doughnut charts are probably the most commonly used charts. They are divided into segments, the arc of each segment shows the proportional value of each piece of data.</p>\n        <p>See <a href=\"https://www.chartjs.org/docs/latest/charts/doughnut.html\" target=\"_blank\" rel=\"noopener noreferrer\">chart.js</a> for more information on doughnut and pie charts.</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"simple-pie-chart\" options={{\n                type: \"pie\",\n                data: {\n                    labels: [\"Chrome\", \"Internet Explorer\", \"Firefox\", \"Edge\", \"Safari\", \"Opera\", \"Other\"],\n                    datasets: [\n                        {\n                            data: [63.14, 11.43, 10.23, 4.34, 3.83, 1.56, 4.19]\n                        }\n                    ]\n                }\n            }} />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"simple-pie-chart\", {\n    type: \"pie\",\n    data: {\n        labels: [\"Chrome\", \"Internet Explorer\", \"Firefox\", \"Edge\", \"Safari\", \"Opera\", \"Other\"],\n        datasets: [\n            {\n                data: [63.14, 11.43, 10.23, 4.34, 3.83, 1.56, 4.19]\n            }\n        ]\n    }\n});\n            `}\n        </ComponentPreview>\n\n        <h2>Doughnut</h2>\n        <p className=\"lead\">Did anyone say <code className=\"token string\">doughnut</code>?</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"doughnut-chart\" options={{\n                type: \"doughnut\",\n                data: {\n                    labels: [\"PC and Mac\", \"Smartphones and Tablets\", \"PS4/PRO\", \"VR Headsets\", \"Xbox one/Scorpio\", \"Web Browsers\", \"Linux\", \"Nintendo Switch\", \"Other\"],\n                    datasets: [\n                        {\n                            data: [53, 38, 27, 24, 22, 13, 7, 3, 9]\n                        }\n                    ]\n                }\n            }} />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"doughnut-chart\", {\n    type: \"doughnut\",\n    data: {\n        labels: [\"Chrome\", \"Internet Explorer\", \"Firefox\", \"Edge\", \"Safari\", \"Opera\", \"Other\"],\n        datasets: [\n            {\n                data: [63.14, 11.43, 10.23, 4.34, 3.83, 1.56, 4.19]\n            }\n        ]\n    }\n});\n        `}\n        </ComponentPreview>\n    </>\n);\n\nconst MixingTypes = () => (\n    <>\n        <h2 id=\"mixing-types\">Mixing types</h2>\n        <p className=\"lead\">With Chart.js, it is possible to create <a href=\"https://www.chartjs.org/docs/latest/charts/mixed.html\" target=\"_blank\" rel=\"noopener noreferrer\">mixed charts</a> that are a combination of two or more different chart types. A common example is a bar chart that also includes a line dataset.</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"mixed-chart\" options={{\n                type: \"bar\",\n                data: {\n                    labels: [\"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"],\n                    datasets: [\n                        {\n                            label: \"Growth\",\n                            data: [20, 25, 30]\n                        },\n                        {\n                            label: \"Expected Growth\",\n                            data: [20, 25, 30, 35, 40, 45],\n                            type: \"line\"\n                        }\n                    ]\n                },\n                options: {\n                    scales: {\n                        yAxes: [{\n                            ticks: {\n                                beginAtZero: true\n                            }\n                        }]\n                    }\n                }\n            }} />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"mixed-chart\", {\n    type: \"bar\",\n    data: {\n        labels: [\"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"],\n        datasets: [\n            {\n                label: \"Growth\",\n                data: [20, 25, 30]\n            },\n            {\n                label: \"Expected Growth\",\n                data: [20, 25, 30, 35, 40, 45],\n                type: \"line\" // Changes this dataset to become a line\n            }\n        ]\n    },\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    beginAtZero: true\n                }\n            }]\n        }\n    }\n});\n        `}\n        </ComponentPreview>\n    </>\n);\n\nconst CustomColors = () => (\n    <>\n        <h2 id=\"custom-colors\">Custom colors</h2>\n        <p>Except for the three first colors, the rest of the colors are customizable. Call <CodeTags type=\"secondary\" code=\"dg.chart\" /> with a last optional argument consisting of a list of RGB color codes.</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <Chart id=\"custom-color-pie\"\n                options={{\n                    type: \"pie\",\n                    data: {\n                        labels: [\"Chrome\", \"Internet Explorer\", \"Firefox\", \"Edge\", \"Safari\", \"Opera\", \"Other\"],\n                        datasets: [\n                            {\n                                data: [63.14, 11.43, 10.23, 4.34, 3.83, 1.56, 4.19]\n                            }\n                        ]\n                    }\n                }}\n                colorPool={[\"81, 43, 43\",\n                    \"81, 151, 27\",\n                    \"163, 139, 128\",\n                    \"114, 96, 94\",\n                    \"197, 19, 28\"\n                ]}\n            />\n        </ComponentPreview>\n        <ComponentPreview language=\"javascript\" codeFigure >\n            {`\ndg.chart(\"custom-color-pie\", {\n    type: \"pie\",\n    data: {\n        labels: [\"Chrome\", \"Internet Explorer\", \"Firefox\", \"Edge\", \"Safari\", \"Opera\", \"Other\"],\n        datasets: [\n            {\n                data: [63.14, 11.43, 10.23, 4.34, 3.83, 1.56, 4.19]\n            }\n        ]\n    }\n},\n[\"81, 43, 43\",\n\"81, 151, 27\",\n\"163, 139, 128\",\n\"114, 96, 94\",\n\"197, 19, 28\"]);\n            `}\n        </ComponentPreview>\n\n    </>\n);\n\nclass Charts extends Component {\n    render () {\n        return (\n            <DocContainer docToc>\n                <Introduction />\n                <LineChart />\n                <BarChart />\n                <DoughnutAndPieCharts />\n                <MixingTypes />\n                <CustomColors />\n            </DocContainer>\n        );\n    }\n}\n\nexport default Charts;\n\n/* For testing */\nexport { LineChart, BarChart, DoughnutAndPieCharts, MixingTypes, CustomColors };\n\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { chart } from \"@src/scripts/dashboard\";\n\nclass Chart extends Component {\n    componentDidMount () {\n        const { id, options, colorPool } = this.props;\n\n        chart(id, options, colorPool);\n    }\n\n    render () {\n        return (\n            <canvas id={this.props.id} />\n        );\n    }\n}\n\nChart.propTypes = {\n    id: PropTypes.string.isRequired,\n    options: PropTypes.object.isRequired,\n    colorPool: PropTypes.arrayOf(PropTypes.string)\n};\n\nexport default Chart;\n","const initBarChart = (userOptions, colorPool) => {\n    const prepareDataset = (dataset, index) => {\n        const { data, type } = dataset;\n\n        const preparedDataset = {\n            ...dataset,\n            backgroundColor: [],\n            borderColor: [],\n            borderWidth: 1,\n            hoverBorderWidth: 2\n        };\n\n        if (type === \"line\") {\n            preparedDataset.pointBackgroundColor = [];\n            preparedDataset.pointBorderColor = [];\n            preparedDataset.pointHoverBorderColor = [];\n            preparedDataset.pointHoverBackgroundColor = [];\n            preparedDataset.borderWidth = 4;\n            preparedDataset.pointBorderWidth = 2;\n            preparedDataset.pointRadius = 3;\n            preparedDataset.pointHoverRadius = 6;\n\n        } else {\n            preparedDataset.hoverBackgroundColor = [];\n            preparedDataset.hoverBorderColor = [];\n        }\n\n        data.forEach(() => {\n            if (!type) {\n                preparedDataset.backgroundColor.push(`rgba(${colorPool[index]}, 1)`);\n                preparedDataset.borderColor.push(`rgba(${colorPool[index]}, 1)`);\n                preparedDataset.hoverBackgroundColor.push(`rgba(${colorPool[index]}, 1)`);\n                preparedDataset.hoverBorderColor.push(`rgba(${colorPool[index]}, 1)`);\n\n            } else if (type === \"line\") {\n                preparedDataset.backgroundColor = `rgba(${colorPool[index]}, 1)`;\n                preparedDataset.borderColor = `rgba(${colorPool[index]}, 1)`;\n                preparedDataset.pointBackgroundColor = `rgba(${colorPool[index]}, 1)`;\n                preparedDataset.pointBorderColor = `rgba(${colorPool[index]}, 1)`;\n                preparedDataset.pointHoverBorderColor = `rgba(${colorPool[index]}, 1)`;\n                preparedDataset.pointHoverBackgroundColor = `rgba(${colorPool[index]}, 1)`;\n            }\n\n        });\n\n        return preparedDataset;\n    };\n\n    const { data } = userOptions;\n\n    return {\n        ...userOptions,\n        data: {\n            labels: data.labels,\n            datasets: data.datasets.map((dataset, i) => prepareDataset(dataset, i))\n        }\n    };\n};\n\nexport default initBarChart;\n","const initPieChart = (userOptions, colorPool) => {\n    const prepareDataset = dataset => {\n        const preparedDataset = {\n            ...dataset,\n            backgroundColor: [],\n            borderColor: [],\n            hoverBackgroundColor: [],\n            hoverBorderColor: [],\n            borderWidth: 1,\n            hoverBorderWidth: 2\n        };\n\n        dataset.data.forEach((d, i) => {\n            preparedDataset.backgroundColor.push(`rgba(${colorPool[i]}, 1)`);\n            preparedDataset.hoverBackgroundColor.push(`rgba(${colorPool[i]}, 1)`);\n            preparedDataset.borderColor.push(`rgba(${colorPool[i]}, 1)`);\n            preparedDataset.hoverBorderColor.push(`rgba(${colorPool[i]}, 1)`);\n\n        });\n\n        return preparedDataset;\n    };\n\n    const { data } = userOptions;\n\n    return {\n        ...userOptions,\n        data: {\n            labels: data.labels,\n            datasets: data.datasets.map(dataset => prepareDataset(dataset))\n        }\n    };\n};\n\nexport default initPieChart;\n","const initLineChart = (userOptions, colorPool) => {\n    const prepareDataset = (dataset, index) => {\n        const preparedDataset = {\n            ...dataset,\n            backgroundColor: `rgba(${colorPool[index]}, 1)`,\n            borderColor: `rgba(${colorPool[index]}, 1)`,\n            pointBackgroundColor: `rgba(${colorPool[index]}, 1)`,\n            pointHoverBackgroundColor: `rgba(${colorPool[index]}, 1)`,\n            pointHoverBorderColor: `rgba(${colorPool[index]}, 1)`,\n            pointBorderColor: `rgba(${colorPool[index]}, 1)`,\n            pointBorderWidth: 2,\n            borderWidth: 4,\n            pointRadius: 3,\n            pointHoverRadius: 6\n        };\n\n        return preparedDataset;\n    };\n\n    const { type, data, options } = userOptions;\n\n    return {\n        type,\n        data: {\n            labels: data.labels,\n            datasets: data.datasets.map((dataset, i) => prepareDataset(dataset, i))\n        },\n        options\n    };\n};\n\nexport default initLineChart;\n","const initLineFillChart = (userOptions, colorPool) => {\n    const prepareDataset = (dataset, index) => {\n        const preparedDataset = {\n            ...dataset,\n            backgroundColor: `rgba(${colorPool[index]}, 0.1)`,\n            borderColor: `rgba(${colorPool[index]}, 1)`,\n            pointBackgroundColor: `rgba(${colorPool[index]}, 1)`,\n            pointHoverBackgroundColor: `rgba(${colorPool[index]}, 1)`,\n            pointHoverBorderColor: `rgba(${colorPool[index]}, 1)`,\n            pointBorderColor: `rgba(${colorPool[index]}, 1)`,\n            pointBorderWidth: 2,\n            borderWidth: 4,\n            pointRadius: 3,\n            pointHoverRadius: 6\n        };\n\n        return preparedDataset;\n    };\n\n    const { type, data, options } = userOptions;\n\n    return {\n        type,\n        data: {\n            labels: data.labels,\n            datasets: data.datasets.map((dataset, i) => prepareDataset(dataset, i))\n        },\n        options\n    };\n};\n\nexport default initLineFillChart;\n","import Chart from \"chart.js\";\n\n// Set global defaults for Chart\nChart.defaults.global.legend.labels.usePointStyle = true;\nChart.defaults.global.defaultFontColor = \"#512B2B\"; // Brand secondary as font color\nChart.defaults.global.elements.line.fill = false;\nChart.plugins.register({\n    beforeDraw (chart) {\n        const xAxis = chart.scales[\"x-axis-0\"];\n\n        xAxis && (xAxis.options.gridLines.display = false); // Check whether this type of chart have x-axis, if so, remove the x-axis gridline\n    }\n});\n\nimport initBarChart from \"./bar\";\nimport initPieChart from \"./pie\";\nimport initLineChart from \"./line\";\nimport initLineFillChart from \"./line-fill\";\n\nconst _colorPool = [\n    \"253, 193, 41\", // brand primary\n    \"238, 112, 35\", // brand tertiary\n    \"49, 163, 174\", // brand accent\n    \"138, 205, 195\", // info turquoise\n    \"239, 183, 182\", // info pink\n    \"37, 120, 134\", // brand accent link\n    \"69, 114, 192\", // neutral/info\n    \"81, 43, 43\", // brand secondary\n    \"163, 139, 128\", // brand secondary light 2\n    \"114, 96, 94\", // brand secondary light\n    \"197, 19, 28\", // danger\n    \"81, 151, 27\" // success\n];\n\n// Shades of green\nconst _colorPoolGreen = [\n    \"45, 169, 68\", // original\n    \"11, 93, 30\",\n    \"5, 59, 6\",\n    \"28, 105, 42\",\n    \"65, 245, 99\",\n    \"48, 182, 73\",\n    \"38, 143, 58\"\n    // \"0, 67, 0\", // darkened 40%\n    // \"147, 255, 170\", // lightened 40%\n    // \"0, 93, 0\", // darkened 30%\n    // \"122, 246, 145\", // lightened 30%\n    // \"0, 118, 17\", // darkened 20%\n    // \"96, 220, 119\", // lightened 20%\n    // \"20, 144, 43\", // darkened 10%\n    // \"71, 195, 94\" // lightened 10%\n];\n\nconst _init = (ctx, userOptions, colorPool) => {\n    let options;\n\n    switch (userOptions.type) {\n        case \"bar\":\n        case \"horizontalBar\":\n            options = initBarChart(userOptions, colorPool);\n\n            break;\n\n        case \"pie\":\n        case \"doughnut\":\n            options = initPieChart(userOptions, colorPool);\n\n            break;\n\n        case \"line\":\n            options = initLineChart(userOptions, colorPool);\n\n            break;\n\n        case \"line-fill\":\n            options = initLineFillChart(userOptions, colorPool);\n            options = {\n                ...options,\n                type: \"line\"\n            };\n\n            break;\n        default:\n            console.warn(`Chart: Chart type \"${userOptions.type}\" is not supported.`);\n    }\n\n    if (options) {\n        new Chart(ctx, options);\n    }\n};\n\nconst chart = (id, userOptions, colorPool) => {\n    const element = document.getElementById(id);\n\n    if (element && element.tagName === \"CANVAS\") {\n        if (!userOptions.type) {\n            console.warn(\"Chart: You need to specify a chart type.\");\n        } else if (!userOptions.data) {\n            console.warn(\"Chart: You need to provide options.data.\");\n        } else {\n            // ..._colorPool.slice(0, 3) is due to the three first colors always having to be included (because of branding)\n            _init(element.getContext(\"2d\"), userOptions, colorPool ? [..._colorPool.slice(0, 3), ...colorPool] : _colorPool);\n        }\n\n    } else if (element) {\n        console.warn(`Chart: Element with id \"${id}\" is not of type canvas.`);\n    } else {\n        console.warn(`Chart: No element with id \"${id}\" found.`);\n    }\n};\n\nexport default chart;\n\n/* For testing */\nexport { _colorPool, _colorPoolGreen };\n","import chart from \"./chart\";\n\nconst currentScript = document.currentScript;\n\nif (currentScript) {\n    if (currentScript.getAttribute(\"global\")) {\n        const dg = window.dg || {};\n\n        dg.chart = chart;\n\n        window.dg = dg;\n    }\n}\n\nexport default { chart };\n\nexport {\n    chart\n};\n"],"sourceRoot":""}