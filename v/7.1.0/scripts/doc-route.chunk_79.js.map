{"version":3,"sources":["webpack://@swedbankpay/design-guide/./src/App/Patterns/content/Forms/constants.js","webpack://@swedbankpay/design-guide/./src/App/Patterns/content/Forms/index.js","webpack://@swedbankpay/design-guide/./src/App/components/FormComponents/Radio.js","webpack://@swedbankpay/design-guide/./src/App/components/Steps/index.js"],"names":["formsShowCase","id","tabsId","hideOptions","elements","tab","component","className","InputGroup","type","label","placeholder","optional","selectOptions","Checkbox","Link","linkText","rightIcon","Button","options","checkbox","inputs","title","description","steps","subtitle","completed","ongoing","selected","Radio","group","groupTitle","checked","name","icon","guidelinesElementsList","element","text","to","radioOptions","Overview","ComponentPreview","language","showCasePanel","showCasePanelAdvanced","noOptions","removeOuterTag","ContentGuidelines","tooltip","map","key","HowToDesignForms","useState","showInput","setShowInput","toLowerCase","defaultChecked","htmlFor","onClick","href","src","process","validationState","helpBlock","errorMessage","defaultValue","DeveloperDocumentation","CodeTags","code","codeFigure","LoginForm","error","defaultPassword","defaultEmail","passwordId","emailId","checkboxId","disabled","DocContainer","required","attrs","i","propTypes","PropTypes","require","DefaultSteps","StepsContent","index","RenderSteps","clickable","classnames","RenderStepsNav","clickableItem","some","item","arrowLeft","arrowRight","Steps","vertical","stepsClasses"],"mappings":"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","file":"scripts/doc-route.chunk_79.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Button from \"@components/Button\";\nimport Checkbox from \"@components/FormComponents/Checkbox\";\nimport InputGroup from \"@components/InputGroup\";\nimport Links from \"@components/Link\";\nimport ProgressSteps from \"@components/Steps\";\nimport RadioButton from \"@components/FormComponents/Radio\";\n\nconst steps = [\n    {\n        title: \"Step one\",\n        subtitle: \"Authentication\",\n        completed: true\n\n    },\n    {\n        title: \"Step two\",\n        ongoing: true,\n        selected: true\n    },\n    {\n        title: \"Step three\"\n    },\n    {\n        title: \"Step four\"\n    }\n];\n\nconst radioOptions = [\n    {\n        label: \"Option 1\",\n        id: \"options-1\",\n        checked: true\n    },\n    {\n        label: \"Option 2\",\n        id: \"options-2\"\n    },\n    {\n        label: \"Option 3\",\n        id: \"options-3\"\n    }\n];\n\nexport const formsShowCase = {\n    id: \"overview-forms\",\n    tabsId: \"overview-forms-tabs\",\n    hideOptions: true,\n    elements: [\n        {\n            tab: \"Form\",\n            component:\n            <div className=\"col-md-10 col-12 px-0\">\n                <form>\n                    <fieldset>\n                        <legend>\n                            <span className=\"h2\">Contact us</span>\n                        </legend>\n                        <div className=\"col-12 col-sm-9 px-0\">\n                            <InputGroup id=\"form-email-example\" type=\"email\" label=\"E-mail\"/>\n                            <InputGroup type=\"select\" label=\"Subject\" placeholder=\"Select a subject\" optional selectOptions={[\"Subject 1\", \"Subject 2\", \"Subject 3\"]}/>\n                        </div>\n                        <InputGroup id=\"form-textarea-example\" type=\"textarea\" label=\"Message\" />\n                        <Checkbox\n                            id=\"forms-template-checkbox-example\"\n                            label={<>I have read and accept Swedbank Pays&#39;s&nbsp;<Links linkText=\"privacy policy\" rightIcon=\"launch\" /></>} />{\"\\n\"}\n                        <Button type=\"primary\" label=\"Send message\" className=\"mt-3\"/>\n                    </fieldset>\n                </form>\n            </div>,\n            options: {\n                checkbox: [{ inputs: [{}] }]\n            },\n            title: \"Form\",\n            description: \"This in an example of a single page contact form using a collection of components including input fields, select list, checkbox and button.\"\n        },\n        {\n            tab: \"Multi-step form\",\n            component:\n            <div className=\"col-md-10 col-12 px-0\">\n                <form>\n                    <ProgressSteps steps={steps} />\n                    <fieldset className=\"\">\n                        <legend>\n                            <span className=\"h2\">Step two</span>\n                        </legend>\n                        <div className=\"row mb-4\">\n                            <InputGroup id=\"multi-form-example-1\" type=\"text\" label=\"Label\" className=\"col-12 col-sm-6\"/>\n                            <InputGroup id=\"multi-form-example-2\" type=\"text\" label=\"Label\" className=\"col-12 col-sm-6\"/>\n                        </div>\n                        <InputGroup id=\"multi-form-example-3\" type=\"text\" label=\"Label\" className=\"mb-4\"/>\n                        <RadioButton group groupTitle=\"Input label\" options={radioOptions} name=\"multi-step-radio-example\" className=\"mb-4\"/>\n                        <div className=\"d-flex justify-content-between mt-2\">\n                            <Button type=\"secondary\" icon=\"arrow_back\" label=\"Back\"/>\n                            <Button type=\"primary\" label=\"Next step\"/>\n                        </div>\n                    </fieldset>\n                </form>\n            </div>,\n            options: {\n                checkbox: [{ inputs: [{}] }]\n            },\n            title: \"Multi-step form\",\n            description: \"This in an example of a multi-page form using a collection of components including a stepper, input fields, radio buttons and buttons.\"\n        }\n    ]\n};\n\nexport const guidelinesElementsList = [\n    {\n        element: \"Headings\",\n        text: \"A title should be used to describe the form and section headings to describe sections within the form.\"\n    },\n    {\n        element: \"Labels\",\n        text: \"Input labels help users understand what information to provide in the corresponding input.\"\n    },\n    {\n        element: \"Input fields\",\n        text: <><Link to=\"/components/input-field\">Input fields</Link> enable users to input free-form text.</>\n    },\n    {\n        element: \"Data inputs\",\n        text: <>Information can be entered a variety of non-free form input field, <Link to=\"/components/checkbox\">checkboxes</Link>, <Link to=\"/components/radio-button\">radio button</Link>, <Link to=\"/components/select\">select</Link>, <Link to=\"/components/datepickers\">date pickers</Link>, <Link to=\"/components/togglebox\">toggle-box</Link> and <Link to=\"/components/rangeslider\">rangesliders</Link>.</>\n    },\n    {\n        element: \"Help\",\n        text: \"Provides in-context guidance for the user through a placeholder text or a clickable help icon\"\n    },\n    {\n        element: \"Buttons\",\n        text: <><Link to=\"/components/buttons\">Buttons</Link> allows users to submit or exit a form, use a primary button for the main action, secondary button for secondary actions and a link button to cancel.</>\n    }\n];\n","import React, { useState } from \"react\";\nimport { DocContainer } from \"@docutils\";\n\nimport Button from \"@components/Button\";\nimport Checkbox from \"@components/FormComponents/Checkbox\";\nimport CodeTags from \"@components/CodeTags\";\nimport InputGroup from \"@components/InputGroup\";\nimport RadioButton from \"@components/FormComponents/Radio\";\n\nimport LoginForm from \"../../components/LoginForm/index\";\n\nimport { ComponentPreview } from \"~/src/App/docutils\";\nimport { guidelinesElementsList, formsShowCase } from \"./constants\";\n\nconst radioOptions = [\n    {\n        label: \"Option 1\",\n        id: \"guidelines-options-1\",\n        checked: true\n    },\n    {\n        label: \"Option 2\",\n        id: \"guidelines-options-2\"\n    },\n    {\n        label: \"Option 3\",\n        id: \"guidelines-options-3\"\n    }\n];\n\nconst Overview = () => (\n    <section>\n        <h2 id=\"overview\">Overview</h2>\n\n        <p>A form can include different type of user input components that can be arranged in different ways depending on your specific context and needs. You might for example design a form for a user to sign up for or log into an account, register for a service, reconfigure settings, take a survey, purchase a product or provide feedback.</p>\n        <ComponentPreview language=\"html\" showCasePanel showCasePanelAdvanced={formsShowCase} noOptions removeOuterTag/>\n    </section>\n);\n\nconst ContentGuidelines = () => (\n    <section>\n        <h2 id=\"content-guidelines\">Content guidelines</h2>\n        <div className=\"slab slab-plain py-5 px-0\">\n            <div className=\"col-12 col-sm-6 m-auto\">\n                <h3 className=\"mb-0\">Title</h3>\n                <div className=\"slab slab-primary d-flex justify-content-center mb-0 py-2 extra-small\">32px</div>\n                <InputGroup id=\"guideline-input-example\" type=\"text\" label=\"Input label\" placeholder=\"Placeholer text\" tooltip className=\"mb-0\"/>\n                <div className=\"slab slab-primary d-flex justify-content-center mb-0 py-1 extra-small\">24px</div>\n                <InputGroup type=\"select\" label=\"Input label\" placeholder=\"Select an option\" selectOptions={[\"Option 1\", \"Option 2\"]} optional className=\"mb-0\"/>\n                <div className=\"slab slab-primary d-flex justify-content-center mb-0 py-1 extra-small\">24px</div>\n                <RadioButton groupTitle=\"Input label\" name=\"guidelines-radio-example\" group options={radioOptions} className=\"mb-0\"/>\n                <div className=\"slab slab-primary d-flex justify-content-center mb-0 py-2 extra-small\">32px</div>\n                <div className=\"d-flex justify-content-between\">\n                    <Button type=\"primary\" label=\"Submit\"/>\n                    <Button type=\"link\" label=\"Cancel\"/>\n                </div>\n            </div>\n        </div>\n        <p>Form are comprised of some or all of the following elements:</p>\n        <ul className=\"list list-bullet\">\n            {guidelinesElementsList.map(({ element, text }) => (\n                <li key={element}>\n                    <b>{element}</b> {text}\n                </li>\n            ))}\n        </ul>\n        <h3>Spacing</h3>\n        <p>As a general rule, we recommend a vertical spacing between individual inputs of 24px and a 32px spacer before the first input, between sections and between the last input and the buttons. This may vary depending on your context, but spacing between groups should always be adjusted in relationship to spacing between individual items. </p>\n    </section>\n);\n\nconst HowToDesignForms = () => {\n    const [showInput, setShowInput] = useState(true);\n\n    return (\n        <section>\n            <h2 id=\"layout\">How to design forms</h2>\n            <section>\n                <h3>Layout</h3>\n                <p>Forms should be designed vertically as this improves their readability. When possible, a form should be one column, but information can be presented in multiple columns if they are grouped together (e.g. address fields).\n                </p>\n                <p>Do not make an input full width of a desktop viewport, use the grid to restrict the width of the inputs to no more than half of the viewport. The field widths should reflect the intended length of the content while still aligning to the grid. On mobile devices, expand the input elements and buttons to make use of the whole viewport width.\n                </p>\n\n                <div className=\"slab slab-plain slab-border-success pb-4\">\n                    <span className=\"h4 d-block mb-4\">Do</span>\n                    <div className=\"col-12 col-sm-8 px-0\">\n                        <InputGroup id=\"layout-address-example\" type=\"text\" label=\"Address\"/>\n                        <div className=\"row\">\n                            <InputGroup id=\"layout-postal-example\" type=\"text\" label=\"Postal code\" className=\"col-12 col-sm-5\"/>\n                            <InputGroup id=\"layout-city-example\" type=\"text\" label=\"City\" className=\"col-12 col-sm-7 mb-2\"/>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"slab slab-plain slab-border-error\">\n                    <span className=\"h4 d-block mb-4\">Don&apos;t</span>\n                    {[\"Address\", \"Postal code\", \"City\"].map(label => (\n                        <InputGroup id={`layout-${label.toLowerCase()}-dont-example`} type=\"text\" label={label} key={label}/>\n                    ))}\n                </div>\n            </section>\n            <section>\n                <h3>Required VS. optional</h3>\n                <p>All fields in a form can be assumed required and should not be labeled with an “*” . If you must ask an optional question, make it clear that it’s optional by adding “(optional)” to the label instead. </p>\n\n                <div className=\"row\">\n                    <div className=\"col-lg-6 col-12\">\n                        <div className=\"slab slab-plain slab-border-success\">\n                            <span className=\"h4 d-block mb-4\">Do</span>\n                            <InputGroup type=\"text\" label=\"E-mail\"/>\n                            <InputGroup type=\"text\" label=\"Telephone number\" optional/>\n                        </div>\n                    </div>\n                    <div className=\"col-lg-6 col-12\">\n                        <div className=\"slab slab-plain slab-border-error\">\n                            <span className=\"h4 d-block mb-4\">Don&apos;t</span>\n                            <InputGroup type=\"text\" label=\"E-mail*\"/>\n                            <InputGroup type=\"tel\" label=\"Telephone number\"/>\n                        </div>\n                    </div>\n                </div>\n            </section>\n            <section>\n                <h3>Logical flow</h3>\n                <p>To create a better user flow, ask questions in a logical order and group related inputs into sections or steps. Also consider using progressive disclosure to reveal additional content based on how a user answered the previous question. The flow will then better resemble a conversation and guide the user through the task.</p>\n\n                <div className=\"row\">\n                    <div className=\"col-lg-6 col-12\">\n                        <div className=\"slab slab-plain slab-border-success h-100\">\n                            <span className=\"h4 d-block mb-4\">Do</span>\n                            <div className=\"radio mb-3\">\n                                <input type=\"radio\" id=\"logical-flow-example-email\" name=\"logical-flow-example\" defaultChecked/>\n                                <label htmlFor=\"logical-flow-example-email\" onClick={() => setShowInput(!showInput)}>E-mail</label>\n                            </div>\n                            {showInput &&\n                                <div className=\"ml-2\">\n                                    <InputGroup type=\"text\" label=\"E-mail address\" className=\"ml-4 mb-4\"/>\n                                </div>\n                            }\n                            <div className=\"radio mb-3\">\n                                <input type=\"radio\" id=\"logical-flow-example-call\" name=\"logical-flow-example\"/>\n                                <label htmlFor=\"logical-flow-example-call\" onClick={() => setShowInput(!showInput)}>Call</label>\n                            </div>\n                            {!showInput &&\n                                <div className=\"ml-2\">\n                                    <InputGroup type=\"text\" label=\"Telephone number\" className=\"ml-4\"/>\n                                </div>\n                            }\n                        </div>\n                    </div>\n                    <div className=\"col-lg-6 col-12\">\n                        <div className=\"slab slab-plain slab-border-error\">\n                            <span className=\"h4 d-block mb-4\">Don&apos;t</span>\n                            <RadioButton label=\"E-mail\" name=\"logical-flow-example-2\" id=\"logical-flow-example-email-2\" checked className=\"mb-3\"/>\n                            <div className=\"ml-2\">\n                                <InputGroup type=\"text\" label=\"E-mail address\" className=\"ml-4 mb-4\"/>\n                            </div>\n                            <RadioButton label=\"Call\" name=\"logical-flow-example-2\" id=\"logical-flow-example-call-2\" className=\"mb-3\"/>\n                            <div className=\"ml-2\">\n                                <InputGroup type=\"text\" label=\"Phone number\" className=\"ml-4\"/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </section>\n            <section>\n                <h3>Button placement</h3>\n                <p>The primary button should be left-aligned along with the left side of the form field. If additional actions are required, put the primary button first, then secondary buttons, then the link button. One exception is a multiple-step form where the “Back” secondary button sits at the very left, while the rest of the buttons are aligned to the right. In some cases, like on a <a href=\"\">Login page</a>, buttons can be centered and set to the same width as the input fields. On mobile, the buttons are always centered, full width and stacked vertically with the primary action on top. </p> {/* TODO: Add link to Login template */}\n                <img src={`${process.env.basename}img/documentation/templates/img-button-placement.png`} className=\"w-100\"/>\n            </section>\n            <section>\n                <h3>Error messages</h3>\n                <p>When an input isn’t accepted, error messages should be used to help the user understand what went wrong and how to solve the problem without using technical jargong. </p>\n                <div className=\"row\">\n                    <div className=\"col-lg-6 col-12\">\n                        <div className=\"slab slab-plain slab-border-success\">\n                            <span className=\"h4 d-block mb-4\">Do</span>\n                            <InputGroup type=\"text\" validationState=\"error\" helpBlock errorMessage='The email address must include \"@\"' label=\"Email address\" defaultValue=\"Name.com\" id=\"input-error-do-example\"/>\n                        </div>\n                    </div>\n                    <div className=\"col-lg-6 col-12\">\n                        <div className=\"slab slab-plain slab-border-error\">\n                            <span className=\"h4 d-block mb-4\">Don&apos;t</span>\n                            <InputGroup type=\"text\" validationState=\"error\" helpBlock errorMessage=\"Invalid input\" label=\"Email address\" defaultValue=\"Name.com\" id=\"input-error-dont-example\"/>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </section>\n    );\n};\n\nconst DeveloperDocumentation = () => (\n    <section>\n        <h2 id=\"developer-documentation\">Developer documentation</h2>\n        <section>\n            <h3>Errors and validation</h3>\n            <p>To use our validation, start by adding the attribute <CodeTags type=\"secondary\" code=\"novalidate\" /> to your <CodeTags type=\"primary\" code={\"<form>\"} /> element.\n            If you wish to validate your entire form, add the <CodeTags type=\"secondary\" code=\"validate\" /> attribute to the <CodeTags type=\"primary\" code={\"<form>\"}/> tag,\n            if not add it to the desired <CodeTags type=\"primary\" code={\"<input>\"}/> tags. This will validate against <CodeTags type=\"secondary\" code=\"required\" /> and <CodeTags type=\"secondary\" code=\"pattern\" />, where pattern will override default patterns.</p>\n\n            <b className=\"brand-headline\">Client-side validation</b>\n            <p>Use client-side validation to validate as much data as possible before the user submits the form. Common errors include empty required fields, invalid characters or incorrect input format. To give users inline validation feedback insert a error message within the <CodeTags type=\"primary\" code=\"form-group\"/> in the <CodeTags type=\"primary\" code=\"help-block\"/> element in the attribute <CodeTags type=\"primary\" code=\"data-error\"/>.</p>\n\n            <ComponentPreview language=\"html\" codeFigure showCasePanel removeOuterTag>\n                <div className=\"col-12 col-sm-6 m-auto pt-3\">\n                    <InputGroup type=\"text\" validationState=\"error\" helpBlock errorMessage='The email address must include \"@\"' label=\"Email\" defaultValue=\"Name.com\" id=\"input-error-client-example\"/>\n                </div>\n            </ComponentPreview>\n\n            <b className=\"brand-headline\">Server-side validation</b>\n            <p>Server side validation can be used to control the inputs after the user submits the form. If an error has occurred, display an error alert at the top of the form after the page has reloaded as well as inline errors on the affected input components.</p>\n\n            <ComponentPreview language=\"html\" codeFigure showCasePanel>\n                <div className=\"col-sm-6 col-12 m-auto px-0 py-3\">\n                    <LoginForm error defaultPassword defaultEmail\n                        passwordId=\"validation-password-example\"\n                        emailId=\"validation-email-example\"\n                        checkboxId=\"validation-checkbox-example\"\n                        title=\"h2\"/>\n                </div>\n            </ComponentPreview>\n        </section>\n        <section>\n            <h3>Fieldset</h3>\n            <p>You can use the <CodeTags type=\"primary\" code=\"<fieldset>\" /> to group related elements in a <CodeTags type=\"primary\" code=\"form\" /> and create more structure.</p>\n\n            <ComponentPreview language=\"html\" codeFigure showCasePanel>\n                <div className=\"col-12 col-sm-6 m-auto\">\n                    <form>\n                        <fieldset className=\"mb-2\">\n                            <legend> {\"\\n\"}\n                                <span className=\"h3\">Name</span>\n                            </legend>\n                            <InputGroup id=\"fieldset-first-name-example\" type=\"name\" label=\"First name\" />\n                            <InputGroup id=\"fieldset-last-name-example\" type=\"name\" label=\"Last name\" />\n                        </fieldset>\n                        <fieldset>\n                            <legend> {\"\\n\"}\n                                <span className=\"h3\">Contact information</span>\n                            </legend>\n                            <InputGroup id=\"fieldset-email-example\" type=\"email\" label=\"Email\" />\n                            <InputGroup id=\"fieldset-phone-example\" type=\"tel\" label=\"Phone number\" />\n                        </fieldset>\n                    </form>\n                </div>\n            </ComponentPreview>\n        </section>\n        <section>\n            <h3>Disabled state</h3>\n            <p>You can disable an entire fieldset by adding <CodeTags type=\"primary\" code=\"disabled\"/> to the fieldset element. </p>\n\n            <ComponentPreview language=\"html\" codeFigure showCasePanel removeOuterTag>\n                <div className=\"col-12 col-sm-6 m-auto\">\n                    <fieldset disabled>\n                        <InputGroup id=\"disabled-name-example\" type=\"name\" label=\"Name\" />\n                        <InputGroup id=\"disabled-email-example\" type=\"email\" label=\"Email\" />\n                        <Checkbox id=\"disabled-fieldset-checkbox\" label=\"I agree to terms of use\" className=\"mb-4\"/>{\"\\n\"}\n                        <Button type=\"primary\" label=\"Submit\" className=\"mt-2\" />\n                    </fieldset>\n                </div>\n            </ComponentPreview>\n            <p>If you only wish to disable a specific form component, add the <CodeTags type=\"primary\" code=\"disabled\"/> attribute to the desired component.</p>\n\n            <ComponentPreview language=\"html\" codeFigure showCasePanel removeOuterTag>\n                <div className=\"col-12 col-sm-6 m-auto\">\n                    <fieldset>\n                        <InputGroup id=\"disable-specific-name-example\" type=\"name\" label=\"Name\" disabled />\n                        <InputGroup id=\"disable-specific-email-example\" type=\"email\" label=\"Email\" />\n                        <Checkbox id=\"disabled-input-checkbox\" label=\"I agree to terms of user\" className=\"mb-4\"/>{\"\\n\"}\n                        <Button type=\"primary\" label=\"Submit\" className=\"mt-2\" />\n                    </fieldset>\n                </div>\n            </ComponentPreview>\n        </section>\n        <section>\n            <h3>Form grid</h3>\n            <p>If you need more than one column in your form, you can use the grid system to customize how forms are displayed. Wrap your form elements in a row container and remember to add <CodeTags type=\"secondary\" code=\".col-{your_size}\"/> to the <CodeTags type=\"secondary\" code=\".form-group\"/>.</p>\n        </section>\n        <ComponentPreview language=\"html\" codeFigure showCasePanel removeOuterTag>\n            <div className=\"col-12 col-sm-10 m-auto pt-2\">\n                <form>\n                    <div className=\"row align-items-center justify-content-between\">\n                        <InputGroup id=\"form-grid-name-example\" type=\"name\" label=\"Name\" className=\"col-12 col-sm-3 px-0 mb-4\"/>\n                        <InputGroup id=\"form-grid-email-example\" type=\"email\" label=\"Email\" className=\"col-12 col-sm-6 px-0 mb-4\"/>{\"\\n\"}\n                        <Button type=\"primary\" label=\"Submit\" className=\"mt-1\"/>\n                    </div>\n                </form>\n            </div>\n        </ComponentPreview>\n        <section>\n            <h3>Static text</h3>\n            <p>To display static text in a form use <CodeTags type=\"secondary\" code=\"<span>\" /></p>\n        </section>\n        <section>\n            <h3>JavaScript methods</h3>\n            <p><CodeTags type=\"primary\" code=\"dg.validation.init()\" /> can be used on a form tag to initialize all fields contained in the form, or you can pass a single field to initialize just that one.</p>\n        </section>\n    </section>\n);\n\nconst Forms = () => (\n    <DocContainer>\n        <p className=\"lead\">A form is a collection of input components that allows users to provide and submit data.</p>\n        <Overview />\n        <ContentGuidelines />\n        <HowToDesignForms />\n        <DeveloperDocumentation />\n    </DocContainer>\n);\n\nexport default Forms;\n\nexport { Overview, ContentGuidelines, HowToDesignForms, DeveloperDocumentation };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Radio = ({ id, checked, disabled, label, group, groupTitle, options, name, tooltip, required, className }) => {\n    const attrs = {\n        type: \"radio\",\n        id: id || null,\n        name: name || null,\n        disabled: disabled || null,\n        defaultChecked: checked || null,\n        required\n    };\n\n    return (\n        <>\n            {group ?\n                <fieldset className={`radio-group${className ? ` ${className}` : \"\"}`} disabled={disabled}>\n                    <legend>\n                        {groupTitle}\n                        {tooltip && <>\n                            {\"\\n\"}<i className=\"material-icons help-icon\" data-tooltip=\"Some informative text\" data-tooltip-position=\"top\">{\"\\n\"}\n                                help_outline{\"\\n\"}</i>\n                        </>}{\"\\n\"}\n                    </legend>\n                    {options.map(({ label, id, checked }, i) => <div className=\"radio\" key={i}>{\"\\n\"}\n                        <input {...attrs} id={id} defaultChecked={checked}/>{\"\\n\"}\n                        <label htmlFor={id}>{label}</label>{\"\\n\"}\n                    </div>)}\n                </fieldset>\n                : <>\n                    <div className=\"radio\">{\"\\n\"}\n                        <input {...attrs} />{\"\\n\"}\n                        {label ? <label htmlFor={id}>{label}</label> : null}{label ? \"\\n\" : null}\n                    </div>\n                </>\n            }\n        </>\n    );\n};\n\nRadio.propTypes = {\n    id: PropTypes.string,\n    name: PropTypes.string,\n    checked: PropTypes.bool,\n    disabled: PropTypes.bool,\n    label: PropTypes.string,\n    group: PropTypes.bool,\n    groupTitle: PropTypes.string,\n    options: PropTypes.array,\n    require: PropTypes.bool,\n    tooltip: PropTypes.bool,\n    className: PropTypes.string\n};\n\nexport default Radio;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nconst DefaultSteps = [\n    {\n        title: \"Step one\",\n        subtitle: \"24.12.17 12:10\",\n        completed: true\n    },\n    {\n        title: \"Step two\",\n        ongoing: true\n    },\n    {\n        title: \"Step three\",\n        selected: true\n    },\n    {\n        title: \"Step four\"\n    }\n];\n\nconst StepsContent = ({ completed, subtitle, title, index }) => (\n    <>\n        {completed ? <><div className=\"material-icons steps-icon\" >check</div>{ \"\\n\" }</> : <div className=\"steps-number\">{index + 1}</div>}\n        {title}\n        {subtitle ? <>{ \"\\n\" }<div className=\"steps-sub-title\">{subtitle}</div></> : null}\n    </>\n);\n\nconst RenderSteps = ({ steps }) => (\n    <>\n        {steps.map(({ title, subtitle, completed, ongoing, selected, clickable }, i) => (\n            <li key={i} className={classnames(completed ? \"steps-completed\" : null,\n                ongoing ? \"steps-ongoing\" : null,\n                selected ? \"steps-selected\" : null)}>\n                { clickable ?\n                    <>{ \"\\n\" } <a><StepsContent completed={completed} subtitle={subtitle} title={title} index={i}/></a> { \"\\n\" } </>\n                    :\n                    <StepsContent completed={completed} subtitle={subtitle} title={title} index={i}/>\n                }\n            </li>\n        ))}\n    </>\n);\n\nconst RenderStepsNav = ({ steps }) => {\n    if (!steps) {\n        return null;\n    }\n\n    const clickableItem = steps.some(item => item.clickable);\n\n    const arrowLeft = clickableItem ? <div className=\"material-icons steps-nav-left\">keyboard_arrow_left</div> : null;\n    const arrowRight = clickableItem ? <div className=\"material-icons steps-nav-right\">keyboard_arrow_right</div> : null;\n\n    return <>\n        <div className=\"steps-responsive\">\n            { arrowLeft }\n            <div className=\"steps-responsive-text\">Step 2</div>\n            { arrowRight }\n        </div>\n    </>;\n};\n\nconst Steps = ({ steps, vertical }) => {\n    const stepsClasses = classnames(\n        \"steps\",\n        vertical ? \"steps-vertical\" : null,\n    );\n\n    return (<div className={stepsClasses}>\n        <ol>\n            {steps ? <RenderSteps steps={steps} /> : <RenderSteps steps={DefaultSteps} />}\n        </ol>\n        <RenderStepsNav steps={steps} />\n    </div>);\n};\n\nSteps.propTypes = {\n    steps: PropTypes.array,\n    vertical: PropTypes.bool,\n    clickable: PropTypes.bool\n};\n\nexport default Steps;\n\n// exporting for testing purposes\nexport { DefaultSteps };\n"],"sourceRoot":""}