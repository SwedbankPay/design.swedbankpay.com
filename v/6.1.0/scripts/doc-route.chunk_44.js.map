{"version":3,"sources":["webpack://@swedbankpay/design-guide/./src/App/Examples/examples/customers/CustomersDetailed/components/CustomersDetailedCharts/index.js","webpack://@swedbankpay/design-guide/./src/App/components/Chart/index.js","webpack://@swedbankpay/design-guide/./src/scripts/dashboard/chart/bar.js","webpack://@swedbankpay/design-guide/./src/scripts/dashboard/chart/pie.js","webpack://@swedbankpay/design-guide/./src/scripts/dashboard/chart/line.js","webpack://@swedbankpay/design-guide/./src/scripts/dashboard/chart/line-fill.js","webpack://@swedbankpay/design-guide/./src/scripts/dashboard/chart/index.js","webpack://@swedbankpay/design-guide/./src/scripts/dashboard/index.js"],"names":["CustomersDetailedCharts","customerIdName","customerOrders","customerInquiries","createNumArray","datasetDataLength","length","totalNumMessages","reduce","accumulator","inquiry","numMessages","id","options","type","data","labels","Array","keys","map","i","toString","datasets","label","fill","scales","yAxes","scaleLabel","display","labelString","date","ticks","beginAtZero","className","filter","resolved","Math","floor","propTypes","PropTypes","isRequired","message","Chart","this","props","colorPool","chart","Component","userOptions","dataset","index","preparedDataset","backgroundColor","borderColor","borderWidth","hoverBorderWidth","pointBackgroundColor","pointBorderColor","pointHoverBorderColor","pointHoverBackgroundColor","pointBorderWidth","pointRadius","pointHoverRadius","hoverBackgroundColor","hoverBorderColor","forEach","push","prepareDataset","d","beforeDraw","xAxis","gridLines","_colorPool","element","document","getElementById","tagName","ctx","initBarChart","initPieChart","initLineChart","initLineFillChart","_init","getContext","slice","currentScript","getAttribute","dg","window"],"mappings":"u7BAKA,IAAMA,EAA0B,SAAC,GAA0E,IAAxEC,EAAwE,EAAxEA,eAAgBC,EAAwD,EAAxDA,eAAgBC,EAAwC,EAAxCA,kBAAmBC,EAAqB,EAArBA,eAC5EC,EAAoBH,EAAeI,OACnCC,EAAmBJ,EAAkBK,QAAO,SAACC,EAAaC,GAAd,OAA0BD,EAAcC,EAAQC,cAAa,GAE/G,OACI,gCACI,oCACA,wDACA,gBAAC,UAAD,CACIC,GAAG,8BACHC,QAAS,CACLC,KAAM,MACNC,KAAM,CACFC,OAAQ,EAAIC,MAAMZ,GAAmBa,QAAQC,KAAI,SAAAC,GAAC,OAAK,MAAQf,EAAoB,GAAKe,GAAGC,cAC3FC,SAAU,CACN,CACIC,MAAOtB,EACPc,KAAMb,EACNsB,MAAM,GAEV,CACID,MAAO,oBACPR,KAAMX,EAAeC,EAAmB,IAAM,KAC9CmB,MAAM,GAEV,CACID,MAAO,YACPR,KAAMX,EAAeC,EAAmB,IAAK,KAC7CmB,MAAM,KAIlBX,QAAS,CACLY,OAAQ,CACJC,MAAO,CAAC,CACJC,WAAY,CACRC,SAAS,EACTC,YAAa,4BAQrC,uCACA,wDACA,gBAAC,UAAD,CACIjB,GAAG,8BACHC,QAAS,CACLC,KAAM,OACNC,KAAM,CACFC,OAAQb,EAAkBgB,KAAI,SAAAT,GAAO,OAAIA,EAAQoB,QACjDR,SAAU,CACN,CACIC,MAAOtB,EACPc,KAAMZ,EAAkBgB,KAAI,SAAAT,GAAO,OAAIA,EAAQC,eAC/Ca,MAAM,GAEV,CACID,MAAO,oBACPR,KAAMX,EAAeD,EAAkBG,OAAQ,EAAG,GAClDkB,MAAM,KAIlBX,QAAS,CACLY,OAAQ,CACJC,MAAO,CAAC,CACJK,MAAO,CACHC,aAAa,UAOrC,uBAAKC,UAAU,OACX,uBAAKA,UAAU,YACX,iDACA,gBAAC,UAAD,CAAOrB,GAAG,8BACNC,QAAS,CACLC,KAAM,MACNC,KAAM,CACFC,OAAQ,CAAC,WAAY,aAAc,WACnCM,SAAU,CACN,CACIP,KAAM,CAACZ,EAAkB+B,QAAO,SAAAxB,GAAO,OAAIA,EAAQyB,YAAU7B,OAAQH,EAAkB+B,QAAO,SAAAxB,GAAO,OAAKA,EAAQyB,YAAU7B,OAAQ,UAO5J,uBAAK2B,UAAU,YACX,kDACA,gBAAC,UAAD,CAAOrB,GAAG,8BACNC,QAAS,CACLC,KAAM,MACNC,KAAM,CACFC,OAAQ,CAAC,WAAY,WAAY,YAAa,aAAc,SAC5DM,SAAU,CACN,CACIP,KAAM,CACFqB,KAAKC,MAAyB,GAAnB9B,GACX6B,KAAKC,MAAyB,GAAnB9B,GACX6B,KAAKC,MAAyB,IAAnB9B,GACX6B,KAAKC,MAAyB,GAAnB9B,GACX6B,KAAKC,MAAyB,IAAnB9B,cAcvDP,EAAwBsC,UAAY,CAChCrC,eAAgBsC,sBAChBrC,eAAgBqC,YAAkBA,YAAkBC,WACpDrC,kBAAmBoC,YAAkBA,UAAgB,CACjD3B,GAAI2B,sBACJT,KAAMS,sBACN5B,YAAa4B,sBACbJ,SAAUI,oBACVE,QAASF,yBACTC,YAGR,a,23CCtIME,E,0WACF,WACI,MAAmCC,KAAKC,MAAhChC,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,QAASgC,EAArB,EAAqBA,WAErBC,OAAMlC,EAAIC,EAASgC,K,oBAGvB,WACI,OACI,0BAAQjC,GAAI+B,KAAKC,MAAMhC,U,8BATfmC,aAcpBL,EAAMJ,UAAY,CACd1B,GAAI2B,sBACJ1B,QAAS0B,sBACTM,UAAWN,YAAkBA,aAGjC,a,qwBCzBA,IA2DA,EA3DqB,SAACS,EAAaH,GAC/B,IA+CQ9B,EAASiC,EAATjC,KAER,cACOiC,GADP,IAEIjC,KAAM,CACFC,OAAQD,EAAKC,OACbM,SAAUP,EAAKO,SAASH,KAAI,SAAC8B,EAAS7B,GAAV,OArDb,SAAC6B,EAASC,GAC7B,IAAQnC,EAAekC,EAAflC,KAAMD,EAASmC,EAATnC,KAERqC,EAAkB,EAAH,KACdF,GADc,IAEjBG,gBAAiB,GACjBC,YAAa,GACbC,YAAa,EACbC,iBAAkB,IAoCtB,MAjCa,SAATzC,GACAqC,EAAgBK,qBAAuB,GACvCL,EAAgBM,iBAAmB,GACnCN,EAAgBO,sBAAwB,GACxCP,EAAgBQ,0BAA4B,GAC5CR,EAAgBG,YAAc,EAC9BH,EAAgBS,iBAAmB,EACnCT,EAAgBU,YAAc,EAC9BV,EAAgBW,iBAAmB,IAGnCX,EAAgBY,qBAAuB,GACvCZ,EAAgBa,iBAAmB,IAGvCjD,EAAKkD,SAAQ,WACJnD,EAMe,SAATA,IACPqC,EAAgBC,gBAAhB,eAA0CP,EAAUK,GAApD,QACAC,EAAgBE,YAAhB,eAAsCR,EAAUK,GAAhD,QACAC,EAAgBK,qBAAhB,eAA+CX,EAAUK,GAAzD,QACAC,EAAgBM,iBAAhB,eAA2CZ,EAAUK,GAArD,QACAC,EAAgBO,sBAAhB,eAAgDb,EAAUK,GAA1D,QACAC,EAAgBQ,0BAAhB,eAAoDd,EAAUK,GAA9D,UAXAC,EAAgBC,gBAAgBc,KAAhC,eAA6CrB,EAAUK,GAAvD,SACAC,EAAgBE,YAAYa,KAA5B,eAAyCrB,EAAUK,GAAnD,SACAC,EAAgBY,qBAAqBG,KAArC,eAAkDrB,EAAUK,GAA5D,SACAC,EAAgBa,iBAAiBE,KAAjC,eAA8CrB,EAAUK,GAAxD,aAaDC,EASyCgB,CAAelB,EAAS7B,U,urBCtDhF,IAkCA,EAlCqB,SAAC4B,EAAaH,GAC/B,IAsBQ9B,EAASiC,EAATjC,KAER,cACOiC,GADP,IAEIjC,KAAM,CACFC,OAAQD,EAAKC,OACbM,SAAUP,EAAKO,SAASH,KAAI,SAAA8B,GAAO,OA5BpB,SAAAA,GACnB,IAAME,EAAkB,OACjBF,GADc,IAEjBG,gBAAiB,GACjBC,YAAa,GACbU,qBAAsB,GACtBC,iBAAkB,GAClBV,YAAa,EACbC,iBAAkB,IAWtB,OARAN,EAAQlC,KAAKkD,SAAQ,SAACG,EAAGhD,GACrB+B,EAAgBC,gBAAgBc,KAAhC,eAA6CrB,EAAUzB,GAAvD,SACA+B,EAAgBY,qBAAqBG,KAArC,eAAkDrB,EAAUzB,GAA5D,SACA+B,EAAgBE,YAAYa,KAA5B,eAAyCrB,EAAUzB,GAAnD,SACA+B,EAAgBa,iBAAiBE,KAAjC,eAA8CrB,EAAUzB,GAAxD,YAIG+B,EASoCgB,CAAelB,U,urBC7BlE,IA+BA,EA/BsB,SAACD,EAAaH,GAChC,IAkBQ/B,EAAwBkC,EAAxBlC,KAAMC,EAAkBiC,EAAlBjC,KAAMF,EAAYmC,EAAZnC,QAEpB,MAAO,CACHC,OACAC,KAAM,CACFC,OAAQD,EAAKC,OACbM,SAAUP,EAAKO,SAASH,KAAI,SAAC8B,EAAS7B,GAAV,OAxBb,SAAC6B,EAASC,GAe7B,OAdwB,OACjBD,GADc,IAEjBG,gBAAiB,QAAF,OAAUP,EAAUK,GAApB,QACfG,YAAa,QAAF,OAAUR,EAAUK,GAApB,QACXM,qBAAsB,QAAF,OAAUX,EAAUK,GAApB,QACpBS,0BAA2B,QAAF,OAAUd,EAAUK,GAApB,QACzBQ,sBAAuB,QAAF,OAAUb,EAAUK,GAApB,QACrBO,iBAAkB,QAAF,OAAUZ,EAAUK,GAApB,QAChBU,iBAAkB,EAClBN,YAAa,EACbO,YAAa,EACbC,iBAAkB,IAY0BK,CAAelB,EAAS7B,OAExEP,Y,urBC3BR,IA+BA,EA/B0B,SAACmC,EAAaH,GACpC,IAkBQ/B,EAAwBkC,EAAxBlC,KAAMC,EAAkBiC,EAAlBjC,KAAMF,EAAYmC,EAAZnC,QAEpB,MAAO,CACHC,OACAC,KAAM,CACFC,OAAQD,EAAKC,OACbM,SAAUP,EAAKO,SAASH,KAAI,SAAC8B,EAAS7B,GAAV,OAxBb,SAAC6B,EAASC,GAe7B,OAdwB,OACjBD,GADc,IAEjBG,gBAAiB,QAAF,OAAUP,EAAUK,GAApB,UACfG,YAAa,QAAF,OAAUR,EAAUK,GAApB,QACXM,qBAAsB,QAAF,OAAUX,EAAUK,GAApB,QACpBS,0BAA2B,QAAF,OAAUd,EAAUK,GAApB,QACzBQ,sBAAuB,QAAF,OAAUb,EAAUK,GAApB,QACrBO,iBAAkB,QAAF,OAAUZ,EAAUK,GAApB,QAChBU,iBAAkB,EAClBN,YAAa,EACbO,YAAa,EACbC,iBAAkB,IAY0BK,CAAelB,EAAS7B,OAExEP,Y,o7CCxBR6B,iDAAoD,EACpDA,qCAAyC,UACzCA,wCAA2C,EAC3CA,qBAAuB,CACnB2B,WADmB,SACPvB,GACR,IAAMwB,EAAQxB,EAAMrB,OAAO,YAE3B6C,IAAUA,EAAMzD,QAAQ0D,UAAU3C,SAAU,MASpD,IAAM4C,EAAa,CACf,eACA,eACA,eACA,gBACA,gBACA,eACA,eACA,aACA,gBACA,cACA,cACA,eAgFJ,EApBc,SAAC5D,EAAIoC,EAAaH,GAC5B,IAAM4B,EAAUC,SAASC,eAAe/D,GAEpC6D,GAA+B,WAApBA,EAAQG,SACd5B,EAAYlC,MAELkC,EAAYjC,MA5ClB,SAAC8D,EAAK7B,EAAaH,GAC7B,IAAIhC,EAEJ,OAAQmC,EAAYlC,MAChB,IAAK,MACL,IAAK,gBACDD,EAAUiE,EAAa9B,EAAaH,GAEpC,MAEJ,IAAK,MACL,IAAK,WACDhC,EAAUkE,EAAa/B,EAAaH,GAEpC,MAEJ,IAAK,OACDhC,EAAUmE,EAAchC,EAAaH,GAErC,MAEJ,IAAK,YAEDhC,EAAU,OADVA,EAAUoE,EAAkBjC,EAAaH,IAClC,IAEH/B,KAAM,SAQdD,GACA,IAAI6B,IAAJ,CAAUmC,EAAKhE,GAcXqE,CAAMT,EAAQU,WAAW,MAAOnC,EAAaH,EAAY,GAAH,SAAO2B,EAAWY,MAAM,EAAG,IAA3B,EAAkCvC,IAAa2B,ICnG3Ga,EAAgBX,SAASW,cAE/B,GAAIA,GACIA,EAAcC,aAAa,UAAW,CACtC,IAAMC,EAAKC,OAAOD,IAAM,GAExBA,EAAGzC,MAAQA,EAEX0C,OAAOD,GAAKA","file":"scripts/doc-route.chunk_44.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Chart from \"@components/Chart\";\n\nconst CustomersDetailedCharts = ({ customerIdName, customerOrders, customerInquiries, createNumArray }) => {\n    const datasetDataLength = customerOrders.length;\n    const totalNumMessages = customerInquiries.reduce((accumulator, inquiry) => accumulator + inquiry.numMessages, 0);\n\n    return (\n        <>\n            <h3>Orders</h3>\n            <h4>Historical purchase prices</h4>\n            <Chart\n                id=\"customers-detailed-charts-1\"\n                options={{\n                    type: \"bar\",\n                    data: {\n                        labels: [...Array(datasetDataLength).keys()].map(i => (2019 - (datasetDataLength - 1) + i).toString()),\n                        datasets: [\n                            {\n                                label: customerIdName,\n                                data: customerOrders,\n                                fill: false\n                            },\n                            {\n                                label: \"Customers average\",\n                                data: createNumArray(datasetDataLength, 1000, 200),\n                                fill: false\n                            },\n                            {\n                                label: \"Estimated\",\n                                data: createNumArray(datasetDataLength, 850, 200),\n                                fill: false\n                            }\n                        ]\n                    },\n                    options: {\n                        scales: {\n                            yAxes: [{\n                                scaleLabel: {\n                                    display: true,\n                                    labelString: \"British Pound (Â£)\"\n                                }\n                            }]\n                        }\n                    }\n                }}\n            />\n\n            <h3>Inquiries</h3>\n            <h4>Number of inquiry messages</h4>\n            <Chart\n                id=\"customers-detailed-charts-2\"\n                options={{\n                    type: \"line\",\n                    data: {\n                        labels: customerInquiries.map(inquiry => inquiry.date),\n                        datasets: [\n                            {\n                                label: customerIdName,\n                                data: customerInquiries.map(inquiry => inquiry.numMessages),\n                                fill: false\n                            },\n                            {\n                                label: \"Customers average\",\n                                data: createNumArray(customerInquiries.length, 3, 4), // The multiple Math.floor(Math.random) is there to achieve a less random looking distribution\n                                fill: false\n                            }\n                        ]\n                    },\n                    options: {\n                        scales: {\n                            yAxes: [{\n                                ticks: {\n                                    beginAtZero: true\n                                }\n                            }]\n                        }\n                    }\n                }}\n            />\n            <div className=\"row\">\n                <div className=\"col-lg-6\">\n                    <h4>Status distribution</h4>\n                    <Chart id=\"customers-detailed-charts-3\"\n                        options={{\n                            type: \"pie\",\n                            data: {\n                                labels: [\"Resolved\", \"Unresolved\", \"Unknown\"],\n                                datasets: [\n                                    {\n                                        data: [customerInquiries.filter(inquiry => inquiry.resolved).length, customerInquiries.filter(inquiry => !inquiry.resolved).length, 1]\n                                    }\n                                ]\n                            }\n                        }}\n                    />\n                </div>\n                <div className=\"col-lg-6\">\n                    <h4>Time before response</h4>\n                    <Chart id=\"customers-detailed-charts-4\"\n                        options={{\n                            type: \"pie\",\n                            data: {\n                                labels: [\"< 2 days\", \"< 1 week\", \"< 1 month\", \"< 3 months\", \"Other\"],\n                                datasets: [\n                                    {\n                                        data: [\n                                            Math.floor(totalNumMessages * 0.4),\n                                            Math.floor(totalNumMessages * 0.3),\n                                            Math.floor(totalNumMessages * 0.15),\n                                            Math.floor(totalNumMessages * 0.1),\n                                            Math.floor(totalNumMessages * 0.05)\n                                        ]\n                                    }\n                                ]\n                            }\n                        }}\n                    />\n                </div>\n            </div>\n\n        </>\n    );\n};\n\nCustomersDetailedCharts.propTypes = {\n    customerIdName: PropTypes.string.isRequired,\n    customerOrders: PropTypes.arrayOf(PropTypes.number).isRequired,\n    customerInquiries: PropTypes.arrayOf(PropTypes.exact({\n        id: PropTypes.string.isRequired,\n        date: PropTypes.string.isRequired,\n        numMessages: PropTypes.number.isRequired,\n        resolved: PropTypes.bool.isRequired,\n        message: PropTypes.string.isRequired\n    })).isRequired\n};\n\nexport default CustomersDetailedCharts;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { chart } from \"@src/scripts/dashboard\";\n\nclass Chart extends Component {\n    componentDidMount () {\n        const { id, options, colorPool } = this.props;\n\n        chart(id, options, colorPool);\n    }\n\n    render () {\n        return (\n            <canvas id={this.props.id} />\n        );\n    }\n}\n\nChart.propTypes = {\n    id: PropTypes.string.isRequired,\n    options: PropTypes.object.isRequired,\n    colorPool: PropTypes.arrayOf(PropTypes.string)\n};\n\nexport default Chart;\n","const initBarChart = (userOptions, colorPool) => {\n    const prepareDataset = (dataset, index) => {\n        const { data, type } = dataset;\n\n        const preparedDataset = {\n            ...dataset,\n            backgroundColor: [],\n            borderColor: [],\n            borderWidth: 1,\n            hoverBorderWidth: 2\n        };\n\n        if (type === \"line\") {\n            preparedDataset.pointBackgroundColor = [];\n            preparedDataset.pointBorderColor = [];\n            preparedDataset.pointHoverBorderColor = [];\n            preparedDataset.pointHoverBackgroundColor = [];\n            preparedDataset.borderWidth = 4;\n            preparedDataset.pointBorderWidth = 2;\n            preparedDataset.pointRadius = 3;\n            preparedDataset.pointHoverRadius = 6;\n\n        } else {\n            preparedDataset.hoverBackgroundColor = [];\n            preparedDataset.hoverBorderColor = [];\n        }\n\n        data.forEach(() => {\n            if (!type) {\n                preparedDataset.backgroundColor.push(`rgba(${colorPool[index]}, 1)`);\n                preparedDataset.borderColor.push(`rgba(${colorPool[index]}, 1)`);\n                preparedDataset.hoverBackgroundColor.push(`rgba(${colorPool[index]}, 1)`);\n                preparedDataset.hoverBorderColor.push(`rgba(${colorPool[index]}, 1)`);\n\n            } else if (type === \"line\") {\n                preparedDataset.backgroundColor = `rgba(${colorPool[index]}, 1)`;\n                preparedDataset.borderColor = `rgba(${colorPool[index]}, 1)`;\n                preparedDataset.pointBackgroundColor = `rgba(${colorPool[index]}, 1)`;\n                preparedDataset.pointBorderColor = `rgba(${colorPool[index]}, 1)`;\n                preparedDataset.pointHoverBorderColor = `rgba(${colorPool[index]}, 1)`;\n                preparedDataset.pointHoverBackgroundColor = `rgba(${colorPool[index]}, 1)`;\n            }\n\n        });\n\n        return preparedDataset;\n    };\n\n    const { data } = userOptions;\n\n    return {\n        ...userOptions,\n        data: {\n            labels: data.labels,\n            datasets: data.datasets.map((dataset, i) => prepareDataset(dataset, i))\n        }\n    };\n};\n\nexport default initBarChart;\n","const initPieChart = (userOptions, colorPool) => {\n    const prepareDataset = dataset => {\n        const preparedDataset = {\n            ...dataset,\n            backgroundColor: [],\n            borderColor: [],\n            hoverBackgroundColor: [],\n            hoverBorderColor: [],\n            borderWidth: 1,\n            hoverBorderWidth: 2\n        };\n\n        dataset.data.forEach((d, i) => {\n            preparedDataset.backgroundColor.push(`rgba(${colorPool[i]}, 1)`);\n            preparedDataset.hoverBackgroundColor.push(`rgba(${colorPool[i]}, 1)`);\n            preparedDataset.borderColor.push(`rgba(${colorPool[i]}, 1)`);\n            preparedDataset.hoverBorderColor.push(`rgba(${colorPool[i]}, 1)`);\n\n        });\n\n        return preparedDataset;\n    };\n\n    const { data } = userOptions;\n\n    return {\n        ...userOptions,\n        data: {\n            labels: data.labels,\n            datasets: data.datasets.map(dataset => prepareDataset(dataset))\n        }\n    };\n};\n\nexport default initPieChart;\n","const initLineChart = (userOptions, colorPool) => {\n    const prepareDataset = (dataset, index) => {\n        const preparedDataset = {\n            ...dataset,\n            backgroundColor: `rgba(${colorPool[index]}, 1)`,\n            borderColor: `rgba(${colorPool[index]}, 1)`,\n            pointBackgroundColor: `rgba(${colorPool[index]}, 1)`,\n            pointHoverBackgroundColor: `rgba(${colorPool[index]}, 1)`,\n            pointHoverBorderColor: `rgba(${colorPool[index]}, 1)`,\n            pointBorderColor: `rgba(${colorPool[index]}, 1)`,\n            pointBorderWidth: 2,\n            borderWidth: 4,\n            pointRadius: 3,\n            pointHoverRadius: 6\n        };\n\n        return preparedDataset;\n    };\n\n    const { type, data, options } = userOptions;\n\n    return {\n        type,\n        data: {\n            labels: data.labels,\n            datasets: data.datasets.map((dataset, i) => prepareDataset(dataset, i))\n        },\n        options\n    };\n};\n\nexport default initLineChart;\n","const initLineFillChart = (userOptions, colorPool) => {\n    const prepareDataset = (dataset, index) => {\n        const preparedDataset = {\n            ...dataset,\n            backgroundColor: `rgba(${colorPool[index]}, 0.1)`,\n            borderColor: `rgba(${colorPool[index]}, 1)`,\n            pointBackgroundColor: `rgba(${colorPool[index]}, 1)`,\n            pointHoverBackgroundColor: `rgba(${colorPool[index]}, 1)`,\n            pointHoverBorderColor: `rgba(${colorPool[index]}, 1)`,\n            pointBorderColor: `rgba(${colorPool[index]}, 1)`,\n            pointBorderWidth: 2,\n            borderWidth: 4,\n            pointRadius: 3,\n            pointHoverRadius: 6\n        };\n\n        return preparedDataset;\n    };\n\n    const { type, data, options } = userOptions;\n\n    return {\n        type,\n        data: {\n            labels: data.labels,\n            datasets: data.datasets.map((dataset, i) => prepareDataset(dataset, i))\n        },\n        options\n    };\n};\n\nexport default initLineFillChart;\n","import Chart from \"chart.js\";\n\n// Set global defaults for Chart\nChart.defaults.global.legend.labels.usePointStyle = true;\nChart.defaults.global.defaultFontColor = \"#512B2B\"; // Brand secondary as font color\nChart.defaults.global.elements.line.fill = false;\nChart.plugins.register({\n    beforeDraw (chart) {\n        const xAxis = chart.scales[\"x-axis-0\"];\n\n        xAxis && (xAxis.options.gridLines.display = false); // Check whether this type of chart have x-axis, if so, remove the x-axis gridline\n    }\n});\n\nimport initBarChart from \"./bar\";\nimport initPieChart from \"./pie\";\nimport initLineChart from \"./line\";\nimport initLineFillChart from \"./line-fill\";\n\nconst _colorPool = [\n    \"253, 193, 41\", // brand primary\n    \"238, 112, 35\", // brand tertiary\n    \"49, 163, 174\", // brand accent\n    \"138, 205, 195\", // info turquoise\n    \"239, 183, 182\", // info pink\n    \"37, 120, 134\", // brand accent link\n    \"69, 114, 192\", // neutral/info\n    \"81, 43, 43\", // brand secondary\n    \"163, 139, 128\", // brand secondary light 2\n    \"114, 96, 94\", // brand secondary light\n    \"197, 19, 28\", // danger\n    \"81, 151, 27\" // success\n];\n\n// Shades of green\nconst _colorPoolGreen = [\n    \"45, 169, 68\", // original\n    \"11, 93, 30\",\n    \"5, 59, 6\",\n    \"28, 105, 42\",\n    \"65, 245, 99\",\n    \"48, 182, 73\",\n    \"38, 143, 58\"\n    // \"0, 67, 0\", // darkened 40%\n    // \"147, 255, 170\", // lightened 40%\n    // \"0, 93, 0\", // darkened 30%\n    // \"122, 246, 145\", // lightened 30%\n    // \"0, 118, 17\", // darkened 20%\n    // \"96, 220, 119\", // lightened 20%\n    // \"20, 144, 43\", // darkened 10%\n    // \"71, 195, 94\" // lightened 10%\n];\n\nconst _init = (ctx, userOptions, colorPool) => {\n    let options;\n\n    switch (userOptions.type) {\n        case \"bar\":\n        case \"horizontalBar\":\n            options = initBarChart(userOptions, colorPool);\n\n            break;\n\n        case \"pie\":\n        case \"doughnut\":\n            options = initPieChart(userOptions, colorPool);\n\n            break;\n\n        case \"line\":\n            options = initLineChart(userOptions, colorPool);\n\n            break;\n\n        case \"line-fill\":\n            options = initLineFillChart(userOptions, colorPool);\n            options = {\n                ...options,\n                type: \"line\"\n            };\n\n            break;\n        default:\n            console.warn(`Chart: Chart type \"${userOptions.type}\" is not supported.`);\n    }\n\n    if (options) {\n        new Chart(ctx, options);\n    }\n};\n\nconst chart = (id, userOptions, colorPool) => {\n    const element = document.getElementById(id);\n\n    if (element && element.tagName === \"CANVAS\") {\n        if (!userOptions.type) {\n            console.warn(\"Chart: You need to specify a chart type.\");\n        } else if (!userOptions.data) {\n            console.warn(\"Chart: You need to provide options.data.\");\n        } else {\n            // ..._colorPool.slice(0, 3) is due to the three first colors always having to be included (because of branding)\n            _init(element.getContext(\"2d\"), userOptions, colorPool ? [..._colorPool.slice(0, 3), ...colorPool] : _colorPool);\n        }\n\n    } else if (element) {\n        console.warn(`Chart: Element with id \"${id}\" is not of type canvas.`);\n    } else {\n        console.warn(`Chart: No element with id \"${id}\" found.`);\n    }\n};\n\nexport default chart;\n\n/* For testing */\nexport { _colorPool, _colorPoolGreen };\n","import chart from \"./chart\";\n\nconst currentScript = document.currentScript;\n\nif (currentScript) {\n    if (currentScript.getAttribute(\"global\")) {\n        const dg = window.dg || {};\n\n        dg.chart = chart;\n\n        window.dg = dg;\n    }\n}\n\nexport default { chart };\n\nexport {\n    chart\n};\n"],"sourceRoot":""}