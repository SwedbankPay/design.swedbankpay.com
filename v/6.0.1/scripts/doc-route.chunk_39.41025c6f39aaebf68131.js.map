{"version":3,"sources":["webpack://design.swedbankpay.com/./node_modules/classnames/index.js","webpack://design.swedbankpay.com/./src/App/ComponentsDocumentation/components/Togglebox/constants.js","webpack://design.swedbankpay.com/./src/App/ComponentsDocumentation/components/Togglebox/index.js","webpack://design.swedbankpay.com/./src/App/components/Button/index.js","webpack://design.swedbankpay.com/./src/App/components/FormComponents/Checkbox.js","webpack://design.swedbankpay.com/./src/App/components/FormComponents/Radio.js","webpack://design.swedbankpay.com/./src/App/components/FormComponents/Togglebox.js"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","module","exports","default","define","window","toggleboxShowCase","id","elements","component","Togglebox","label","options","checkbox","title","inputs","name","value","tooltip","radio","values","disabled","labelTop","description","howToUse","type","className","Radio","checked","text","heading","Checkbox","Button","Overview","ComponentPreview","language","showCasePanel","codeFigure","showCasePanelAdvanced","to","map","ContentGuidelines","DeveloperDocumentation","CodeTags","code","removeOuterTag","DocContainer","href","icon","loading","btnType","fullWidth","pullRight","input","active","size","bankId","btnClasses","classnames","attrs","defaultValue","role","tabIndex","onClick","e","preventDefault","propTypes","PropTypes","isRequired","loader","groupTitle","errorMessage","required","group","defaultChecked","htmlFor","require"],"mappings":"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","file":"scripts/doc-route.chunk_39.41025c6f39aaebf68131.js","sourcesContent":["/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React from \"react\";\nimport Togglebox from \"@components/FormComponents/Togglebox\";\nimport Checkbox from \"@components/FormComponents/Checkbox\";\nimport Radio from \"@components/FormComponents/Radio\";\nimport Button from \"@components/Button\";\n\nexport const toggleboxShowCase = {\n    id: \"no-tabs\",\n    elements: [\n        {\n            component: <Togglebox label=\"Label\" id=\"togglebox-example\"/>,\n            options: {\n                checkbox: [\n                    {\n                        title: \"Label add on\",\n                        inputs: [\n                            {\n                                id: \"help_icon\",\n                                name: \"With help icon\",\n                                value: {\n                                    tooltip: true\n                                }\n                            }\n                        ]\n                    }\n                ],\n                radio: [\n                    {\n                        id: \"state_radio\",\n                        title: \"State modifiers\",\n                        values: [\n                            {\n                                name: \"Enabled\",\n                                value: {\n                                    disabled: false\n                                }\n                            },\n                            {\n                                name: \"Disabled\",\n                                value: {\n                                    disabled: true\n                                }\n                            }\n                        ]\n                    },\n                    {\n                        id: \"label_position\",\n                        title: \"Label position\",\n                        values: [\n                            {\n                                name: \"Left\",\n                                value: {\n                                    labelTop: false\n                                }\n                            },\n                            {\n                                name: \"Top\",\n                                value: {\n                                    labelTop: true\n                                }\n                            }\n                        ]\n                    }\n                ]\n            },\n            title: \"Togglebox\",\n            description: \"Toggleboxes have two states: on and off. Each of these have default, hover, focus and disabled states. A togglebox must always be accompanied by a label, on the left side or on the top, that clearly conveys what option a user will turn on or off. If there is a need for a more detailed description, a help icon can be added after the label.\"\n        }\n    ]\n};\n\nexport const howToUse = [\n    {\n        type: \"success\",\n        component: <>\n            <span className=\"h4 d-inline-block mb-3\">Do you have any credit cards</span>\n            <Radio type=\"radio\" label=\"Yes\" id=\"do-example\" name=\"do-example\" checked/>\n            <Radio type=\"radio\" label=\"No\" id=\"do-example-1\" name=\"do-example\" />\n        </>,\n        text: <p>Use <b>radiobuttons</b> for yes/no questions</p>\n    },\n    {\n        type: \"error\",\n        heading: \"Do you have any credit cards\",\n        component: <Togglebox id=\"ex2\" label=\"Yes\"/>,\n        text: <p>Don’t use a <b>togglebox</b> for yes/no questions</p>\n    },\n    {\n        type: \"success\",\n        component: <>\n            <Checkbox label=\"I accept the terms and conditions\" id=\"example-3\"/>\n            <div className=\"d-flex justify-content-end mt-4\">\n                <Button type=\"link\" label=\"Cancel\"/>\n                <Button type=\"primary\" label=\"Submit\"/>\n            </div>\n        </>,\n        text: <p>Use a <b>checkbox</b> for actions that won’t happen immediately.</p>\n    },\n    {\n        type: \"error\",\n        component: <>\n            <Togglebox label=\"I accept the terms and conditions\" id=\"example-4\"/>\n            <div className=\"d-flex justify-content-end mt-4\">\n                <Button type=\"link\" label=\"Cancel\"/>\n                <Button type=\"primary\" label=\"Submit\"/>\n            </div>\n        </>,\n        text: <p>Don’t use <b>togglebox</b> for actions that won’t happen immediately.</p>\n    },\n    {\n        type: \"success\",\n        component: <>\n            <span className=\"h4 d-inline-block mb-2\">Preferences</span>\n            <Togglebox label=\"Show pending payments\" id=\"example-5\" checked/>\n            <Togglebox label=\"Show completed payments\" id=\"example-6\"/>\n        </>,\n        text: <p>Use <b>togglebox</b> for preferences of features or behaviour</p>\n    },\n    {\n        type: \"error\",\n        component: <>\n            <span className=\"h4 d-inline-block mb-2\">Preferences</span>\n            <Checkbox label=\"Show pending payments\" id=\"example-7\" checked/>\n            <Checkbox label=\"Show completed payments\" id=\"example-8\"/>\n        </>,\n        text: <p>Don’t use a <b>checkbox</b> for preferences of features or behaviour</p>\n    }\n];\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ComponentPreview, DocContainer } from \"@docutils\";\nimport Togglebox from \"@components/FormComponents/Togglebox\";\nimport CodeTags from \"~/src/App/components/CodeTags\";\n\nimport { toggleboxShowCase, howToUse } from \"./constants\";\n\nconst Overview = () => (\n    <>\n        <h2 id=\"overview\">Overview</h2>\n        <p>Toggleboxes are used to enable or disable a mode, feature, or function. Most common toggles are used to switch between on/off in preferences or settings, in forms or for other on/off functionality. Toggles are similar to radio groups in function but optimized for toggling between two states. A togglebox can also be similar to a checkobox with the difference being that a toggle-switch will trigger a state change directly when you toggle it, while a checkbox is generally used for state marking together with a submit action.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure showCasePanelAdvanced={toggleboxShowCase}/>\n\n        <span className=\"h3 d-inline-block mt-3\">When to consider something else</span>\n        <ul className=\"list list-bullet\">\n            <li>\n                Use a <Link to=\"/components/radio-button\">Radio Button</Link> group if users need to select one item from a list of options.\n            </li>\n            <li>\n                Use a <Link to=\"/components/checkbox\">Checkbox</Link> group if users can select multiple items from a list of options.\n            </li>\n        </ul>\n\n        <span className=\"h3 d-inline-block mb-3\">How to use Toggleboxes</span>\n        <div className=\"row\">\n            {howToUse.map(({ type, component, text, heading }, i) => (\n                <div className=\"col-6 px-3\" key={i}>\n                    <div className={`slab slab-plain slab-border-${type}`}>\n                        <h3>{type === \"error\" ? \"Don’t\" : \"Do\"}</h3>\n                        <div className=\"slab-content p-3\">\n                            {heading && <span className=\"h5\">{heading}</span>}\n                            {component}\n                        </div>\n                    </div>\n                    {text}\n                </div>\n            ))}\n        </div>\n    </>\n);\n\nconst ContentGuidelines = () => (\n    <>\n        <h2 id=\"content-guidelines\">Content guidelines</h2>\n        <ul className=\"list list-bullet\">\n            <li>The label should be short and concise, preferably three words or less.</li>\n            <li>Label should be written as to describe the on state of the toggle.</li>\n            <li>Avoid using negations such as “Notifications Off”, which would mean the user would have to turn the switch on to turn the setting off.</li>\n        </ul>\n    </>\n);\n\nconst DeveloperDocumentation = () => (\n    <>\n        <h2 id=\"developer-documentation\">Developer documentation</h2>\n        <span className=\"h3 d-inline-block mt-3\">Checked</span>\n        <p>Use the <CodeTags type=\"primary\" code=\"checked\" /> attribute to enable a toggle.</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <div className=\"checked-example-container m-auto\">\n                <Togglebox label=\"Label\" id=\"toggle-checked-example\" checked labelTop/>\n            </div>\n        </ComponentPreview>\n\n        <span className=\"h3 d-inline-block mt-3\">Disabled</span>\n        <p>Disable a toggle by adding <CodeTags type=\"primary\" code=\"disabled\" /> attribute to the desired toggle.</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <div className=\"w-25 p-3 m-auto\">\n                <Togglebox label=\"Label\" id=\"toggle-disabled-example\" checked disabled />\n                <Togglebox label=\"Label\" id=\"toggle-disabled-example-2\" disabled />\n            </div>\n        </ComponentPreview>\n\n        <span className=\"h3 d-inline-block mt-3\">Form groups</span>\n        <p><CodeTags type=\"secondary\" code=\".form-group\" /> s and/or <CodeTags type=\"primary\" code=\"form\" /> allow you to gather user input components like input fields, radio buttons, checkboxes and toggleboxes in various ways. For more information on how this works refer to the <Link to=\"/components/forms\">Forms</Link> section.</p>\n    </>\n);\n\nconst Toggle = () => (\n    <DocContainer>\n        <div id=\"togglebox-doc\">\n            <p className=\"lead\">The togglebox is a representation of a physical switch that allows users to toggle between two states, commonly to turn something on/off.</p>\n            <Overview />\n            <ContentGuidelines />\n            <DeveloperDocumentation />\n        </div>\n    </DocContainer>\n);\n\nexport default Toggle;\n\n/* for testing */\nexport { Overview, ContentGuidelines, DeveloperDocumentation };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nconst Button = ({ label, id, name, value, href, icon, loading, type, disabled, btnType, fullWidth, pullRight, input, active, size, bankId }) => {\n    const btnClasses = classnames(\n        \"btn\",\n        type ? `btn-${type}` : null,\n        size ? `btn-${size}` : null,\n        loading ? \"loading\" : null,\n        fullWidth ? \"btn-block\" : null,\n        pullRight ? \"pull-right\" : null,\n        active && href ? \"active\" : null,\n        disabled && href ? \"disabled\" : null,\n        bankId ? \"btn-bank-id\" : null\n    );\n\n    const attrs = {\n        href,\n        id,\n        name,\n        defaultValue: value,\n        disabled: href ? null : disabled,\n        active: active && !href ? \"\" : null,\n        role: href ? \"button\" : null,\n        type: !href ? btnType || \"button\" : null,\n        \"aria-pressed\": active ? true : null,\n        \"aria-disabled\": href && disabled ? true : null,\n        tabIndex: href && disabled ? \"-1\" : null\n    };\n\n    if (href) {\n        return (\n            <a className={btnClasses} {...attrs} onClick={e => e.preventDefault()}>{icon ? \"\\n\\t\" : null}\n                {icon ? <i className=\"material-icons\" aria-hidden=\"true\">{icon}</i> : null}\n                {(icon && label) ? <span>{label}</span> : label}\n            </a>\n        );\n    }\n\n    if (input) {\n        return <input className={btnClasses} {...attrs}/>;\n    }\n\n    return (\n        <button className={btnClasses} {...attrs}>{icon ? \"\\n\\t\\t\" : null}\n            {icon ? <><i className=\"material-icons\" aria-hidden=\"true\">{icon}</i>{\"\\n\\t\\t\"}</> : null}\n            {((icon && label) || type === \"link\" || type === \"link-destructive\" || bankId) ? <span>{label}</span> : label}{icon ? \"\\n\\t\" : null}\n            {bankId ? <><i className={`bank-id bank-id-${bankId}`} />{\"\\n\\t\\t\"}</> : null}\n        </button>\n    );\n};\n\nButton.propTypes = {\n    type: PropTypes.oneOf([\"primary\", \"secondary\", \"link\", \"guiding-destructive\", \"executive-destructive\", \"link-destructive\"]).isRequired,\n    label: PropTypes.string,\n    id: PropTypes.string,\n    name: PropTypes.string,\n    value: PropTypes.string,\n    href: PropTypes.string,\n    icon: PropTypes.string,\n    loading: PropTypes.bool,\n    disabled: PropTypes.bool,\n    btnType: PropTypes.string,\n    fullWidth: PropTypes.bool,\n    loader: PropTypes.bool,\n    pullRight: PropTypes.bool,\n    input: PropTypes.bool,\n    active: PropTypes.bool,\n    size: PropTypes.oneOf([\"lg\", \"sm\", \"xs\"]),\n    bankId: PropTypes.string\n};\n\nexport default Button;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Checkbox = ({ id, checked, name, disabled, groupTitle, label, errorMessage, required, group, options }) => {\n    const attrs = {\n        type: \"checkbox\",\n        id: id || null,\n        name,\n        disabled: disabled || null,\n        defaultChecked: checked || null,\n        required\n    };\n\n    return (\n        <>\n            {group ? <form>\n                <fieldset className={`checkbox-group${errorMessage ? \" has-error\" : \"\"}`} disabled={disabled}>\n                    <legend>{groupTitle}</legend>\n                    {options.map(({label, id}, i) => <div className=\"checkbox\" key={i}>{\"\\n\"}\n                        <input {...attrs} id={id} />{\"\\n\"}\n                        <label htmlFor={id}>{label}</label>{\"\\n\"}\n                    </div>)}\n                    {errorMessage ? <div className=\"help-block\" data-error={errorMessage || null}></div> : null}\n                </fieldset>\n            </form>\n                : <>\n                    <div className={`checkbox${errorMessage ? \" has-error\" : \"\"}`}>{\"\\n\"}\n                        <input {...attrs} />{\"\\n\"}\n                        <label htmlFor={id}>{label}</label>{\"\\n\"}\n                    </div>\n                    {errorMessage ? <div className=\"help-block\" data-error={errorMessage || null}></div> : null}\n                </>\n            }\n        </>\n    );\n};\n\nCheckbox.propTypes = {\n    id: PropTypes.string,\n    checked: PropTypes.bool,\n    disabled: PropTypes.bool,\n    label: PropTypes.string,\n    name: PropTypes.string,\n    errorMessage: PropTypes.string,\n    require: PropTypes.bool,\n    group: PropTypes.bool,\n    groupTitle: PropTypes.string,\n    options: PropTypes.array\n};\n\nexport default Checkbox;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Radio = ({ id, checked, disabled, label, group, groupTitle, options, name, required }) => {\n    const attrs = {\n        type: \"radio\",\n        id: id || null,\n        name: name || null,\n        disabled: disabled || null,\n        defaultChecked: checked || null,\n        required\n    };\n\n    return (\n        <>\n            {group ? <form>\n                <fieldset className=\"radio-group\" disabled={disabled}>\n                    <legend>{groupTitle}</legend>\n                    {options.map(({ label, id, checked }, i) => <div className=\"radio\" key={i}>{\"\\n\"}\n                        <input {...attrs} id={id} defaultChecked={checked}/>{\"\\n\"}\n                        <label htmlFor={id}>{label}</label>{\"\\n\"}\n                    </div>)}\n                </fieldset>\n            </form>\n                : <>\n                    <div className=\"radio\">{\"\\n\"}\n                        <input {...attrs} />{\"\\n\"}\n                        {label ? <label htmlFor={id}>{label}</label> : null}{label ? \"\\n\" : null}\n                    </div>\n                </>\n            }\n        </>\n    );\n};\n\nRadio.propTypes = {\n    id: PropTypes.string,\n    name: PropTypes.string,\n    checked: PropTypes.bool,\n    disabled: PropTypes.bool,\n    label: PropTypes.string,\n    group: PropTypes.bool,\n    groupTitle: PropTypes.string,\n    options: PropTypes.array,\n    require: PropTypes.bool\n};\n\nexport default Radio;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Togglebox = ({ id, checked, disabled, label, tooltip, labelTop }) => {\n    const attrs = {\n        type: \"checkbox\",\n        id: id || null,\n        disabled: disabled || null,\n        defaultChecked: checked || null\n    };\n\n    return (\n        <div className={`togglebox${labelTop ? \" label-top\" : \"\"}`}>{\"\\n\"}\n            <input {...attrs} />{\"\\n\"}\n            {label ? <label htmlFor={id}>{\"\\n\"}\n                {label}{\"\\n\"}\n                {tooltip &&\n                    <>\n                        <i className=\"material-icons help-icon\" data-tooltip=\"Some informational text\" data-tooltip-position=\"top\">{\"\\n\"}\n                                help_outline{\"\\n\"}\n                        </i>{\"\\n\"}\n                    </>}\n            </label> : null}{label ? \"\\n\" : null}\n        </div>\n    );\n};\n\nTogglebox.propTypes = {\n    id: PropTypes.string,\n    checked: PropTypes.bool,\n    disabled: PropTypes.bool,\n    label: PropTypes.string\n};\n\nexport default Togglebox;\n"],"sourceRoot":""}