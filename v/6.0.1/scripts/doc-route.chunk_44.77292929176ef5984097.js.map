{"version":3,"sources":["webpack://design.swedbankpay.com/./src/App/Examples/examples/customers/CustomersDetailed/components/CustomersDetailedCharts/index.js","webpack://design.swedbankpay.com/./src/App/components/Chart/index.js"],"names":["CustomersDetailedCharts","customerIdName","customerOrders","customerInquiries","createNumArray","datasetDataLength","length","totalNumMessages","reduce","accumulator","inquiry","numMessages","id","options","type","data","labels","Array","keys","map","i","toString","datasets","label","fill","scales","yAxes","scaleLabel","display","labelString","date","ticks","beginAtZero","className","filter","resolved","Math","floor","propTypes","PropTypes","isRequired","message","Chart","this","props","colorPool","dg","chart","Component"],"mappings":"87BAKA,IAAMA,EAA0B,SAAC,GAA0E,IAAxEC,EAAwE,EAAxEA,eAAgBC,EAAwD,EAAxDA,eAAgBC,EAAwC,EAAxCA,kBAAmBC,EAAqB,EAArBA,eAC5EC,EAAoBH,EAAeI,OACnCC,EAAmBJ,EAAkBK,QAAO,SAACC,EAAaC,GAAd,OAA0BD,EAAcC,EAAQC,cAAa,GAE/G,OACI,gCACI,oCACA,wDACA,gBAAC,UAAD,CACIC,GAAG,8BACHC,QAAS,CACLC,KAAM,MACNC,KAAM,CACFC,OAAQ,EAAIC,MAAMZ,GAAmBa,QAAQC,KAAI,SAAAC,GAAC,OAAK,MAAQf,EAAoB,GAAKe,GAAGC,cAC3FC,SAAU,CACN,CACIC,MAAOtB,EACPc,KAAMb,EACNsB,MAAM,GAEV,CACID,MAAO,oBACPR,KAAMX,EAAeC,EAAmB,IAAM,KAC9CmB,MAAM,GAEV,CACID,MAAO,YACPR,KAAMX,EAAeC,EAAmB,IAAK,KAC7CmB,MAAM,KAIlBX,QAAS,CACLY,OAAQ,CACJC,MAAO,CAAC,CACJC,WAAY,CACRC,SAAS,EACTC,YAAa,4BAQrC,uCACA,wDACA,gBAAC,UAAD,CACIjB,GAAG,8BACHC,QAAS,CACLC,KAAM,OACNC,KAAM,CACFC,OAAQb,EAAkBgB,KAAI,SAAAT,GAAO,OAAIA,EAAQoB,QACjDR,SAAU,CACN,CACIC,MAAOtB,EACPc,KAAMZ,EAAkBgB,KAAI,SAAAT,GAAO,OAAIA,EAAQC,eAC/Ca,MAAM,GAEV,CACID,MAAO,oBACPR,KAAMX,EAAeD,EAAkBG,OAAQ,EAAG,GAClDkB,MAAM,KAIlBX,QAAS,CACLY,OAAQ,CACJC,MAAO,CAAC,CACJK,MAAO,CACHC,aAAa,UAOrC,uBAAKC,UAAU,OACX,uBAAKA,UAAU,YACX,iDACA,gBAAC,UAAD,CAAOrB,GAAG,8BACNC,QAAS,CACLC,KAAM,MACNC,KAAM,CACFC,OAAQ,CAAC,WAAY,aAAc,WACnCM,SAAU,CACN,CACIP,KAAM,CAACZ,EAAkB+B,QAAO,SAAAxB,GAAO,OAAIA,EAAQyB,YAAU7B,OAAQH,EAAkB+B,QAAO,SAAAxB,GAAO,OAAKA,EAAQyB,YAAU7B,OAAQ,UAO5J,uBAAK2B,UAAU,YACX,kDACA,gBAAC,UAAD,CAAOrB,GAAG,8BACNC,QAAS,CACLC,KAAM,MACNC,KAAM,CACFC,OAAQ,CAAC,WAAY,WAAY,YAAa,aAAc,SAC5DM,SAAU,CACN,CACIP,KAAM,CACFqB,KAAKC,MAAyB,GAAnB9B,GACX6B,KAAKC,MAAyB,GAAnB9B,GACX6B,KAAKC,MAAyB,IAAnB9B,GACX6B,KAAKC,MAAyB,GAAnB9B,GACX6B,KAAKC,MAAyB,IAAnB9B,cAcvDP,EAAwBsC,UAAY,CAChCrC,eAAgBsC,sBAChBrC,eAAgBqC,YAAkBA,YAAkBC,WACpDrC,kBAAmBoC,YAAkBA,UAAgB,CACjD3B,GAAI2B,sBACJT,KAAMS,sBACN5B,YAAa4B,sBACbJ,SAAUI,oBACVE,QAASF,yBACTC,YAGR,a,63CCxIME,E,0WACF,WACI,MAAmCC,KAAKC,MAAhChC,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,QAASgC,EAArB,EAAqBA,UAErBC,GAAGC,MAAMnC,EAAIC,EAASgC,K,oBAG1B,WACI,OACI,0BAAQjC,GAAI+B,KAAKC,MAAMhC,U,8BATfoC,aAcpBN,EAAMJ,UAAY,CACd1B,GAAI2B,sBACJ1B,QAAS0B,sBACTM,UAAWN,YAAkBA,aAGjC","file":"scripts/doc-route.chunk_44.77292929176ef5984097.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Chart from \"@components/Chart\";\n\nconst CustomersDetailedCharts = ({ customerIdName, customerOrders, customerInquiries, createNumArray }) => {\n    const datasetDataLength = customerOrders.length;\n    const totalNumMessages = customerInquiries.reduce((accumulator, inquiry) => accumulator + inquiry.numMessages, 0);\n\n    return (\n        <>\n            <h3>Orders</h3>\n            <h4>Historical purchase prices</h4>\n            <Chart\n                id=\"customers-detailed-charts-1\"\n                options={{\n                    type: \"bar\",\n                    data: {\n                        labels: [...Array(datasetDataLength).keys()].map(i => (2019 - (datasetDataLength - 1) + i).toString()),\n                        datasets: [\n                            {\n                                label: customerIdName,\n                                data: customerOrders,\n                                fill: false\n                            },\n                            {\n                                label: \"Customers average\",\n                                data: createNumArray(datasetDataLength, 1000, 200),\n                                fill: false\n                            },\n                            {\n                                label: \"Estimated\",\n                                data: createNumArray(datasetDataLength, 850, 200),\n                                fill: false\n                            }\n                        ]\n                    },\n                    options: {\n                        scales: {\n                            yAxes: [{\n                                scaleLabel: {\n                                    display: true,\n                                    labelString: \"British Pound (Â£)\"\n                                }\n                            }]\n                        }\n                    }\n                }}\n            />\n\n            <h3>Inquiries</h3>\n            <h4>Number of inquiry messages</h4>\n            <Chart\n                id=\"customers-detailed-charts-2\"\n                options={{\n                    type: \"line\",\n                    data: {\n                        labels: customerInquiries.map(inquiry => inquiry.date),\n                        datasets: [\n                            {\n                                label: customerIdName,\n                                data: customerInquiries.map(inquiry => inquiry.numMessages),\n                                fill: false\n                            },\n                            {\n                                label: \"Customers average\",\n                                data: createNumArray(customerInquiries.length, 3, 4), // The multiple Math.floor(Math.random) is there to achieve a less random looking distribution\n                                fill: false\n                            }\n                        ]\n                    },\n                    options: {\n                        scales: {\n                            yAxes: [{\n                                ticks: {\n                                    beginAtZero: true\n                                }\n                            }]\n                        }\n                    }\n                }}\n            />\n            <div className=\"row\">\n                <div className=\"col-lg-6\">\n                    <h4>Status distribution</h4>\n                    <Chart id=\"customers-detailed-charts-3\"\n                        options={{\n                            type: \"pie\",\n                            data: {\n                                labels: [\"Resolved\", \"Unresolved\", \"Unknown\"],\n                                datasets: [\n                                    {\n                                        data: [customerInquiries.filter(inquiry => inquiry.resolved).length, customerInquiries.filter(inquiry => !inquiry.resolved).length, 1]\n                                    }\n                                ]\n                            }\n                        }}\n                    />\n                </div>\n                <div className=\"col-lg-6\">\n                    <h4>Time before response</h4>\n                    <Chart id=\"customers-detailed-charts-4\"\n                        options={{\n                            type: \"pie\",\n                            data: {\n                                labels: [\"< 2 days\", \"< 1 week\", \"< 1 month\", \"< 3 months\", \"Other\"],\n                                datasets: [\n                                    {\n                                        data: [\n                                            Math.floor(totalNumMessages * 0.4),\n                                            Math.floor(totalNumMessages * 0.3),\n                                            Math.floor(totalNumMessages * 0.15),\n                                            Math.floor(totalNumMessages * 0.1),\n                                            Math.floor(totalNumMessages * 0.05)\n                                        ]\n                                    }\n                                ]\n                            }\n                        }}\n                    />\n                </div>\n            </div>\n\n        </>\n    );\n};\n\nCustomersDetailedCharts.propTypes = {\n    customerIdName: PropTypes.string.isRequired,\n    customerOrders: PropTypes.arrayOf(PropTypes.number).isRequired,\n    customerInquiries: PropTypes.arrayOf(PropTypes.exact({\n        id: PropTypes.string.isRequired,\n        date: PropTypes.string.isRequired,\n        numMessages: PropTypes.number.isRequired,\n        resolved: PropTypes.bool.isRequired,\n        message: PropTypes.string.isRequired\n    })).isRequired\n};\n\nexport default CustomersDetailedCharts;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Chart extends Component {\n    componentDidMount () {\n        const { id, options, colorPool } = this.props;\n\n        dg.chart(id, options, colorPool);\n    }\n\n    render () {\n        return (\n            <canvas id={this.props.id} />\n        );\n    }\n}\n\nChart.propTypes = {\n    id: PropTypes.string.isRequired,\n    options: PropTypes.object.isRequired,\n    colorPool: PropTypes.arrayOf(PropTypes.string)\n};\n\nexport default Chart;\n"],"sourceRoot":""}