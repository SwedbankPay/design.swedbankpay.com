{"version":3,"sources":["webpack://design.swedbankpay.com/./src/scripts/dashboard/chart/bar.js","webpack://design.swedbankpay.com/./src/scripts/dashboard/chart/pie.js","webpack://design.swedbankpay.com/./src/scripts/dashboard/chart/line.js","webpack://design.swedbankpay.com/./src/scripts/dashboard/chart/line-fill.js","webpack://design.swedbankpay.com/./src/scripts/dashboard/chart/index.js","webpack://design.swedbankpay.com/./src/scripts/dashboard/index.js"],"names":["userOptions","colorPool","data","labels","datasets","map","dataset","i","index","type","preparedDataset","backgroundColor","borderColor","borderWidth","hoverBorderWidth","pointBackgroundColor","pointBorderColor","pointHoverBorderColor","pointHoverBackgroundColor","pointBorderWidth","pointRadius","pointHoverRadius","hoverBackgroundColor","hoverBorderColor","forEach","push","prepareDataset","d","options","Chart","beforeDraw","chart","xAxis","scales","gridLines","display","_colorPool","id","element","document","getElementById","tagName","ctx","initBarChart","initPieChart","initLineChart","initLineFillChart","_init","getContext","slice","dg","window"],"mappings":"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","file":"scripts/dg-dashboard.js","sourcesContent":["const initBarChart = (userOptions, colorPool) => {\n    const prepareDataset = (dataset, index) => {\n        const { data, type } = dataset;\n\n        const preparedDataset = {\n            ...dataset,\n            backgroundColor: [],\n            borderColor: [],\n            borderWidth: 1,\n            hoverBorderWidth: 2\n        };\n\n        if (type === \"line\") {\n            preparedDataset.pointBackgroundColor = [];\n            preparedDataset.pointBorderColor = [];\n            preparedDataset.pointHoverBorderColor = [];\n            preparedDataset.pointHoverBackgroundColor = [];\n            preparedDataset.borderWidth = 4;\n            preparedDataset.pointBorderWidth = 2;\n            preparedDataset.pointRadius = 3;\n            preparedDataset.pointHoverRadius = 6;\n\n        } else {\n            preparedDataset.hoverBackgroundColor = [];\n            preparedDataset.hoverBorderColor = [];\n        }\n\n        data.forEach(() => {\n            if (!type) {\n                preparedDataset.backgroundColor.push(`rgba(${colorPool[index]}, 1)`);\n                preparedDataset.borderColor.push(`rgba(${colorPool[index]}, 1)`);\n                preparedDataset.hoverBackgroundColor.push(`rgba(${colorPool[index]}, 1)`);\n                preparedDataset.hoverBorderColor.push(`rgba(${colorPool[index]}, 1)`);\n\n            } else if (type === \"line\") {\n                preparedDataset.backgroundColor = `rgba(${colorPool[index]}, 1)`;\n                preparedDataset.borderColor = `rgba(${colorPool[index]}, 1)`;\n                preparedDataset.pointBackgroundColor = `rgba(${colorPool[index]}, 1)`;\n                preparedDataset.pointBorderColor = `rgba(${colorPool[index]}, 1)`;\n                preparedDataset.pointHoverBorderColor = `rgba(${colorPool[index]}, 1)`;\n                preparedDataset.pointHoverBackgroundColor = `rgba(${colorPool[index]}, 1)`;\n            }\n\n        });\n\n        return preparedDataset;\n    };\n\n    const { data } = userOptions;\n\n    return {\n        ...userOptions,\n        data: {\n            labels: data.labels,\n            datasets: data.datasets.map((dataset, i) => prepareDataset(dataset, i))\n        }\n    };\n};\n\nexport default initBarChart;\n","const initPieChart = (userOptions, colorPool) => {\n    const prepareDataset = dataset => {\n        const preparedDataset = {\n            ...dataset,\n            backgroundColor: [],\n            borderColor: [],\n            hoverBackgroundColor: [],\n            hoverBorderColor: [],\n            borderWidth: 1,\n            hoverBorderWidth: 2\n        };\n\n        dataset.data.forEach((d, i) => {\n            preparedDataset.backgroundColor.push(`rgba(${colorPool[i]}, 1)`);\n            preparedDataset.hoverBackgroundColor.push(`rgba(${colorPool[i]}, 1)`);\n            preparedDataset.borderColor.push(`rgba(${colorPool[i]}, 1)`);\n            preparedDataset.hoverBorderColor.push(`rgba(${colorPool[i]}, 1)`);\n\n        });\n\n        return preparedDataset;\n    };\n\n    const { data } = userOptions;\n\n    return {\n        ...userOptions,\n        data: {\n            labels: data.labels,\n            datasets: data.datasets.map(dataset => prepareDataset(dataset))\n        }\n    };\n};\n\nexport default initPieChart;\n","const initLineChart = (userOptions, colorPool) => {\n    const prepareDataset = (dataset, index) => {\n        const preparedDataset = {\n            ...dataset,\n            backgroundColor: `rgba(${colorPool[index]}, 1)`,\n            borderColor: `rgba(${colorPool[index]}, 1)`,\n            pointBackgroundColor: `rgba(${colorPool[index]}, 1)`,\n            pointHoverBackgroundColor: `rgba(${colorPool[index]}, 1)`,\n            pointHoverBorderColor: `rgba(${colorPool[index]}, 1)`,\n            pointBorderColor: `rgba(${colorPool[index]}, 1)`,\n            pointBorderWidth: 2,\n            borderWidth: 4,\n            pointRadius: 3,\n            pointHoverRadius: 6\n        };\n\n        return preparedDataset;\n    };\n\n    const { type, data, options } = userOptions;\n\n    return {\n        type,\n        data: {\n            labels: data.labels,\n            datasets: data.datasets.map((dataset, i) => prepareDataset(dataset, i))\n        },\n        options\n    };\n};\n\nexport default initLineChart;\n","const initLineFillChart = (userOptions, colorPool) => {\n    const prepareDataset = (dataset, index) => {\n        const preparedDataset = {\n            ...dataset,\n            backgroundColor: `rgba(${colorPool[index]}, 0.1)`,\n            borderColor: `rgba(${colorPool[index]}, 1)`,\n            pointBackgroundColor: `rgba(${colorPool[index]}, 1)`,\n            pointHoverBackgroundColor: `rgba(${colorPool[index]}, 1)`,\n            pointHoverBorderColor: `rgba(${colorPool[index]}, 1)`,\n            pointBorderColor: `rgba(${colorPool[index]}, 1)`,\n            pointBorderWidth: 2,\n            borderWidth: 4,\n            pointRadius: 3,\n            pointHoverRadius: 6\n        };\n\n        return preparedDataset;\n    };\n\n    const { type, data, options } = userOptions;\n\n    return {\n        type,\n        data: {\n            labels: data.labels,\n            datasets: data.datasets.map((dataset, i) => prepareDataset(dataset, i))\n        },\n        options\n    };\n};\n\nexport default initLineFillChart;\n","import Chart from \"chart.js\";\n\n// Set global defaults for Chart\nChart.defaults.global.legend.labels.usePointStyle = true;\nChart.defaults.global.defaultFontColor = \"#512B2B\"; // Brand secondary as font color\nChart.defaults.global.elements.line.fill = false;\nChart.plugins.register({\n    beforeDraw (chart) {\n        const xAxis = chart.scales[\"x-axis-0\"];\n\n        xAxis && (xAxis.options.gridLines.display = false); // Check whether this type of chart have x-axis, if so, remove the x-axis gridline\n    }\n});\n\nimport initBarChart from \"./bar\";\nimport initPieChart from \"./pie\";\nimport initLineChart from \"./line\";\nimport initLineFillChart from \"./line-fill\";\n\nconst _colorPool = [\n    \"253, 193, 41\", // brand primary\n    \"238, 112, 35\", // brand tertiary\n    \"49, 163, 174\", // brand accent\n    \"138, 205, 195\", // info turquoise\n    \"239, 183, 182\", // info pink\n    \"37, 120, 134\", // brand accent link\n    \"69, 114, 192\", // neutral/info\n    \"81, 43, 43\", // brand secondary\n    \"163, 139, 128\", // brand secondary light 2\n    \"114, 96, 94\", // brand secondary light\n    \"197, 19, 28\", // danger\n    \"81, 151, 27\" // success\n];\n\n// Shades of green\nconst _colorPoolGreen = [\n    \"45, 169, 68\", // original\n    \"11, 93, 30\",\n    \"5, 59, 6\",\n    \"28, 105, 42\",\n    \"65, 245, 99\",\n    \"48, 182, 73\",\n    \"38, 143, 58\"\n    // \"0, 67, 0\", // darkened 40%\n    // \"147, 255, 170\", // lightened 40%\n    // \"0, 93, 0\", // darkened 30%\n    // \"122, 246, 145\", // lightened 30%\n    // \"0, 118, 17\", // darkened 20%\n    // \"96, 220, 119\", // lightened 20%\n    // \"20, 144, 43\", // darkened 10%\n    // \"71, 195, 94\" // lightened 10%\n];\n\nconst _init = (ctx, userOptions, colorPool) => {\n    let options;\n\n    switch (userOptions.type) {\n        case \"bar\":\n        case \"horizontalBar\":\n            options = initBarChart(userOptions, colorPool);\n\n            break;\n\n        case \"pie\":\n        case \"doughnut\":\n            options = initPieChart(userOptions, colorPool);\n\n            break;\n\n        case \"line\":\n            options = initLineChart(userOptions, colorPool);\n\n            break;\n\n        case \"line-fill\":\n            options = initLineFillChart(userOptions, colorPool);\n            options = {\n                ...options,\n                type: \"line\"\n            };\n\n            break;\n        default:\n            console.warn(`Chart: Chart type \"${userOptions.type}\" is not supported.`);\n    }\n\n    if (options) {\n        new Chart(ctx, options);\n    }\n};\n\nconst chart = (id, userOptions, colorPool) => {\n    const element = document.getElementById(id);\n\n    if (element && element.tagName === \"CANVAS\") {\n        if (!userOptions.type) {\n            console.warn(\"Chart: You need to specify a chart type.\");\n        } else if (!userOptions.data) {\n            console.warn(\"Chart: You need to provide options.data.\");\n        } else {\n            // ..._colorPool.slice(0, 3) is due to the three first colors always having to be included (because of branding)\n            _init(element.getContext(\"2d\"), userOptions, colorPool ? [..._colorPool.slice(0, 3), ...colorPool] : _colorPool);\n        }\n\n    } else if (element) {\n        console.warn(`Chart: Element with id \"${id}\" is not of type canvas.`);\n    } else {\n        console.warn(`Chart: No element with id \"${id}\" found.`);\n    }\n};\n\nexport default chart;\n\n/* For testing */\nexport { _colorPool, _colorPoolGreen };\n","import chart from \"./chart\";\n\nconst dg = window.dg || {};\n\ndg.chart = chart;\n\nwindow.dg = dg;\n\nexport default dg;\n\nexport {\n    chart\n};\n"],"sourceRoot":""}