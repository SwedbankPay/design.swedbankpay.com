{"version":3,"sources":["webpack:///./src/App/docutils/ComponentPreview/index.js"],"names":["ComponentPreview","_ref","children","language","removeOuterTag","hideValue","removeList","showCasePanel","showCasePanelSm","codeFigure","dangerousHTML","negative","_removeOuterTag","element","div","document","createElement","innerHTML","renderToStaticMarkup","firstElementChild","firstChild","nodeValue","_removeList","listElements","querySelectorAll","htmlString","forEach","el","concat","react__WEBPACK_IMPORTED_MODULE_0___default","a","Fragment","className","code","val","v","setDangerousHtml","map","child","_typeof","jsbeautifier","html_beautify","replace","css","defaultProps","style","toUpperCase","split","line","i","key","propTypes","PropTypes","oneOf","isRequired","bool"],"mappings":"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","file":"scripts/doc-route.chunk_114.js?4793eee82984f5e93156","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { renderToStaticMarkup } from \"react-dom/server\";\nimport jsbeautifier from \"js-beautify\";\nimport { defaultProps } from \"prism-react-renderer\";\n\n// NOTE: dangerousHTML prop is used when wanting to show html in the codefigure without encoding.\n\nconst ComponentPreview = ({ children, language, removeOuterTag, hideValue, removeList, showCasePanel, showCasePanelSm, codeFigure, dangerousHTML, negative }) => {\n    const _removeOuterTag = element => {\n        const div = document.createElement(\"div\");\n\n        div.innerHTML = renderToStaticMarkup(element);\n\n        if (div.firstElementChild) {\n            return div.firstElementChild.innerHTML;\n        } else if (div.firstChild) {\n            return div.firstChild.nodeValue;\n        }\n\n        return \"Check ComponentPreview _removeOuterTag!\";\n    };\n\n    const _removeList = element => {\n        const div = document.createElement(\"div\");\n\n        div.innerHTML = renderToStaticMarkup(element);\n\n        const listElements = div.querySelectorAll(\"li\");\n        let htmlString = \"\";\n\n        listElements.forEach(el => {\n            htmlString += `${el.innerHTML} \\n`;\n        });\n\n        return htmlString;\n    };\n\n    const _removeEmpty = val => {\n        val = val.replace(/=\"\"/g, \"\");\n        val = val.replace(/ class>/g, \">\");\n        val = val.replace(/ class /g, \" \");\n        val = val.replace(/value /g, \"\");\n\n        return val;\n    };\n\n    const setDangerousHtml = val => {\n        let code = \"\";\n\n        if (typeof val.forEach === \"function\") {\n            val.forEach(v => code += `${v}\\n`);\n        } else {\n            code = val;\n        }\n\n        return code;\n    };\n\n    const CodeFigure = () => {\n        let code = \"\";\n\n        if (language === \"html\" && dangerousHTML) {\n            code = setDangerousHtml(children);\n        } else if (language === \"html\" && children && typeof children.map === \"function\") {\n            children.map(child => {\n                if (removeOuterTag) {\n                    code += _removeOuterTag(child);\n                } else if (removeList) {\n                    code += _removeList(child);\n                } else {\n                    code += renderToStaticMarkup(child);\n                }\n            });\n\n        } else if (language === \"html\") {\n            if (removeOuterTag) {\n                code += _removeOuterTag(children);\n            } else if (removeList) {\n                code += _removeList(children);\n            } else {\n                code += renderToStaticMarkup(children);\n            }\n        } else {\n            switch (typeof children) {\n                case \"string\":\n                    code = children;\n\n                    break;\n                case \"object\":\n                    children.forEach(child => code += child);\n\n                    break;\n                default:\n                    console.warn(\"CodeFigure: children needs attention!\");\n            }\n        }\n\n        switch (language) {\n            case \"html\":\n                code = jsbeautifier.html_beautify(code);\n                code = _removeEmpty(code);\n\n                if (hideValue) {\n                    code = code.replace(/ value=\"(.*)\"/g, \"\");\n                }\n\n                break;\n            case \"css\":\n                code = jsbeautifier.css(code);\n\n                break;\n            case \"javascript\":\n                // This is not needed, and for some reason crashes after a prod build [EH]\n                // code = jsbeautifier(code);\n                break;\n            default:\n                return \"update switchcase!\";\n        }\n\n        defaultProps.style = \"\";\n\n        return (\n            <figure>\n                <div className=\"code-view\">\n                    <header className=\"code-view-header\">\n                        {language.toUpperCase()}\n                    </header>\n                    <table className=\"code-view-table\">\n                        <tbody>\n                            <tr>\n                                <td className=\"code-view-numbers\">\n                                    <pre>\n                                        {(code).split(\"\\n\").map((line, i) => <React.Fragment key={i}>{i + 1}{\"\\n\"}</React.Fragment>)}\n                                    </pre>\n                                </td>\n                                <td className=\"code-view-code\">\n                                    <pre>\n                                        {(code).split(\"\\n\").map((line, i) => <React.Fragment key={i}>{line}{\"\\n\"}</React.Fragment>)}\n                                    </pre>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </figure>\n        );\n    };\n\n    const ShowCasePanel = () => (\n        <div className={`showcase-panel${showCasePanelSm ? \" showcasepanel-sm\" : \"\"}${negative ? \" showcase-panel-negative\" : \"\"}`}>\n            {children}\n        </div>\n    );\n\n    return (\n        <>\n            {showCasePanel ? <ShowCasePanel /> : null}\n            {codeFigure ? <CodeFigure /> : null}\n        </>\n    );\n};\n\nComponentPreview.propTypes = {\n    language: PropTypes.oneOf([\"html\", \"javascript\", \"css\"]).isRequired,\n    removeOuterTag: PropTypes.bool,\n    hideValue: PropTypes.bool,\n    removeList: PropTypes.bool,\n    showCasePanel: PropTypes.bool,\n    showCasePanelSm: PropTypes.bool,\n    codeFigure: PropTypes.bool,\n    dangerousHTML: PropTypes.bool,\n    negative: PropTypes.bool\n};\n\nexport default ComponentPreview;\n"],"sourceRoot":""}